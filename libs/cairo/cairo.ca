
-- cairo bindings
namespace cairo
    type Context;
    type Surface;
    type FontFace;
    
    type TextExtents { Point bearing; Point size; Point advance }


    -- Contexts
    def create_context_for_surface(Surface s) -> Context
    def stroke(Context cr)
    def paint(Context cr)
    def set_source_color(Context cr, Color color)
    def fill_preserve(Context cr)

    -- Surfaces
    def create_image_surface(Point_i size) -> Surface

    -- Text
    def select_font_face(Context cr, string family)
    def set_font_size(Context cr, number size)
    def set_font_face(Context cr, FontFace font)
    def show_text(Context cr, string s)
    def text_extents(Context cr, string s) -> TextExtents

    -- Paths
    def move_to(Context cr, Point p)
    def curve_to(Context cr, Point control1, Point control2, Point p3)
    def line_to(Context cr, Point p)
    def arc(Context cr, Point center, number radius, number angle1, number angle2)
    def new_sub_path(Context cr)
    def close_path(Context cr)

    def set_line_width(Context cr, number width)

    -- Rendering

    -- This function will modify the pixels in 'surface' (so that the colors
    -- are formatted in a way that OpenGL likes).
    def upload_surface_to_opengl(Surface surface, int texture_id)

    -- Helper functions
    def draw_command_list(List commandList, Point_i bufferSize, Point location)
        state texture = opengl:new_texture_handle()

        if changed(commandList) or changed(bufferSize)
            s = cairo:create_image_surface(bufferSize)
            cr = cairo:create_context_for_surface(s)

            -- run the command list
            for command in commandList
                List(@command)
                func = command[0]
                args = command.slice(1, command.length())

                args.insert(0, cr)

                dynamic_call(func args)

            cairo:upload_surface_to_opengl(s texture)

        opengl:draw_texture_as_quad(texture to_rect(location bufferSize))
