
-- cairo bindings
patch_with_dll(reflect:this_branch(), 'cairo' -> rpath)

namespace cairo
    type Context;
    type Surface;
    type FontFace;
    
    type TextExtents { Point bearing; Point size; Point advance }

    namespace Operator { clear = 0, source = 1, over = 2 }

    -- Contexts
    def create_context_for_surface(Surface s) -> Context

    def Context.save(self)
    def Context.restore(self)
    def Context.stroke(self)
    def Context.paint(self)
    def Context.clip(self)
    def Context.clip_preserve(self)
    def Context.reset_clip(self)
    def Context.set_source_color(self, Color color)
    def Context.fill_preserve(self)
    def Context.set_operator(self, int operator)

    -- Surfaces
    def create_image_surface(Point_i size) -> Surface

    -- Text
    def Context.select_font_face(self, string family)
    def Context.set_font_size(self, number size)
    def Context.set_font_face(self, FontFace font)
    def Context.show_text(self, string s)
    def Context.text_extents(self, string s) -> TextExtents

    -- Paths
    def Context.curve_to(self, Point control1, Point control2, Point p3)
    def Context.move_to(self, Point p)
    def Context.rectangle(self, Rect r)
    def Context.line_to(self, Point p)
    def Context.arc(self, Point center, number radius, number angle1, number angle2)
    def Context.new_sub_path(self)
    def Context.close_path(self)
    def Context.set_line_width(self, number width)

    -- Rendering

    -- This function will modify the pixels in 'surface' (so that the colors
    -- are formatted in a way that OpenGL likes).
    def upload_surface_to_opengl(Surface surface, int texture_id)

    -- Helper functions
    def use_render_function(any func, Point_i bufferSize, Point location, bool redraw)
        state texture = opengl:new_texture_handle()

        if redraw or changed(bufferSize)
            s = cairo:create_image_surface(bufferSize)
            cr = cairo:create_context_for_surface(s)

            -- run the draw function
            dynamic_call(func [cr])

            cairo:upload_surface_to_opengl(s texture)

        opengl:draw_texture_as_quad(texture to_rect(location bufferSize))
