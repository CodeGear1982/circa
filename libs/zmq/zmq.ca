
sys:dll_patch()

namespace zmq
    type Requester :handle;

    def create_requester(String addr) -> Requester
    def Requester.send(_, any msg)
    def Requester.receive(_) -> any
    def Requester.receive_blocking(_) -> any

    type Responder :handle;
    def Responder.read(_) -> any
    def Responder.reply(_, any msg)

    def create_responder(int port) -> Responder

    type Publisher :handle;
    def Publisher.send(_, any msg)

    def create_publisher(int port) -> Publisher

    type Subscriber :handle;
    def Subscriber.poll(_) -> any

    def create_subscriber(String addr) -> Subscriber

    def admin_command_subscribe(String addr)
        state sub = create_subscriber(addr)
        msg = sub.poll()
        if msg != null
            sys:do_admin_command(msg)

    def file_source_update_file(List data, file:FileSource source, file:FileRecord record)

    def install_as_file_source(String addr)
        req = create_requester(addr)

        -- Request manifest
        req.send('get_manifest')
        manifest = req.receive()

        print('received manifest: ' manifest)

        assert(length(manifest) == 2)

        publisher_addr = manifest[0]
        file_list = manifest[1]

        -- Initialize file records
        for file in file_list
            file:fetch_record(file, :zmqFileSource)

        -- Connect subscriber socket, the addr is the same as publisher with '2' appended.
        sub = create_subscriber(concat(addr '2'))

        data = [req sub]
        --file:install_file_source(
        --    :zmqFileSource
        --    null
        --    functor(file_source_update_file data))
