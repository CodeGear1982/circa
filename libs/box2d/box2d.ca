
-- box2d bindings
namespace box2d
    def step(number seconds)
        "Run the simulation for the given timestep. It's recommended to use timesteps of 1/60."
    def gravity(Point vec)
        "Set the gravity vector."
    namespace body_type { static = 0, dynamic = 1, kinematic = 2 }
    def create_body(int bodyType, Point initialPosition, number initialRotation) -> any
        "Create a new body. Don't call this directly, use body() instead."
    namespace shape_type { rect = 0, circle = 1 }
    def set_body_fixtures(any handle, List fixtureDefs)
        "Update the shape on the given body."
    def get_body_points(any handle) -> List
        "Return the list of points of the given body, in screen space."
    def get_body_position(any handle) -> Point
        "Get the position of the body, in screen space."
    def get_body_rotation(any handle) -> number
        "Get the rotation of the body, as a unit angle."
    def set_body_position(any handle, Point p)
        "Move the body to the given position"
    def set_body_rotation(any handle, number rotation)
        "Rotate the body to the given rotation"
    def body_contains_point(any handle, Point p) -> bool
        "Intersection test, returns true if the given point is inside the body"

    def fixed_rect(Point location, number rotation, Point size) -> any
        state handle = create_body(body_type:static, location, rotation)
        if changed(size)
            set_body_fixtures(handle, [[shape_type:rect size 0 0 0]])
        if changed(location)
            set_body_position(handle location)
        if changed(rotation)
            set_body_rotation(handle rotation)
        return handle

    def dynamic_rect(Point location, number rotation, Point size, List properties) -> any
        state handle = create_body(body_type:dynamic, location, rotation)
        if changed(size) or changed(properties)
            set_body_fixtures(handle, [[shape_type:rect size].extend(properties)])
        return handle

    def fixed_circle(Point location, number radius) -> any
        state handle = create_body(body_type:static, location, 0.0)
        if changed(radius)
            set_body_fixtures(handle, [[shape_type:circle radius 0 0 0]])
        if changed(location)
            set_body_position(handle location)
        return handle

    def dynamic_circle(Point location, number radius, List properties) -> any
        state handle = create_body(body_type:dynamic, location, 0.0)
        if changed(radius) or changed(properties)
            set_body_fixtures(handle, [[shape_type:circle radius].extend(properties)])
        return handle

    def draggable_body(any handle)
        state currently_dragging = false

        if not(currently_dragging) and mouse_clicked()
            if body_contains_point(handle, mouse)
                currently_dragging = true

        if not(mouse_pressed())
            currently_dragging = false
            
        if currently_dragging
            delt = delta_point(mouse)

            -- Temporary workaround:
            if mouse_clicked()
                delt = [0 0]

            set_body_position(handle, Point(get_body_position(handle) + delt))

