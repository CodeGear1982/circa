
-- box2d bindings
namespace box2d
    type Body;
    type MouseJoint;

    def step()
        "Run the simulation for one timestep"
    def gravity(Point vec)
        "Set the gravity vector."
    namespace body_type { static = 0, dynamic = 1, kinematic = 2 }
    def create_body(int bodyType, Point initialPosition, number initialRotation) -> Body
        "Create a new body. Don't call this directly, use body() instead."
    namespace shape_type { rect = 0, circle = 1 }

    def Body.set_fixtures(body, List fixtureDefs)
        "Update the shape on the given body."
    def Body.get_points(body) -> List
        "Return the list of points of the given body, in screen space."
    def Body.get_position(body) -> Point
        "Get the position of the body, in screen space."
    def Body.set_position(body, Point p)
        "Move the body to the given position"
    def Body.get_rotation(body) -> number
        "Get the rotation of the body, as a unit angle."
    def Body.set_rotation(body, number rotation)
        "Rotate the body to the given rotation"
    def Body.get_linear_velocity(body) -> Point
    def Body.set_linear_velocity(body, Point p)
    def Body.apply_force(body, Point force, Point point)
    def Body.apply_torque(body, number torque)
    def Body.apply_linear_impulse(body, any center, any point)
    def Body.apply_angular_impulse(body, number impulse)
    def Body.create_mouse_joint(body, Point target) -> MouseJoint
    def MouseJoint.set_target(joint, Point target)

    def body_contains_point(Body body, Point p) -> bool
        "Intersection test, returns true if the given point is inside the body"

    def static_rect(Point location, number rotation, Point size) -> Body
        state body = create_body(body_type:static, location, rotation)
        if changed(size)
            body.set_fixtures([[shape_type:rect size 0 0 0]])
        if changed(location)
            body.set_position(location)
        if changed(rotation)
            body.set_rotation(rotation)
        return body

    def kinematic_rect(Point location, number rotation, Point size) -> Body
        state body = create_body(body_type:kinematic, location, rotation)
        if changed(size)
            body.set_fixtures([[shape_type:rect size 0 0 0]])
        if changed(location)
            body.set_position(location)
        if changed(rotation)
            body.set_rotation(rotation)
        return body

    def dynamic_rect(Point location, number rotation, Point size, List properties) -> Body
        state body = create_body(body_type:dynamic, location, rotation)
        if changed(size) or changed(properties)
            body.set_fixtures([[shape_type:rect size].extend(properties)])
        return body

    def static_circle(Point location, number radius) -> Body
        state body = create_body(body_type:static, location, 0.0)
        if changed(radius)
            body.set_fixtures([[shape_type:circle radius 0 0 0]])
        if changed(location)
            body.set_position(location)
        return body

    def dynamic_circle(Point location, number radius, List properties) -> Body
        state body = create_body(body_type:dynamic, location, 0.0)
        if changed(radius) or changed(properties)
            body.set_fixtures([[shape_type:circle radius].extend(properties)])
        return body

    def draggable_body(Body body)
        state currently_dragging = false

        if not(currently_dragging) and mouse_clicked()
            if body_contains_point(body, mouse)
                currently_dragging = true

        if not(mouse_pressed())
            currently_dragging = false
            
        if currently_dragging
            delt = delta_point(mouse)

            -- Temporary workaround:
            if mouse_clicked()
                delt = [0 0]

            body.set_position(Point(body.get_position() + delt))

    def mouse_joint(Body body, Point target)
        state joint = body.create_mouse_joint(body, target)
        joint.set_target(joint, target)

    def Body.draw_edges(body, Color color)
        gl:line_loop(body.get_points() color)

    def walls_around_screen()
        depth = 100.0
        static_rect([window.width/2, -depth/2], 0, [window.width/2, depth/2])
        static_rect([window.width/2, window.height+depth/2], 0, [window.width/2, depth/2])
        static_rect([-depth/2, window.height/2], 0, [depth/2, window.height/2])
        static_rect([window.width+depth/2, window.height/2], 0, [depth/2, window.width/2])

