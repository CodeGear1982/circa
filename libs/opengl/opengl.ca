-- Copyright (c) Paul Hodge. See LICENSE file for license terms.

sys:dll_patch()

namespace opengl
    def draw_quad(Rect rect)

    -- Textures
    def new_texture_handle() -> int
    def draw_texture_as_quad(int texid, Rect rect)
    def activeTexture(int index)
    def bind_texture(int tex_id)

    -- Shaders
    def load_shader(String vertShaderFile, String fragShaderFile) -> int
    def load_shader_text(String vertShader, String fragShader) -> int
    def reload_shader(String vertShaderFile, String fragShaderFile) -> int
        state program = null
        if file_changed(vertShaderFile) or file_changed(fragShaderFile)
            program = load_shader(vertShaderFile, fragShaderFile)
        return program
    def reload_shader_text(String vertShader, String fragShader) -> int
        state program = null
        if changed(vertShader) or changed(fragShader)
            program = load_shader_text(vertShader, fragShader)
        return program
    def get_uniform_location(int program, String name) -> int
    def uniform(int program, number value)
    def use_program(int program)
    def shader_quad(int program, Rect quad, List uniforms)

    -- FBOs
    type FrameBuffer;
    def generate_frame_buffer(Point p) -> FrameBuffer
    def FrameBuffer.bind(buffer)
    def FrameBuffer.draw_quad(buffer, Rect quad, int uniform)
    def FrameBuffer.get_tex_id(buffer) -> int
    def bind_main_frame_buffer()

    -- Vertex buffer objects
    type VertexBuffer;
    def create_vertex_buffer() -> VertexBuffer
    def VertexBuffer.bind(buffer)
    def VertexBuffer.bufferData(buffer, int size)
    def VertexBuffer.bufferSubData(buffer, int size)
    def bufferData(int buffer_type, int size)
