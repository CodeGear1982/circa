-- Copyright 2009 Andrew Fischer

-- std functions

-- these values are passed to us from main.cpp
state mouse_x = 0.0
state mouse_y = 0.0
state time = 0.0
state elapsed = 0.0

background(0xeeeeeeff)

type Point { float x, float y }

-- p2c: polar to cartesian
def p2c(float angle, float radius, Point center) : Point
  return [cos(angle) * radius + center.x, sin(angle) * radius + center.y]
end

def point_add(Point a, Point b) :Point
  return [a.x + b.x, a.y + b.y]
end

-- our code

def interp(float progress, float e) :float
  return min(progress / e, 1.0)
end

SCREEN_WIDTH = 480
SCREEN_HEIGHT = 600

type TreeSegment {
  Point baseLoc
  float direction
  float depth
  float width
}

def tree_segment(TreeSegment segment)
  state jitter = (rand() - .5) *.3
  state max_length = 20 + 30 * rand()
  state age = 1.0
  age += elapsed
  seg_length = 20.0 * log(age)
  min(@seg_length, max_length)
  direction = segment.direction + jitter
  bottom_width = segment.width * interp(age, 8)
  top_width = segment.width * interp(age, 11)
  a = p2c(direction - HALF_PI, bottom_width, segment.baseLoc)
  b = p2c(direction + HALF_PI, bottom_width, segment.baseLoc)
  c = p2c(direction, seg_length, a)
  d = p2c(direction, seg_length, b)
  next_center = p2c(direction, seg_length, segment.baseLoc)
  shape([a b d c] 0x440101ff)

  if (seg_length > .4*max_length) && segment.depth < 3.0
      tree_segment([next_center segment.direction - 0.4 segment.depth+1 segment.width - .4])
      tree_segment([next_center segment.direction + 0.4 segment.depth+1 segment.width - .41])
  end
end

starting_width = 3.0

tree_segment([[200 300] 0-HALF_PI 0 starting_width])
