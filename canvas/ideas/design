
- First draft problems -

First draft of Canvas had the host program call an initializer ('create_view')
to create an object, and then it would call methods on the object
('onPaintEvent' and 'onInputEvent').

This initializer was ruining liveness b/c it was only ever run once, the system
did not know how to update if it was changed. Initializers are an enemy of
liveness!

Allowing the external code to hold on to the View object was not helping either.
The style of only calling specific methods was severely constraining.

Instead:

The entire View module should be using inlined state, which is very good about
updating from changes.

External code can pass a module input for the current event (like 'onPaintEvent')
and then we'll have an event switch. Then the top-level logic for updating our
state is always run.

This method might have a performance impact, but that is solveable with smart
optimization.

- Design of Canvas -

  View module
    Takes events as input
    Handles redraw event
      Triggers DrawApp

  DrawApp module
    Switch on current screen
      Triggers appropriate screen

  App module
    Loads main script
    Main script must be linked against our drawing funcs

Actionable:
  Add a call_module function
    This func can load on demand


- Screen layout -

Welcome screen
  "1. Set up a text editor"
    Change screen to TextEditorSetup
  "2. Learn the system"
  "3. Play with samples"

TextEditorSetup screen
  Text explaining the deal with editors
  Button to activate file selector
    when file selector is finished, save the editor path

AcademyOutline screen
  Lists all the available lessons, with user-specific progress
  Click to start a lesson
 
AcademyProgress screen
  Draws a neat plant that grows as lessons are completed
  Finishing a lesson will transition here to show animation
  Links to AcademyOutline screen

AcademyEditor screen
  Main screen for when a lesson is in progress
  Lesson instructions are played
  Editor is available

MainEditor screen
  Default editor screen
  EditorMenu on top
  OverlayView
  Run user's script to render main view

EditorMenu
  Load
  Save
  Pause
  Restart
  Snapshot
  Exit
    - All buttons send messages to be handled later

OverlayView
  Draw a piece of code with various annotations


Message Passing World
---------------------

Right now, the entire program communicates by dataflow. This works fine for small
pieces of code, but it's hard to architect a big system this way. As the number
of components increases, the number of cross-program messages increases. We get
to a point where we need to pass around a queue of pending messages to every
part of the program.

So rather than reach that point, let's codify the message-passing.

Each Interpreter has a list of Actors

Each Actor has:
  a reference to a code module
  a list of incoming messages
  a state value

We can trigger an Actor:
  Check the list of incoming messages
    If none, do nothing (maybe still do something?)
  Pick the first message
  Evaluate the code module, using the first message as input. Pass in state too.
    During evaluation, the module may trigger other messages
  Save the resulting state.

Different ways to trigger an actor:
  Process only the first message
  Process every message
  Process first, and trigger even if empty
  Process every, and trigger even if empty

What if we want an actor's response immediately?
  Messages should optionally have a reply-to?
  call_immediately function
    Trigger Actor immediately
    Uses our message as input (disregard queued messages)
    If an outgoing message is a reply, it should be used as the call_immediately
    Other outgoing messages should proceed as normal
  This support could be v2? We can get by with only deferred messages
