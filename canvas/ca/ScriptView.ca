
import UIHelper

msg = input()

def Point.inside(self, Rect rect) -> bool
    return (self.x >= rect.x1) and (self.x <= rect.x2) and (self.y >= rect.y1) and (self.y <= rect.y2)

def set_global(Branch branch, String name, any value)
    value_ref = branch.find_term(name)
    value_ref.assign(value)

state Branch userBranch
state any userState

state interpreter = make_interpreter()
state interpreter_stopped = false
state state_frozen = false

state Point mousePos

state ButtonBar topButtons = button_bar([
    ["Load" :load],
    ["Restart" :restart],
    ["Freeze" :freeze]] [10 10 300 40])

topButtons.setToggled(2, state_frozen)
topButtons.setLabel(2, cond(state_frozen, "Frozen", "Freeze"))

if msg[0] == 'onPaintEvent'
    painter = msg[1] -> Painter

    -- Run the user's script to paint

    -- Slightly evil: Inject some values into the global functions used by the user script,
    -- so that they can access them in a global way.
    set_global(branch_ref(current_painter), 'painter', painter)
    set_global(branch_ref(mouse), 'val', mousePos)

    -- Check if we should run the branch this frame

    if not(userBranch.is_null)
        -- Automatically un-stop the branch if the file is changed
        if changed(userBranch.version)
            interpreter_stopped = false

    if not(userBranch.is_null) and not(interpreter_stopped)
        interpreter.reset
        interpreter.push_frame(userBranch, [])
        interpreter.set_state_input(userState)
        interpreter.run

    -- Draw error display if necessary
    if interpreter.errored
        msg = interpreter.error_message
        painter.drawText([0 0 painter.viewport.width 100] 0 concat(msg))
        interpreter_stopped = true
    else
        userState = interpreter.get_state_output

    -- Paint our menu on top
    topButtons.draw(painter)

elif msg[0] == 'onInputEvent'
    event = msg[1] -> InputEvent

    if event.is_mouse
        mousePos = event.mousePos

    action = topButtons.input(event)

    if action == :freeze
        state_frozen = not(state_frozen)
    elif action != :none
        print('action: ' action)
    

elif msg[0] == 'loadFile'
    print('loading file: ' msg[1])
    branch = load_module(msg[1])
    branch.dump
else
    print("ScriptView didn't recognize: " msg)
