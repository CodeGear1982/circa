
import UIHelper

msg = input()

def Point.inside(self, Rect rect) -> bool
    return (self.x >= rect.x1) and (self.x <= rect.x2) and (self.y >= rect.y1) and (self.y <= rect.y2)

def set_global(Branch branch, String name, any value)
    value_ref = branch.find_term(name)
    value_ref.assign(value)

state Branch userBranch
state any userState

state interpreter = make_interpreter()
state interpreter_stopped = false
state state_frozen = false

state Point mousePos

state ButtonBar topButtons = button_bar([
    ["Load" :load],
    ["Restart" :restart],
    ["Freeze" :freezeState]] [10 10 300 40])

-- set the state of the Freeze button
topButtons.setToggled(2, state_frozen)
topButtons.setLabel(2, cond(state_frozen, "Frozen", "Freeze"))

def to_rect(Point topLeft, Point size)
    return [topLeft.x topLeft.y topLeft.x+size.x topLeft.x+size.y]

def Interpreter.drawRuntimeError(int, Painter painter)
    msg = int.error_message
    left = 10
    width = painter.viewport.width - left
    error_y = 50
    size = [width, 100]
    painter.drawText(to_rect([left error_y] size) 0 concat(msg))

    -- Draw the stack
    y = error_y + 20
    for frame in int.frames
        Frame(@frame)

        loc = frame.pc_term
        painter.drawText(to_rect([left y] [width y+100]) 0 loc.location_string)

        y += 20

if msg[0] == 'onPaintEvent'
    painter = msg[1] -> Painter

    -- Run the user's script to paint

    -- Slightly evil: Inject some values into the global functions used by the user script,
    -- so that they can access them in a global way.
    set_global(branch_ref(current_painter), 'painter', painter)
    set_global(branch_ref(mouse), 'val', mousePos)

    -- Check if we should run the branch this frame

    if not(userBranch.is_null)
        -- Automatically un-stop the branch if the file is changed
        if changed(userBranch.version)
            interpreter_stopped = false

    if not(userBranch.is_null) and not(interpreter_stopped)
        interpreter.reset
        interpreter.push_frame(userBranch, [])
        interpreter.set_state_input(userState)
        interpreter.run

        if not(interpreter.errored) and not(state_frozen)
            userState = interpreter.get_state_output

    -- Draw error display if necessary
    if interpreter.errored
        interpreter.drawRuntimeError(painter)
        interpreter_stopped = true

    -- Paint our menu on top
    topButtons.draw(painter)

elif msg[0] == 'onInputEvent'
    event = msg[1] -> InputEvent

    if event.is_mouse
        mousePos = event.mousePos

    action = topButtons.input(event)

    if action == :freezeState
        state_frozen = not(state_frozen)
    elif action == :load
        send('ScriptView' ['loadFile' 'demos/asteroids.ca'])
    elif action == :restart
        userState = null
    elif action != :none
        print('action: ' action)

elif msg[0] == 'loadFile'
    print('loading file: ' msg[1])
    userBranch = load_module(msg[1])
    userBranch.dump
else
    print("ScriptView didn't recognize: " msg)
