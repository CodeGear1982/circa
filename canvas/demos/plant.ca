
-- Global context, will probably make this implicit in the future.
env = input() -> ScriptContext
time = env.time
mouse = env.mouse
bounds = env.bounds
time = env.time
time_delta = delta(time)

env.background(#fff)

type SegmentInput {
  int generation
  number distance_from_base
  number distance_till_branch
  number end_radius
  Point loc
  number angle
  number bend_value
}

base_grow_rate = 200.0
max_segment_length = 10.0 -- 10 to 30
max_segment_radius = 1.0
max_segment_angle = 1.0 -- .5 - 1
max_segment_length = 10.0 -- 10 - 30
wiggle_factor = 0.07 -- 0 - 1
generation_limit = 21
distance_between_branches_min = 30.0 -- 20 - 100
distance_between_branches_var = 20.0 -- 20 - 100
branch_split_angle = .1

def segment(SegmentInput input)
    state number age = 0.0
    state wiggle_value = rand() - .5
    state thickness_ratio = 1.0

    age += time_delta

    -- length
    target_length = base_grow_rate * age
    min(@target_length, max_segment_length)
    length = target_length * (1 - (1 / (age + 1)))

    -- thickness
    -- todo

    -- angle delta
    angle_delt = wiggle_value * wiggle_factor + input.bend_value
    mult(@angle_delt, (1 - 1 / (age + 1)))
    angle = input.angle + angle_delt

    min(@angle_delt, max_segment_angle)
    max(@angle_delt, -max_segment_angle)

    distance_from_base = input.distance_from_base + length
    distance_till_branch = input.distance_till_branch - target_length
    
    start_pos = input.loc
    end_pos = start_pos + polar(angle) * length
    env.draw_line(start_pos end_pos #0f0)

    nextSeg = create(SegmentInput)
    nextSeg.generation = input.generation + 1
    nextSeg.distance_from_base = distance_from_base
    nextSeg.distance_till_branch = distance_till_branch
    nextSeg.end_radius = 0
    nextSeg.loc = end_pos
    nextSeg.angle = angle
    nextSeg.bend_value = 0

    print('input = ' input)
    print('next = ' nextSeg)

    if nextSeg.generation > generation_limit
        return

    -- check to branch
    if distance_till_branch < 0
        for i in 0..2
            seg = nextSeg
            seg.distance_till_branch = distance_between_branches_min + seed() * distance_between_branches_var
            seg.bend_value = ((i * 2) - 1) * branch_split_angle
            print('branch ' i ': ' seg)
            segment(seg)

    -- or sprout a child
    elif (target_length >= max_segment_length and nextSeg.generation < generation_limit)
        print('child: ' nextSeg)
        segment(nextSeg)


root_pos = [300 300]
segment([0 0 50.0 0 root_pos 0 0])

def make_plants_with_mouse()
    state roots = []

    if env.mouse_clicked
        roots.append(mouse)

    for root in roots
        Point(@root)
        segment([0 0 50.0 0 root 0 0])

-- make_plants_with_mouse()
