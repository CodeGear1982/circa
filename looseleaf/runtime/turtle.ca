
import cairo

mouse = viewport:mouse()

def poly(cairo:Context cxt, Color color, List points)
    cxt.new_sub_path()
    cxt.set_source_color(color)
    for p in points
        cxt.line_to(p)
    cxt.paint()
    cxt.close_path()

def draw_turtle(cairo:Context cxt, Point loc, number facing)
    points = [loc + polar(facing) * 10.0,
      loc + polar(facing+140) * 10.0,
      loc + polar(facing-140) * 10.0]
    poly(cxt, #fff, points)

state Point turtle_loc = [200 200]

turtle_loc += [1.0 0]

def wrap_around_screen(Point p) -> Point
    size = viewport:size() -> Point
    if p.x < 0 { p.x += size.x }
    if p.y < 0 { p.y += size.y }
    if p.x >= size.x { p.x -= size.x }
    if p.y >= size.y { p.y -= size.y }
    return p

trace('a: ' turtle_loc)
wrap_around_screen(@turtle_loc)
trace('b: ' turtle_loc)

def redraw(cairo:Context cxt)
    draw_turtle(cxt turtle_loc 1.0)

cairo:use_render_function(redraw, viewport:size(), [0 0], true)
