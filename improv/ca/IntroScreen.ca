
msg = input() -> List

require UIHelper
require FPSTracker

msg_name = msg[0]

state ButtonBar scriptChoices = UIHelper:button_bar([
        ["Introduction", "demos/intro.ca"]
        ["Asteroids", "demos/asteroids.ca"],
        ["Garden", "demos/garden.ca"]
        ["Avatar", "demos/avatar.ca"]
        ["Skeletal anim", "demos/skeletal.ca"]
        ["Code Browser", "demos/CodeBrowser.ca"]
        ["Stack Browser", "demos/StackBrowser.ca"]
        ["BoxUI Test", "demos/BoxUITest.ca"]
        ])

state fpsTracker = make(FPSTracker:FPSTracker)
state number time

scriptChoices.arrange([30 80 200 370], :vertical)

if msg_name == 'onPaintEvent'
    painter = msg[1] -> Painter

    painter.fillRect(painter.viewport + [0 0 1 1], #756A95)

    painter.setFont(font("assets/MgOpenModernaRegular.ttf", 30))

    right = 10
    for phrase in [[#C9E8E8 "improv"] [#E1BC66 "alpha"] [#ED7D7D "4"]]
        color = phrase[0]
        rect = painter.text([right 50] phrase[1] color [])
        right = rect.x2 + 5

    scriptChoices.paint(painter)

    fpsTracker.onFrame(time)
    print('fps: ', fpsTracker.recentFps)

elif msg_name == 'onInputEvent'
    event = msg[1] -> InputEvent
    choice = scriptChoices.@input(event)
    if is_string(choice)
        send('ScriptView' ['loadFile' choice])
        send('Main' ['changeScreen' 'ScriptView'])
elif msg[0] == 'timeUpdate'
    time = msg[1] -> number
