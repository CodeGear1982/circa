
import UIHelper
import CodeBrowser

msg = input()

state Branch userBranch
state any userState

state interpreter = make_interpreter()
state interpreter_stopped = false
state state_frozen = false
state number timeWhenFrozen = 0
state bool consumedMouseDown = false

state codeBrowser = null

state Point mousePos
state Set keysDown
state number time
state number timeShift = 0

buttons = [
    ["Browse" :browse]
    ["Reset" :reset]
    ["Freeze" :freezeState]
    ["Back" :exit]
    ]
state ButtonBar topButtons = button_bar(buttons)
topButtons.arrange([10 10 buttons.length*100 40], :horizontal)

-- set the state of the Freeze button
freezeIndex = 2
topButtons.setToggled(freezeIndex, state_frozen)
topButtons.setLabel(freezeIndex, cond(state_frozen, "Frozen", "Freeze"))

def to_rect(Point topLeft, Point size) -> Rect
    [topLeft.x topLeft.y topLeft.x+size.x topLeft.x+size.y]

def Interpreter.drawRuntimeError(int, Painter painter)
    msg = int.error_message
    left = 10
    width = painter.viewport.width - left
    error_y = 50
    size = [width, 100]
    painter.setColor(#fff)
    painter.drawText(to_rect([left error_y] size) 0 concat(msg))

    -- Draw the stack
    y = error_y + 20
    for Frame frame in int.frames
        loc = frame.pc_term
        painter.drawText(to_rect([left y] [width y+100]) 0 loc.location_string)

        y += 20

if msg[0] == 'onPaintEvent'
    painter = msg[1] -> Painter

    -- Run the user's script to paint

    -- Check if we should run the branch this frame

    if not(userBranch.is_null)
        -- Automatically un-stop the branch if the file is changed
        if changed(userBranch.version)
            interpreter_stopped = false

    if not(userBranch.is_null) and not(interpreter_stopped)

        usersEnv = create(Environment)
        usersEnv.painter = painter
        usersEnv.mouse = mousePos
        usersEnv.keysDown = keysDown

        if state_frozen
            usersEnv.time = timeWhenFrozen - timeShift
        else
            usersEnv.time = time - timeShift

        interpreter.reset
        interpreter.push_frame(userBranch, [usersEnv])
        interpreter.set_state_input(userState)
        interpreter.run

        if interpreter.errored
            print(interpreter.error_message)

        -- Possibly save their state
        if not interpreter.errored and not state_frozen
            userState = interpreter.get_state_output

    -- Draw error display if necessary
    if interpreter.errored
        interpreter.drawRuntimeError(painter)
        interpreter_stopped = true

    -- Paint our menu on top
    topButtons.draw(painter)
    if codeBrowser != null
        codeBrowser.draw(painter)


elif msg[0] == 'onInputEvent'
    event = msg[1] -> InputEvent

    handled = false
    action = topButtons.input(event)

    if action != null
        consumedMouseDown = true

    if action == :freezeState
        state_frozen = not(state_frozen)
        if state_frozen
            -- Remember the time when we started being frozen
            timeWhenFrozen = time
        else
            -- Update the timeShift
            timeShift += time - timeWhenFrozen
    elif action == :load
        send('ScriptView' ['loadFile' 'demos/asteroids.ca'])
    elif action == :reset
        print('clicked reset')
        userState = null
    elif action == :dump
        userBranch.dump
    elif action == :exit
        send('View' ['changeScreen' 'IntroScreen'])
    elif action == :browse
        codeBrowser = make_code_browser(userBranch)
    elif action == :consumed
        -- noop
    elif action != null
        print('action: ' action)
    else
        -- Event not handled by our UI, pass it to the script

        -- Block input events in Frozen state

        if not state_frozen
            if event.is_mouse and not consumedMouseDown
                mousePos = event.mousePos
                if event.eventType == MouseDown
                    keysDown.add(:mouse1)
                elif event.eventType == MouseUp
                    keysDown.remove(:mouse1)
            elif event.is_key
                en = keycode_to_name(event.keyCode)
                if event.eventType == KeyDown
                    keysDown.add(en)
                else
                    keysDown.remove(en)

    if event.eventType == MouseUp
        consumedMouseDown = false

elif msg[0] == 'timeUpdate'
    time = msg[1] -> number

elif msg[0] == 'loadFile'
    print('loading file: ' msg[1])
    userBranch = load_module(msg[1])

    -- reset state when loading a new file
    userState = null
else
    print("ScriptView didn't recognize: " msg)
