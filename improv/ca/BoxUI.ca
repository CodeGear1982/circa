

type UIElement {
    Name tag
    List args
    Rect rect
    bool rollover
    bool pressed
}

def label(String text, Font font) -> UIElement
    element = create(UIElement)
    element.tag = :Label
    element.args = [text font]
    element

def vertical_menu(List elements) -> UIElement
    element = create(UIElement)
    element.tag = :VerticalList
    element.args = [elements]
    element

def UIElement.draw(self, Painter painter)
    if self.tag == :VerticalList
    elements = self.args[0] -> List
    for UIElement element in elements
        element.draw(painter)

def UIElement.handleEvent(@self, InputEvent e) -> Name
    if e.is_mouse
        self.rollover = e.mousePos.inside(self.rect)
        {-
        self.triggered = self.rollover and e.eventType == :MouseUp
        self.pressed = self.rollover and e.eventType == :MouseDown
        
        if self.triggered
            return self.action
        elif self.pressed
            return :consumed
            -}
        :none

def UIElement.getSize(self) -> Point
    if self.tag == :Label
        str = self.args[0] -> String
        font = self.args[1] -> Font
        font.textSize(str)
    else if self.tag == :VerticalList
        minimum = [0 0]
        elements = self.args[0] -> List
        for UIElement element in elements
            print(element)
            elementSize = element.getSize()
            print('size = ' elementSize)
            minimum.y += elementSize.y
            minimum.x = max(minimum.y, elementSize.y)
        minimum

def UIElement.layout(@self, Point position)
    size = self.getSize

    self.rect = position.to_rect_topleft(size)
    

def UIElement.handleEvents(@self, List events) -> List
    -- Returns a list of unhandled events.

    return events




