
--require canvas
require ui_script_control
require code_view
require time

state userScript = load_script(env(:scriptName)).to_stack

def run_script_control()
  state scriptControl = ui_script_control.new
  --print('scriptControl = ' type(scriptControl).declaringTerm)
  --print('block = ' type(scriptControl).declaringTerm.parent)
  @scriptControl.run(env(:canvasRect))
  scriptControl

def run_code_view()
  view = code_view.new_code_view(env(:userScript).block)
  view.run(env(:canvasRect))

state scriptControlStack = make_stack(run_script_control)
state codeviewStack = make_stack(run_code_view)
state paused = false
state codeviewEnabled = false

state scriptPauseTime = 0.0

userScriptRect = env(:canvasRect)

state userScriptSeed
if not paused
  userScriptSeed = rand()

codeviewWindowSize = time.approach(cond(codeviewEnabled 500 0), 1500)

codeviewRect = @userScriptRect.subtractFrom(:left, codeviewWindowSize)
controlsRect = @userScriptRect.subtractFrom(:top, 50)

def run_script(id, Stack vm, Rect rect)

  {-
  canvas = env(:canvas)
  canvas.save
  canvas.rectangle(rect)
  canvas.clip
  canvas.translate(rect.top_left)
  -}

  vm.set_env(Map.make)
  vm.set_env_val(:userInput env(:userInput))
  vm.set_env_val(:time env(:time))
  vm.set_env_val(:timeDelta, delta(env(:time)))
  vm.set_env_val(:canvasRect rect.translate(rect.top_left * -1))
  vm.set_env_val(:mouse, Vec2.cast(env(:mouse)) - rect.top_left)
  vm.set_env_val(:userScript, userScript)
  -- vm.set_env_val(:entropy, userScriptSeed)

  if id == :game and paused
    vm.set_env_val(:time scriptPauseTime)
    vm.set_env_val(:timeDelta 0)
    vm.append_hack(:no_save_state)

  output = vm.call

  if vm.has_error
    require('error_trace').trace_to_string(vm) | print

  --canvas.reset_clip
  --canvas.restore
  output

--scriptControl = run_script(:ui_control scriptControlStack, controlsRect)

if codeviewRect.width > 0
  run_script(:codeview codeviewStack codeviewRect)

run_script(:game userScript userScriptRect.translate([0 0]))

{-
if not scriptControlStack.has_error
  if scriptControl.paused and not paused
    scriptPauseTime = env(:time)

  paused = scriptControl.paused
  codeviewEnabled = scriptControl.codeviewEnabled

  if scriptControl.events.contains(:refresh)
    userScript.reset_state
-}
