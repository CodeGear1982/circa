
type TextRender {
    any object
    Point size
}

type RenderTarget;
def RenderTarget.getTextRender(self, List args) -> TextRender
def RenderTarget.sendCommand(self, List command)
def RenderTarget.getViewportSize(self) -> Point

type Font;
def create_font(String name, number size) -> Font

type LineList;
def create_line_list(RenderTarget target) -> LineList

-- Wrappers
def font(String name, number size) -> Font
    state f = 0
    if changed([name size])
        f = create_font(name size)
    return f

type Painter {
    RenderTarget target
    Rect viewport

    Font currentFont
}

def Painter.setFont(@self, Font font)
    self.currentFont = font

def Painter.text(self, Point position, String text, Color color, List args) -> Rect
    font = self.currentFont
    textRender = self.target.getTextRender([text font])
    self.target.sendCommand([:textSprite textRender.object position color args])
    rect = [position.x, position.y, position.x + textRender.size.x, position.y + textRender.size.y]
    return rect

def Painter.fillRect(self, Rect r, Color c)
    self.target.sendCommand([:rect r c])
