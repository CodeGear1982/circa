
def sum(List numbers) -> number
    result = 0
    for i in numbers
        result += i
    result
    
def label(any val) -> Name
    if type(val) == Name
        val
    elif type(val) == List
        if length(val) > 0
            label(val[0])

type Node {
    int parent
    List children
    Name strategy
    Map props
    any data
}

type Layout {
    List nodes
    Point size
    int cursor
}

def start(Point size) -> Layout
    layout = make(Layout)
    layout.size = size

    -- set up the initial element
    root = make(Node)
    root.parent = -1
    @layout.nodes.append(root)
    layout.cursor = 0

    layout

def Node.setStrategy(@self, Name strategy)
    self.nodes[self.cursor].strategy = strategy

def Layout.addNode(self, int cursor, data) -> Layout
    element = make(Node)
    element.data = data
    element.parent = cursor

    newCursor = self.nodes.length

    @self.nodes.append(element)
    @self.nodes[cursor].children.append(newCursor)

    self.cursor = newCursor

    return self

def Layout.modifyCurrentNode(self, Closure f) -> Layout
    @self.nodes.mapItem(self.cursor, f)
    self

def Layout.setProp(self, name, value) -> Layout
    @self.modifyCurrentNode({ 
        node = Node(input())
        @node.props.set(name,value)
    })
    self

def Layout.solveX(self) -> List
    -- Return a [(Number,Number)] list of X coordinates for each node.
    results = empty_list(null, self.nodes.length)
    results[0] = [0 self.size.x]

    -- Running total of percent-based fields.
    percentUsed = 0

    for Node node in self.nodes
        nodeX1 = results[0][0]
        nodeX2 = results[0][1]
        availableWidth = nodeX2 - nodeX1

        for int childIndex in node.children
            child = self.nodes[childIndex]
            widthProp = child.props.get('width')

            if label(widthProp) == :percent
                percent = widthProp[1]
                min(@percent, 100 - percentUsed)
                left = percentUsed / 100 * availableWidth
                right = (percentUsed + percent) / 100 * availableWidth

                results[childIndex] = [left right]
                percentUsed += percent

     return results



-- Returns a list of layed-out [Rect, any] pairs.
def Layout.getRects(self) -> List
    positions = empty_list(null, self.nodes.length)

    -- Position the root element
    positions[0] = rect(0 0 self.size.x self.size.y)

    x_ranges = self.solveX()

    for node in self.nodes
        x_range = x_ranges[index()]
        positions[index()] = [x_range[0] 0 x_range[1] 0]

    positions
