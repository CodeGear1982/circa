
def sum(List numbers) -> number
    result = 0
    for i in numbers
        result += i
    result
    
type Node {
    int parent
    List children
    Name strategy
    Map props
    any data
}

type Layout {
    List nodes
    Point size
    int cursor
}

def start(Point size) -> Layout
    layout = make(Layout)
    layout.size = size

    -- set up the initial element
    root = make(Node)
    root.parent = -1
    layout.nodes.append(root)
    layout.cursor = 0

    layout

def Node.setStrategy(@self, Name strategy)
    self.nodes[self.cursor].strategy = strategy

def Layout.addNode(@self, cursor, data)
    element = make(Node)
    element.data = data
    element.parent = cursor

    newCursor = self.nodes.append(element)
    self.nodes[cursor].children.append(newCursor)
    return newCursor

def Layout.modifyCurrentNode(@self, Closure f)
    self.nodes.mapItem(self.cursor, f)
def Layout.setProp(@self, name, value)
    self.modifyCurrentNode({ Node(input()).props.set(name,value) })

def Layout.applyBoxLayout(@self, cursor, List @positions)

-- Returns a list of layed-out [Rect, any] pairs.
def Layout.getRects(self) -> List
    positions = empty_list(null, self.nodes.length)

    -- Position the root element
    positions[0] = rect(0 0 self.size.x self.size.y)

    for Node e in self.nodes

        -- Dispatch on strategy
        if e.strategy == :percent
            percentTags = for child in e.children
                self.nodes[child].props.get('height', :none)

            print('tags: ' percentTags)
            -- totalPercent = sum(for child in e.children { self.nodes[child]

