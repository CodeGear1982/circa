
type Element {
    int parent
    List children
    Name strategy
    Map props
    any data
}

type Layout {
    List elements
    int cursor
}

def start(Point size) -> Layout
    layout = make(Layout)
    layout.size = size

    -- set up the initial element
    root = make(Element)
    root.parent = -1
    layout.elements.append(root)

    layout

def Element.setStrategy(@self, Name strategy)

def Layout.getRoot(self)
    return self.elements[0]

def Layout.addNode(@self, cursor, data)
    element = make(Element)
    element.data = data
    element.parent = cursor

    newCursor = self.elements.append(element)
    self.elements[cursor].children.append(

-- Returns a list of layed-out [Rect, any] pairs.
def Layout.getRects(self) -> List
    positions = empty_list(self.elements.length)

    -- Position the root element
    positions[0] = rect(0 0 self.size.x self.size.y)

    for Element e in self.elements

