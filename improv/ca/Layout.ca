
def sum(List numbers) -> number
    result = 0
    for i in numbers
        result += i
    result
    
def label(any val) -> Name
    if is_name(val)
        val
    elif is_list(val) and length(val) > 0
        label(val[0])
    else
        null

type Node {
    int parent
    List children
    Name strategy
    Map props
    any data
}

type Layout {
    List nodes
    Point size
    int cursor
}

def start(Point size) -> Layout
    layout = make(Layout)
    layout.size = size

    -- set up the initial element
    root = make(Node)
    root.parent = -1
    layout.nodes.append(root)
    layout.cursor = 0

    layout

def Node.setStrategy(@self, Name strategy)
    self.nodes[self.cursor].strategy = strategy

def Layout.addNode(self, int cursor, data) -> Layout
    element = make(Node)
    element.data = data
    element.parent = cursor

    newCursor = self.nodes.append(element)
    self.nodes[cursor].children.append(newCursor)

    self.cursor = newCursor

    self

def Layout.modifyCurrentNode(self, Closure f) -> Layout
    self.nodes = self.nodes.mapItem(self.cursor, f)
    self

def Layout.setProp(self, name, value) -> Layout
    @self.modifyCurrentNode({ Node(input()).props.set(name,value) })


-- Returns a list of layed-out [Rect, any] pairs.
def Layout.getRects(self) -> List
    positions = empty_list(null, self.nodes.length)

    -- Position the root element
    positions[0] = rect(0 0 self.size.x self.size.y)

    for Node node in self.nodes
        -- Get a total of :percent tags, it should be 100, but it doesn't need to be.
        print('children: ' node.children)
        totalPercent = sum(for int child in node.children {
            heightTag = self.nodes[child].props['height']
            print('heightTag: ' heightTag)
            if label(heightTag) == :percent
                heightTag[1]
            else
                0
            })

        print('totalPercent: ' totalPercent)

    positions
