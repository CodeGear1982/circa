
type Brush :handle;
def create_brush(Color c) -> Brush
def Brush.setColor(self, Color c)

type Pen :handle;
def create_pen(Color c, number width, Name style) -> Pen
def Pen.setColor(self, Color color)
def Pen.setWidth(self, number width)
def Pen.setStyle(self, Name style)
def Pen.setDashPattern(self, List dashes)

type PaintEvent :handle;

type FontMetrics :handle;
def FontMetrics.width(self, String text) -> number
def FontMetrics.height(self) -> number

type Font :handle;
def create_font(String name, number size) -> Font
def Font.setPixelSize(self, number size)
def Font.fontMetrics(self) -> FontMetrics

type PainterPath :handle;
def PainterPath.moveTo(self, Point p)
def PainterPath.cubicTo(self, Point a, Point b, Point c)
def PainterPath.addText(self, Point p, Font f, String text)

type LinearGradient :handle;
def create_linear_gradient(Point start, Point stop) -> LinearGradient
def LinearGradient.setColorAt(self, number ratio, Color c)

type Painter;
def Painter.save(self)
def Painter.restore(self)
def Painter.setBackground(self, Brush)
def Painter.setBrush(self, Brush)
def Painter.setFont(self, Font)
def Painter.setColor(self, Color)
def Painter.setPen(self, Pen)
def Painter.rotate(self, number radians)
def Painter.translate(self, Point delta)
def Painter.boundingRect(self, Rect rect, int flags, String text) -> Rect
def Painter.drawEllipse(self, Rect r)
def Painter.drawText(self, Rect r, List options, String text) -> Rect
def Painter.drawLine(self, Point a, Point b)
def Painter.drawRect(self, Rect r)
def Painter.drawPath(self, PainterPath path)
def Painter.drawPolygon(self, List points, Color c)
def Painter.drawRoundRect(self, Rect r)
def Painter.fillRect(self, Rect r, Color c)
def Painter.fontMetrics(self) -> FontMetrics
def Painter.viewport(self) -> Rect

def Painter.setFontDefaultFixedWidth(@self)
    self.setFont(create_font("Courier", 12))

