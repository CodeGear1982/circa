
struct UserInput {
  List recentEvents
  Set buttonsPressed
}

struct MouseEvent {
  Symbol t
  Vec2 pos
}

struct KeyEvent {
  Symbol t
  Symbol key
}

def UserInput.handle_events(self, events) -> UserInput
  self.recentEvents = events
  for event in events
    if event[0] == :down
      @self.buttonsPressed.add(event[1])
    elif event[0] == :up
      @self.buttonsPressed.remove(event[1])
  self

def UserInput.key_pressed(self, Symbol key) -> bool
  for event in self.recentEvents
    if event == [:down key]
      return true
  return false

def new() -> UserInput
  UserInput.make

def key_pressed(Symbol key) -> bool
  env(:userInput).key_pressed(key)

def key_down(Symbol key) -> bool
  userInput = env(:userInput)
  userInput.buttonsPressed.contains(key)

def mouse() -> Vec2
  env(:mouse)

def Vec2.vdiv(self, Vec2 b) -> Vec2
  [self.x/b.x, self.y/b.y]

def mouse_ratio() -> Vec2
  env(:mouse).vdiv(env(:canvasRect).size)

def mouse_in(Rect rect) -> bool
  rect.contains(env(:mouse))

def mouse_pressed() -> bool
  for event in env(:userInput).recentEvents
    if event.slice(0 2) == [:down :left_mouse]
      return true

def mouse_click_in(Rect rect) -> bool
  for event in env(:userInput).recentEvents
    if event.slice(0 2) == [:down :left_mouse] and mouse_in(rect)
      return true
  return false

def wheel_delta() -> Vec2
  result = Vec2.make
  for event in env(:userInput).recentEvents
    if event[0] == :mouse_wheel
      @result.add(event[1])
  result

def arrows_vec() -> Vec2
  out = Vec2.make
  out.x += cond(key_down(:left) -1 0)
  out.x += cond(key_down(:right) 1 0)
  out.y += cond(key_down(:up) -1 0)
  out.y += cond(key_down(:down) 1 0)
  out

{-
type ClickArea {
    Rect rect
    Func listener
}

def click_resolver(any message)

    state clickAreas = []

    -- Language defect: Ridiculous code that could be improved by pattern matching
    if is_list(message)
        if message[0] == :add
            rect = message[1]
            listener = message[2]
            @clickAreas.append(ClickArea.make(rect listener))
        elif message[0] == :resolve
            mousePos = message[1] -> Vec2.cast
            event = message[2]

            listener = nil
            for ClickArea area in clickAreas
                if area.rect.contains(mousePos)
                    listener = area.listener

            if listener != nil
                -- Language defect: Unnecessary cast
                Func.cast(@listener)
                listener.call(mousePos event)

    elif message == :clear
        clickAreas = []

def new_click_resolver() -> VM
    make_vm(click_resolver)
-}
