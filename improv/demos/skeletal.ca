
env = input() -> Environment
mouse = env.mouse

env.background(#000)

struct JointDef {
    Vec2 rel
    int parent
    List children
}

struct SkeletonPose {
    List jointRotations
}
struct PoseList {
    List poses
}

struct Skeleton {
    List jointDefs
    PoseList poseList
    int currentPose
}


def Skeleton.jointCount(self) -> int
    self.jointDefs.length
def Skeleton.addJoint(@self, Vec2 rel, int parent)
    self.jointDefs.append(JointDef([rel parent []]))
def Skeleton.getPivots(@self) -> List
    pivots = []
    for JointDef joint in self.jointDefs
        if joint.parent == -1
            pivot = joint.rel
        else
            pivot = pivots[joint.parent] + joint.rel

        pivots.append(Vec2(pivot))

    pivots

state Skeleton skel
state int selectedJoint
state mode = :building
state PoseList poseList

--skeleton = Skeleton([skel poseList


pivots = skel.getPivots()

-- Handle input, figure out the next action
action = :none

if env.key_pressed(:p)
    action = :posing
elif env.key_pressed(:b)
    action = :building

elif mode == :building
    if env.mouse_pressed and skel.jointCount == 0
        action = :add_joint
    elif env.mouse_pressed
        action = :select
    elif env.key_pressed(:a)
        action = :add_joint
    elif env.mouse_down and selectedJoint != -1
        action = :drag
elif mode == :posing
    if env.mouse_pressed
        action = :select
    elif env.mouse_down and selectedJoint != -1
        action = :drag_pose

if action == :add_joint
    if skel.size == 0
        -- No joints yet: create one
        skel.addJoint(env.mouse, -1)
        selectedJoint = 0
    else
        -- Add joint
        parent = selectedJoint
        parent_pivot = pivots[parent]
        skel.addJoint(env.mouse - parent_pivot, parent)

elif action == :select
    
    closestDistance = 0.0

    closest = -1
    c_selectDistance = 10.0

    index = 0
    for Vec2 pivot in pivots
        dist = point_distance(pivot env.mouse)

        if dist < c_selectDistance and (closest == -1 or dist < c_selectDistance)
            closest = index
            closestDistance = dist
        index += 1

    selectedJoint = closest
elif action == :drag
    skel.jointDefs[selectedJoint].rel += env.mouse.delta
elif action == :posing
    mode = :posing
elif action == :building
    mode = :building

pivots = skel.getPivots()

-- Draw

modeLabel = if mode == :building
                "Building"
            else
                "Posing"

env.draw_text([10, env.bounds.y - 20] [], modeLabel, #fff)

index = 0
for JointDef joint in skel.jointDefs
    pivot = pivots[index] -> Vec2
    size = 4
    if index == selectedJoint
        color = #fff
        size = 6
    else
        color = #ff0
    env.fill_rect(pivot.to_rect_center([size size]) color)
    if joint.parent != -1
        parent_pivot = pivots[joint.parent]
        env.draw_line(pivot parent_pivot #ff0)
    index += 1
