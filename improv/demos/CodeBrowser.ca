
{-
  CodeBrowser v1

  Goals
    Display code as near-text
    Support syntax highlight
    Support independent term position (for animation)
    Support filters

    positionMap( Term -> Rect )
    update_position(FilteredBranch) -> PositionMap

    BrowserView
      positionMap
      Branch branch
      List filters

    BrowserView.draw(painter)

-}

env = input() -> Environment
env.background(#448)

type PositionedPhrase {
    Term term
    List position
    String str
}

type CodeBrowser {

    Branch branch

    List filters
    List terms

    int scrollStart
    int visibleCount

    List positionedPhrases

    Rect windowPosition
}

def CodeBrowser.updateLayout(@self)
    
    phrases = []
    position = [0 0]

    for int index in (self.scrollStart .. (self.scrollStart+self.visibleCount))
        term = self.branch.get_term(index)

        print(term.to_source_string)
        for phrase in term.format_source()
            print(phrase)
            print('start: ' position)
            str = phrase[0] -> String
            phrase_term = phrase[1]
            id = phrase[2]

            phrases.append(PositionedPhrase([term position str]))

            if id == :tok_Newline
                position = [0, position[1] + 1]
            else
                position[0] += str.length

            print('fin: ' position)

        position = [0 position[1] + 1]
        position[1] += 1

    self.positionedPhrases = phrases

def CodeBrowser.setPosition(@self, Rect rect)
    self.windowPosition = rect

def CodeBrowser.draw(self, Painter painter)

    painter.fillRect(self.windowPosition #ccc)

    -- Enable a fixed width font
    painter.setFontDefaultFixedWidth()

    -- Find the font's dimensions
    metrics = painter.fontMetrics
    letterSize = [metrics.width('AAAAAAAAAA') / 10, metrics.height] -> Point

    for PositionedPhrase phrase in self.positionedPhrases
        term = phrase.term
        pos = phrase.position

        screenPos = [pos[0] * letterSize.x, pos[1] * letterSize.y] -> Point
        add(@screenPos, self.windowPosition.topleft)

        Point(@screenPos)
        painter.drawText([screenPos.x screenPos.y self.windowPosition.x2 self.windowPosition.y2]
            [:NoWrap] phrase.str)

def make_code_browser(Branch branch) -> CodeBrowser
    browser = create(CodeBrowser)
    browser.branch = branch
    browser.terms = branch.terms
    browser.scrollStart = 0
    browser.visibleCount = 10
    browser.updateLayout()
    return browser


state browser = make_code_browser(load_script('Avatar.ca' -> rpath))
browser.setPosition([10 50 300 350])
browser.draw(env.painter)
