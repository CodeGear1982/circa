
{-
  CodeBrowser v1

  Goals
    Display code as near-text
    Support syntax highlight
    Support independent term position (for animation)
    Support filters

    positionMap( Term -> Rect )
    update_position(FilteredBranch) -> PositionMap

    BrowserView
      positionMap
      Branch branch
      List filters

    BrowserView.draw(painter)

-}

env = input() -> Environment
env.background(#448)

type LayoutTerm {
    Term term
    List position
}

type CodeBrowser {

    Branch branch
    List filters
    List terms

    List layoutTerms

    Rect windowPosition
}

def CodeBrowser.updateLayout(@self)
    
    curY = 0

    self.layoutTerms = for Term term in self.terms

        position = [0 curY]
        curY += 1

        LayoutTerm([term position])

def CodeBrowser.setPosition(@self, Rect rect)
    self.windowPosition = rect

def CodeBrowser.draw(self, Painter painter)

    painter.fillRect(self.windowPosition #ccc)

    -- Enable a fixed width font
    painter.setFontDefaultFixedWidth()

    -- Find the font's dimensions
    metrics = painter.fontMetrics
    letterSize = [metrics.width('A') metrics.height] -> Point

    for LayoutTerm lterm in self.layoutTerms
        term = lterm.term
        pos = lterm.position

        screenPos = [pos[0] * letterSize.x, pos[1] * letterSize.y] -> Point
        add(@screenPos, self.windowPosition.topleft)

        Point(@screenPos)
        painter.drawText([screenPos.x screenPos.y self.windowPosition.x2 self.windowPosition.y2]
            [] term.to_source_string)

def make_code_browser(Branch branch) -> CodeBrowser
    browser = create(CodeBrowser)
    browser.branch = branch
    browser.terms = branch.terms
    browser.updateLayout()
    return browser


state browser = make_code_browser(load_script('Avatar.ca' -> rpath))
browser.setPosition([10 50 300 350])
browser.draw(env.painter)
