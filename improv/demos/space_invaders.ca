
require input
require improv
require gl
require gl/shader_builder
require gl/improv_util

-- new draw

struct Sprite2d {
  Color currentColor
  Blob data
}

def Sprite2d.color(@self, Color color)
  self.currentColor = color

def Sprite2d.append_color(@self, Color color)
  @self.data | .append_f32(color.r)
  @self.data | .append_f32(color.g)
  @self.data | .append_f32(color.b)
  @self.data | .append_f32(color.a)

def Sprite2d.append_vec2(@self, Vec2 vec)
  @self.data | .append_f32(vec.x)
  @self.data | .append_f32(vec.y)

def Sprite2d.send_rect(@self, Rect rect)
  @self | .append_vec2(rect.top_left)
  @self | .append_color(@currentColor)
  @self | .append_vec2(rect.top_right)
  @self | .append_color(@currentColor)
  @self | .append_vec2(rect.bottom_left)
  @self | .append_color(@currentColor)
  @self | .append_vec2(rect.top_right)
  @self | .append_color(@currentColor)
  @self | .append_vec2(rect.bottom_right)
  @self | .append_color(@currentColor)
  @self | .append_vec2(rect.bottom_left)
  @self | .append_color(@currentColor)

def Sprite2d.to_vbo(self)
  vbo = gl.new_vertex_buffer
  vbo.set_draw_type(:triangles)
  vbo.set_attribs([:pos 2] [:color 4])
  vbo.set_data(self.data)
  vbo

def Sprite2d.fill(@self, shape)
  if typeof(shape) == Rect
    @self.fill_rect(shape)
  else
    error('unrecognized: ' shape)

struct RenderPass {
  any shader
  any viewMat
}

def RenderPass.init(@self)
  builder = shader_builder.new
  @builder.attribute('vec2', 'pos')
  @builder.attribute('vec4', 'color')
  @builder.vertexUniform('mat3', 'view')
  @builder.varying('vec4', 'var_color')

  @builder.vertexBody(
    <<<
    void main()
    {
        gl_Position = vec4(view * vec3(pos, 1.0), 1.0);
        var_color = color;
    }
    >>>
  )

  @builder.fragmentBody(
    <<<
    void main()
    {
        gl_FragColor = var_color;
    }
    >>>
  )

  self.shader = builder.to_shader
  self.viewMat = improv_util.screenspace_mat3

def RenderPass.start(self)
  gl.uniform_mat3(:view self.viewMat)
  gl.use_shader(self.shader)

draw = Sprite2d.make
render = RenderPass.make.init

def grid_points(Vec2 size)
  set(FuncSeq.make
    :done false
    :key 0
    :current Vec2.make(0 0)
    :advanceFunc (seq) ->
      seq.key += 1
      update(@seq :current (v) ->
        v.x += 1
        if v.x >= size.x
          v.x = 0
          v.y += 1
        v
      )
      if seq.current.y >= size.y
        seq.done = true
      seq
  )

def stay_inside_rect(Vec2 @vec, Rect rect)
  max(@vec.x rect.x1)
  min(@vec.x rect.x2)
  max(@vec.y rect.y1)
  min(@vec.y rect.y2)

struct PlayerShip {
  Vec2 loc
}

state PlayerShip playerShip

if once()
  playerShip.loc = improv.window_size.div(2)

def PlayerShip.draw(self)
  loc = self.loc
  color = #0f0
  widths = [1 1 3 3 3 5 10 15 20 25 35 40 40 40 40 40 40 40 40 40 40]
  for i, width in widths
    center = playerShip.loc.add([0, i - widths.length//2])
    rect = center.to_rect(:center [width 1])
    draw.fill_rect(#f00 rect)

def PlayerShip.update(self)
  @self.loc | add(input.arrows_vec * 3)
  @self.loc | stay_inside_rect(improv.window_rect.grow([-20 -20]))

@playerShip.update

struct Bullet {
  Vec2 loc
}

def Bullet.draw(self)
  draw.fill_rect(#fff self.loc.to_rect(:center [3 20]))

def Bullet.update(@self)
  @self.loc.y -= 20

def Bullet.alive(self)
  self.loc.y > -20

state List bullets

if input.key_pressed(:space)
  @bullets.append(Bullet.make(playerShip.loc))

@bullets | map(b -> b.update)
@bullets | filter(b -> b.alive)
@bullets | flatten

draw.background(#333)

playerShip.draw

for bullet in bullets
  bullet.draw

struct Mob {
  Vec2 loc
}

def Mob.draw(self)
  pixels = [
  [0 0 1 0 0 0 1 0 0]
  [0 0 0 1 0 1 0 0 0]
  [0 0 1 1 1 1 1 0 0]
  [0 1 0 1 1 1 0 1 0]
  [0 0 0 1 0 1 0 0 0]
  ]
  w = 9
  h = 5
  size = 4
  for y, row in pixels
    for x, col in row
      if col == 1
        rv = Vec2.make(x y).add([-w // 2, -h // 2]).mult(size)
        v = self.loc.add(rv)
        draw.fill_rect(#0ff v.to_rect(:center [size size]))

def new_mob_list()
  mobs = []
  locs = grid_points([8 4])
  spacing = Vec2.make(40 40)
  map(locs, loc -> Mob.make(loc * spacing))

mobs = new_mob_list()

for_each(mobs, m -> m.draw)

