
require draw
require input
require improv

def grid_points(Vec2 size)
  set(FuncSeq.make
    :done false
    :key 0
    :current Vec2.make(0 0)
    :advanceFunc (seq) ->
      seq.key += 1
      update(@seq :current (v) ->
        v.x += 1
        if v.x >= size.x
          v.x = 0
          v.y += 1
        v
      )
      if seq.current.y >= size.y
        seq.done = true
      seq
  )

struct PlayerShip {
  Vec2 loc
}

state PlayerShip playerShip

if once()
  playerShip.loc = improv.window_size.div(2)

def Vec2.within_rect(@self, Rect rect)
  max(@self.x rect.x1)
  min(@self.x rect.x2)
  max(@self.y rect.y1)
  min(@self.y rect.y2)

def PlayerShip.draw(self)
  loc = self.loc
  color = #0f0
  widths = [1 1 3 3 3 5 10 15 20 25 35 40 40 40 40 40 40 40 40 40 40]
  for i, width in widths
    center = playerShip.loc.add([0, i - widths.length//2])
    rect = center.to_rect(:center [width 1])
    draw.fill_rect(#f00 rect)

def PlayerShip.update(self)
  @self.loc.add(input.arrows_vec * 3)
  @self.loc.within_rect(improv.window_rect.grow([-20 -20]))

@playerShip.update

struct Bullet {
  Vec2 loc
}

def Bullet.draw(self)
  draw.fill_rect(#fff self.loc.to_rect(:center [3 20]))

def Bullet.update(@self)
  @self.loc.y -= 20

def Bullet.alive(self)
  self.loc.y > -20

state List bullets

if input.key_pressed(:space)
  @bullets.append(Bullet.make(playerShip.loc))

@bullets.map(b -> b.update)
@bullets.filter(b -> b.alive)

draw.background(#333)

playerShip.draw

for bullet in bullets
  bullet.draw

struct Mob {
  Vec2 loc
}

def Mob.draw(self)
  pixels = [
  [0 0 1 0 0 0 1 0 0]
  [0 0 0 1 0 1 0 0 0]
  [0 0 1 1 1 1 1 0 0]
  [0 1 0 1 1 1 0 1 0]
  [0 0 0 1 0 1 0 0 0]
  ]
  w = 9
  h = 5
  size = 4
  for y, row in pixels
    for x, col in row
      if col == 1
        rv = Vec2.make(x y).add([-w // 2, -h // 2]).mult(size)
        v = self.loc.add(rv)
        draw.fill_rect(#0ff v.to_rect(:center [size size]))

def new_mob_list()
  mobs = []
  locs = grid_points([8 4])
  spacing = Vec2.make(40 40)
  map(locs, loc -> Mob.make(loc * spacing))

mobs = new_mob_list()

for_each(mobs, m -> m.draw)
