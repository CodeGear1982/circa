
env = input() -> Environment

fgcolor = #fff
bgcolor = #848
frame_line_bgcolor_1 = #848
frame_line_bgcolor_2 = #838

type FrameLine {
    Term term
    Rect rect
}

def FrameLine.handleEvent(@self, any event) -> actions
def FrameLine.draw(self, Painter painter)
    formatted = self.term.format_source_normal
    text = (for element in formatted { element[0] }).join('')
    painter.text(self.rect.bottomleft + [2 -5], text, fgcolor, [])


type FrameBubble {
    List lines
    Rect rect
    Frame frame
    int highlightedLine
}

def FrameBubble.layout(@self, Rect rect)
    next_point = rect.topleft
    lineHeight = 23
    self.rect = rect
    for FrameLine line in @self.lines
        line.rect = [next_point.x next_point.y rect.x2 next_point.y + lineHeight]

        next_point.y += lineHeight

def FrameBubble.initializeFromBranch(@self, Branch branch)
    self.lines = for Term term in branch.terms
        line = create(FrameLine)
        line.term = term

def FrameBubble.draw(self, Painter painter)
    -- background
    colors = [frame_line_bgcolor_1 frame_line_bgcolor_2]

    index = 0
    for FrameLine line in self.lines
        bgcolor = colors[index % 2]
        
        if index == self.highlightedLine
            bgcolor.lighten(.1)

        painter.fillRect(line.rect, bgcolor)
        line.draw(painter)

        index += 1

def FrameBubble.handleEvent(@self, InputEvent event)
    index = 0
    for FrameLine line in self.lines
        if event.mouseDownIn(line.rect)
            self.highlightedLine = index
        index += 1

def FrameBubble.lineCount(self) -> int

type StackBrowser {
    List bubbles
    Name currentLayoutType
    Branch branch
}

def StackBrowser.layout(@self, Rect totalRect)
    for FrameBubble bubble in @self.bubbles
        bubble.layout(totalRect)

def StackBrowser.handleEvent(@self, InputEvent event)
    for FrameBubble bubble in @self.bubbles
        bubble.handleEvent(event)

def StackBrowser.addBubble(@self, Branch branch)
    bubble = create(FrameBubble)
    bubble.initializeFromBranch(branch)
    bubble.highlightedLine = -1
    self.bubbles = [bubble]

def StackBrowser.draw(self, Painter painter)
    for FrameBubble bubble in self.bubbles
        bubble.draw(painter)

def stack_browser(Branch branch) -> StackBrowser
    browser = create(StackBrowser)
    browser.branch = branch

    -- add first bubble
    browser.addBubble(branch)

    browser

testBranch = {
    num_stars = 100
    points = for i in 0..num_stars
        state Point original_loc = [rand() rand()] * 300
        loc = add(original_loc, drift)
        loc
    env.draw_points(points, #fff)
}

env.background(#339)

state browser = stack_browser(branch_ref(testBranch))
browser.layout([10 50 600 600])
browser.draw(env.painter)

for event in env.events
    browser.handleEvent(event)
