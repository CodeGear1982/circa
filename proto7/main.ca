
-- std functions

state mouse_x = 0.0
state mouse_y = 0.0
state elapsed = 0.0
state time = 0.0

background(0xeeeeeeff)

type Point { float x, float y }

def p2c(float angle, float radius, Point center) : Point
  return [cos(angle) * radius + center.x, sin(angle) * radius + center.y]
end

def add_points(Point a, Point b) : Point
  return [a.x + b.x, a.y + b.y]
end

type Box { float x1, float y1, float x2, float y2 }

def mouse_in(Box b) : bool
  return (b.x1 < mouse_x) && (b.x2 > mouse_x) && (b.y1 < mouse_y) && (b.y2 > mouse_y)
end

_point_highlight_dist = 10.0
def highlight_point(Point p)
  fill_circle(p.x p.y _point_highlight_dist 0xccffcc55)
  circle(p.x p.y _point_highlight_dist 0xffffff55)
end

-- our code

buttons = ["Button1", "Button2", "Button3"]

loc = [30 30] : Point

button_size = [100 20] : Point
--total_h = button_size = buttons.length()

font_height = 8

normal_color = 0x00ff00ff
highlight_color = 0x555555ff

current_y = loc.y
for button in buttons
  button_loc = [loc.x, current_y] : Point
  b = [button_loc.x, button_loc.y, button_loc.x+button_size.x, button_loc.y+button_size.y]:Box

  color = 0
  if mouse_in(b)
    color = highlight_color
  else
    color = normal_color
  end

  --if mouse_clicked(b)
    --print('clicked: ' button)
  --end
    
  box(b.x1 b.y1 b.x2 b.y2 color)
  drawText(button_loc.x + 3, button_loc.y + (button_size.y - font_height) / 2, button, 0x000000ff)
  current_y += button_size.y + 9
end
