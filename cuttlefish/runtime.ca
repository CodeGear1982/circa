
type Point { float x, float y }
type Box { float x1, float y1, float x2, float y2 }

-- Wrap up mouse position into a point (values are passed in from input.cpp)
mouse = [_mouse_x _mouse_y] : Point

def mouse_in(Box b) : bool
  return (b.x1 < mouse.x) && (b.x2 > mouse.x) && (b.y1 < mouse.y) && (b.y2 > mouse.y)
end

-- p2c: polar to cartesian
def p2c(float angle, float radius, Point center) : Point
  return [cos(angle) * radius + center.x, sin(angle) * radius + center.y]
end

def draw_box(Box box, int color)
    nw = [box.x1 box.y1]
    ne = [box.x2 box.y1]
    sw = [box.x1 box.y2]
    se = [box.x2 box.y2]
    gl.triangles([nw ne se se sw nw] color)
end

ui_font_medium = load_font("assets/sv_basic_manual/SVBasicManual.ttf", 16)

def draw_text(TTF_Font font, string text, int color, Point location)
    sprite = render_text(font, text, color)
    draw_rendered_text(sprite, location.x location.y)
end

-- TODO: put this in a separate file
namespace tweak
    def button(ref r, Point loc)
        text = concat(r.name ' = ' r.to_string)

        text_sprite = render_text(ui_font_medium, text, #000)
        padding = 5.0
        rect = [loc.x - padding, loc.y - padding,
            loc.x + text_sprite.width + padding, loc.y + text_sprite.height + padding]
        color = #ee3399
        if mouse_in(rect) color = #ff44aa end
        draw_box(rect, color)
        draw_rendered_text(text_sprite, loc.x, loc.y)

        if mouse_wheel_up(rect)
            r.assign(r.asint - 5)
        elif mouse_wheel_down(rect)
            r.assign(r.asint + 5)
        end
    end
end

-- in main.cpp, we load the user's script into this branch:
users_branch = branch()

