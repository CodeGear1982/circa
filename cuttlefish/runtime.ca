
type Point { float x, float y }
type Box { float x1, float y1, float x2, float y2 }

-- Wrap up mouse position into a point (values are passed in from input.cpp)
mouse = [_mouse_x _mouse_y] : Point

def mouse_in(Box b) : bool
  return (b.x1 < mouse.x) && (b.x2 > mouse.x) && (b.y1 < mouse.y) && (b.y2 > mouse.y)
end

-- p2c: polar to cartesian
def p2c(float angle, float radius, Point center) : Point
  return [cos(angle) * radius + center.x, sin(angle) * radius + center.y]
end

def draw_box(Box box, int color)
    nw = [box.x1 box.y1]
    ne = [box.x2 box.y1]
    sw = [box.x1 box.y2]
    se = [box.x2 box.y2]
    gl.triangles([nw ne se se sw nw] color)
end

ui_font_medium = load_font("assets/sv_basic_manual/SVBasicManual.ttf", 16)

-- TODO: put this in a separate file
namespace value_tweaker
    i = 1

    state List current_targets = [get_ref(i)]

    def set_targets(List l)
        current_targets := l
    end

    def button(ref r, Point loc)
        text = concat(r.name ' = ' r.to_string)

        text_sprite = render_text(ui_font_medium, text, #000)
        padding = 5.0
        rect = [loc.x - padding, loc.y - padding,
            loc.x + text_sprite.width + padding, loc.y + text_sprite.height + padding]
        color = #f22
        if mouse_in(rect) color = #f77 end
        draw_box(rect, color)
        draw_rendered_text(text_sprite, loc.x, loc.y)

        if mouse_wheel_up(rect)
            r.tweak_value(0.9)
        elif mouse_wheel_down(rect)
            r.tweak_value(1.1)
        end
    end

    -- draw current targets
    --y = 50
    for target in current_targets
        loc = [10 10]
        button(target, loc)
        --y += 10
    end
end --namespace

-- in main.cpp, we load the user's script into this branch:
users_branch = branch()

