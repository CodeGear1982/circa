
background(#eef)
desired_window_size = [480 600]

def interp(number progress, number e) -> number
  return min(progress / e, 1.0)

def tree_segment(Point base, number direction, number width, number depth,
    List @leaves)
  jitter = (seed() - .5) *.05
  max_length = 20 + 30 * seed()
  age = 1.0 + elapsed()
  seg_length = 20.0 * log(age)
  min(@seg_length, max_length)
  color = #6a3

  --direction = direction + jitter
  bottom_width = width * interp(age, 8)

  has_branches = (seg_length > .4*max_length) and depth < 4.0

  top_width = width * interp(age, 11)
  cond(has_branches, @top_width, 0.0)

  l = polar(direction - .25) * bottom_width + base
  r = polar(direction + .25) * bottom_width + base
  next_center = polar(direction) * seg_length + base
  l2 = polar(direction - .25) * top_width + next_center
  r2 = polar(direction + .25) * top_width + next_center
  points = [r l l2 l2 r2 r]
  gl:triangles(points color)
  gl:lines([l l2 r r2], #000)

  -- branches
  if has_branches
    branch_age = elapsed()
    l_angle = direction - seed() * .2
    r_angle = direction + seed() * .2
    mult(@l_angle, interp(branch_age, 8))
    mult(@r_angle, interp(branch_age, 8))
    l_branch = tree_segment(next_center->Point, l_angle, width * .8, depth+1)
    r_branch = tree_segment(next_center->Point, r_angle, width - .4, depth+1)

  -- leaves
  if width < .6
      leaf_pos = seed() * seg_length
      leaves.append(base + polar(direction) * leaf_pos)

starting_width = 3.0
leaves = []
root = tree_segment([200 300], 0, starting_width, 0, @leaves)

