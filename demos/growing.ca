
background(#eef)
desired_window_size = [480 600]

def interp(number progress, number e) -> number
  return min(progress / e, 1.0)

def tree_segment(Point base, number direction, number width, int depth, List leaves +out)
  jitter = (seed() - .5) *.05
  max_length = 20 + 30 * seed()
  mult(@max_length, (1.0 - .1 * depth))
  age = 1.0 + elapsed()
  seg_length = max_length * interp(age, 10)
  color = #6a3

  -- bend our angle, if this isn't the root segment
  if depth > 0
      direction += interp(age, 10) * (seed()-.5) * .4

  bottom_width = width * interp(age, 8)

  branch_count = 0
  
  if age > 5
      branch_count += 1
  if age > 10
      branch_count += 1
  if age > 15
      branch_count += 1

  if depth >= 4.0
    branch_count = 0

  top_width = width * interp(age, 11)

  -- taper the tip if there are no branches
  cond(branch_count == 0, 0.0, @top_width)

  l = polar(direction - .25) * bottom_width + base
  r = polar(direction + .25) * bottom_width + base
  next_center = polar(direction) * seg_length + base
  l2 = polar(direction - .25) * top_width + next_center
  r2 = polar(direction + .25) * top_width + next_center
  points = [r l l2 l2 r2 r]
  gl:triangles(points color)
  gl:lines([l l2 r r2], #000)

  for branchIndex in 0..branch_count
    branch_age = elapsed()
    tree_segment(next_center->Point, direction, width * .6, depth+1, &leaves)

  -- leaves
  leaf_count = cond(width < .6, 0, 3)
  myLeaves = []
  for leafIndex in 0..leaf_count
     leaf_pos = seed() * seg_length
     myLeaves.append(leaf_pos)

  leaves.append(myLeaves)

starting_width = 3.0
leaves = []
root = tree_segment([200 300], 0, starting_width, 0, &leaves)
