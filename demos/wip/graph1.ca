
background(#fff)

type BoxDefinition {
  string name
  Point loc
  Point size
  List connections
}

node_content_font = text:load_font("../plastic/assets/Inconsolata.otf"->path, 16)

def rect_center(Rect rect) -> Point
    return [(rect.x1 + rect.x2) / 2, (rect.y1 + rect.y2) / 2]

def linear_interp(number start, number fin, number total_time) -> number
    ratio = elapsed() / total_time
    min(@ratio, 1.0)
    trace(ratio)
    return start + (fin - start) * ratio

def text_centered_in_rect(Font font, string str, Color color, Rect rect)
    sprite = text:render_text(font, str, color)
    x = (rect.x1 + rect.x2) / 2 - sprite.width / 2
    y = (rect.y1 + rect.y2) / 2 - sprite.height / 2

    text:draw_rendered_text(sprite, [x y])

def draw_graph(List box_definitions)
    state List box_positions

    if once()
        box_positions = []
        for defi in box_definitions
            @defi -> BoxDefinition
            box_positions.append(defi.loc)

    name_to_box_rect = Map()

    -- Update positions for each box
    index = 0
    for defi in box_definitions
        @defi -> BoxDefinition
        pos = box_positions[index] -> Point
        rect = to_rect(pos defi.size)

        draggable_rect(@pos defi.size)

        box_positions[index] = pos

        name_to_box_rect.add(defi.name rect)

        index += 1

    -- Draw each line
    index = 0
    for defi in box_definitions
        @defi -> BoxDefinition
        pos = box_positions[index] -> Point
        rect = to_rect(pos defi.size)
        -- Draw each line
        outgoing_point = [(rect.x1 + rect.x2) / 2 rect.y2] -> Point
        for conn in defi.connections
            their_rect = name_to_box_rect.get(conn) -> Rect

            incoming_point = [(their_rect.x1 + their_rect.x2) / 2 their_rect.y1]

            line(outgoing_point incoming_point #000)

        index += 1

    -- Draw each box
    index = 0
    for defi in box_definitions
        @defi -> BoxDefinition
        pos = box_positions[index] -> Point
        rect = to_rect(pos defi.size)

        fill_rect(rect #383)
        draw_rect(rect #333)

        text_centered_in_rect(node_content_font defi.name #fff rect)

        index += 1

sample_input = [
  ['Box1' [20 20] [80 30] ['Box2']]
  ['Box2' [20 60] [80 30] []]
  ]

draw_graph(sample_input)

