background(#eef)

namespace editor
    def get_highlight_color(int token) -> Color
        return #000

def draw_code(string s, Point loc, Color color)
    draw_text(coding_font, s, color, loc)

def draw_code_editor(Point topleft, BranchRef branch)
    source = branch.format_source()

    type Fragment {
      string str
      Ref term
      int token
      Point loc
      Point size
    }

    fragments = []

    letter_width = 8
    letter_height = 17

    termToLocation = Map()


    def source_loc_to_rect(Rect_i source_loc) -> Rect
        return [source_loc.x1*letter_width source_loc.y1*letter_height
            source_loc.x2*letter_width (source_loc.y2+1)*letter_height]

    -- Iterate through the formatted source, and find the location for each fragment.
    current_line = 0
    current_col = 0
    for phrase in source
        s = phrase[0] -> string
        r = phrase[1] -> Ref
        t = phrase[2] -> int

        loc = [current_col*letter_width current_line*letter_height] -> Point
        loc += topleft

        -- Strip newlines
        displayed_s = cond(s == '\n', '', s)

        size = [displayed_s.length()*letter_width letter_height]

        fragments.append(Fragment([displayed_s r t loc size]))

        current_col += s.length()
        if (s == '\n')
            current_col = 0
            current_line += 1

        termToLocation.add(r, loc)

    topleft_source_pos = Fragment(fragments[0]).term.source_location()
    topleft_source_pos = [topleft_source_pos.x1 topleft_source_pos.y1]->Point_i

    -- Find the fragment under the mouse
    mouseover_phrase = null

    for phrase in fragments
        @phrase -> Fragment

        rect = to_rect(phrase.loc, phrase.size)
        if mouse_over(rect)
            mouseover_phrase = phrase

    -- Draw a highlight for the mouseover term
    if mouseover_phrase != null
        @mouseover_phrase -> Fragment
        source_loc = mouseover_phrase.term.source_location()
        source_loc -= [topleft_source_pos.x topleft_source_pos.y topleft_source_pos.x topleft_source_pos.y]
        source_loc += [2 0 1 0]
        rect = source_loc_to_rect(source_loc->Rect_i)
        rect += [topleft.x topleft.y topleft.x topleft.y]
        fill_rect(rect #ffe)

        -- Highlight each input
        term = mouseover_phrase.term->Ref
        for input in term.inputs()
            if input != null
                @input ->Ref
                trace(termToLocation.get(term) termToLocation.get(input) #fff)


    for phrase in fragments
        @phrase -> Fragment
        color = editor:get_highlight_color(phrase.token)

        -- don't draw newline characters
        text_sprite_size = text:get_metrics(coding_font, phrase.str)
        rect = to_rect(phrase.loc, text_sprite_size)

        highlighted = false
        if mouseover_phrase != null
            highlighted = mouseover_phrase.term == phrase.term

        draw_code(phrase.str phrase.loc color)

        if mouse_wheel_up(rect)
            phrase.term.tweak(-1)
        elif mouse_wheel_down(rect)
            phrase.term.tweak(1)

def example()
  offset = [3 3]
  angle = time % 1
  loc = [cos(angle) sin(angle)] * 5 + offset
  print(loc)

draw_code_editor([0 20] (example->branch_ref))
