background(#eef)

namespace editor
    def get_highlight_color(int token) -> Color
        return #000

def draw_code(string s, Point loc, Color color)
    draw_text(coding_font, s, color, loc)

def draw_code_editor(Point topleft, BranchRef branch)
    source = branch.format_source()

    type Fragment {
      string str
      Ref term
      int token
      Point loc
    }

    -- Iterate through the formatted source, and find the location for each fragment.

    fragments = []

    letter_width = 8
    letter_height = 17

    current_line = 0
    current_col = 0
    for phrase in source
        s = phrase[0] -> string
        r = phrase[1] -> Ref
        t = phrase[2] -> int

        loc = [current_col*letter_width current_line*letter_height] -> Point
        loc += topleft

        -- Strip newlines
        displayed_s = cond(s == '\n', '', s)

        fragments.append(Fragment([displayed_s r t loc]))

        current_col += s.length()
        if (s == '\n')
            current_col = 0
            current_line += 1

    -- Find the fragment under the mouse
    highlighted_phrase = null

    for phrase in fragments
        @phrase -> Fragment

        text_sprite_size = text:get_metrics(coding_font, phrase.str)
        rect = to_rect(phrase.loc, text_sprite_size)
        if mouse_over(rect)
            highlighted_phrase = phrase


    for phrase in fragments
        @phrase -> Fragment
        color = editor:get_highlight_color(phrase.token)

        -- don't draw newline characters
        text_sprite_size = text:get_metrics(coding_font, phrase.str)
        rect = to_rect(phrase.loc, text_sprite_size)

        highlighted = false
        if highlighted_phrase != null
            highlighted = highlighted_phrase.term == phrase.term

        bg_color = #fff0
        cond(highlighted #ffe @bg_color)

        draw_highlight_rect = phrase.token != styled_source:whitespace

        if draw_highlight_rect
            fill_rect(rect, bg_color)

        draw_code(phrase.str phrase.loc color)

        if mouse_wheel_up(rect)
            phrase.term.tweak(-1)
        elif mouse_wheel_down(rect)
            phrase.term.tweak(1)

    if highlighted_phrase != null
        @highlighted_phrase -> Fragment
        trace(highlighted_phrase.term.global_id())

def example()
  offset = [3 3]
  angle = time % 1
  loc = [cos(angle) sin(angle)] * 5 + offset
  print(loc)

draw_code_editor([0 0] (example->branch_ref))
