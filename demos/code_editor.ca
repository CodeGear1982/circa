background(#eef)

namespace display_mode
    text = 1
    text_hybrid = 2
    dataflow = 3

namespace editor
    def get_highlight_color(int token) -> Color
        return #000

def draw_code(string s, Point loc, Color color)
    draw_text(coding_font, s, color, loc)

def h1_label(string s, Point loc)
    draw_text(coding_font, s, #000, loc)

def wrap_string(string s, int limit) -> List
    break_count = s.length() // limit + 1
    out = for b in 0..break_count
        s.slice(limit*b limit*(b+1))
    return out

def rect_center(Rect r) -> Point
    return [r.x1 + (r.x2 - r.x1) / 2, r.y1 + (r.y2 - r.y1) / 2]

def rect_width(Rect r) -> number
    return r.x2 - r.x1
    
def tooltip_text(List lines, Point loc)
    actual_lines = []
    for line in lines
        for l in wrap_string(line, 50)
            actual_lines.append(l)
    for line in actual_lines
        draw_text(coding_font, line->string, #000, loc)
        loc += [0 20]

def terms_have_same_source_line(Ref a, Ref b) -> bool
    return a.source_location().y1 == b.source_location().y1

def draw_code_editor(Point topleft, BranchRef branch)

    state mode = display_mode:text

    if key_pressed('1')
        mode = display_mode:text
    elif key_pressed('2')
        mode = display_mode:text_hybrid
    elif key_pressed('3')
        mode = display_mode:dataflow

    source = branch.format_source()

    type PhraseLink {
      Point startPos
      Point endPos
      Ref source
      Ref user
    }
    type Phrase {
      string text
      Ref term
      int phrase_type
      Rect location
    }

    type Statement {
      List phrases
      Rect location
      Ref term
      List inputs
      List users
    }

    statements = format_source_for_graph(branch)

    letter_width = 8
    letter_height = 17
    line_height = 17

    if mode == display_mode:text_hybrid
        line_height = 32

    approach(@line_height, td*100)

    def source_loc_to_rect(Rect source_loc) -> Rect
        return [source_loc.x1*letter_width source_loc.y1*line_height
            source_loc.x2*letter_width (source_loc.y2)*line_height+letter_height]
    def source_loc_to_point(Point source_loc) -> Point
        return [source_loc.x*letter_width source_loc.y*line_height]

    -- Find the mouseover term
    mouseover_term = null
    for statement in statements
        @statement -> Statement
        loc = source_loc_to_rect(statement.location)
        if mouse_over(loc)
            mouseover_term = statement.term

    for statement in statements
        @statement -> Statement

        loc = source_loc_to_rect(statement.location)
        term = statement.term
        if term == mouseover_term
            fill_rect(loc, #f004)

            trace(statement.inputs)

            for link in statement.inputs
                @link -> PhraseLink
                line(source_loc_to_point(link.startPos) + [0 letter_height]
                    source_loc_to_point(link.endPos) #000)

        for phrase in statement.phrases
            @phrase -> Phrase
            term = phrase.term -> Ref

            loc = source_loc_to_rect(phrase.location)

            draw_code(phrase.text [loc.x1 loc.y1] editor:get_highlight_color(phrase.phrase_type))

def example()
  a = 2
  b = add(a add(1 add(1 2)) a a a a)
  mult(a,b)

draw_code_editor([20 20] (example->branch_ref))
