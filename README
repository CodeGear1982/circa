
Circa is a programming language designed for live coding. Most programming languages try
to improve *what* you can express, with Circa we instead try to improve the process by
which code is created.

Some features of Circa are:

 - Live coding. Has a rich API for examining or modifying code at runtime.
 - Most compiled code is stored as a dataflow graph of pure functions, which allows for
   many forms of static reasoning.
 - Has good support for preserving the program's running state. State can be preserved
   across most kinds of code changes.
 - Has an unusual ability to support live code changes made externally (such as with a
   separate text editor). Most live coding systems tend to only support changes made
   within the system.
 - Visual programming is supported, but text remains the primary storage format.
 - Compiled code can be unparsed back to text, with all comments and formatting preserved.
   This allows for a hybrid approach of textual and visual code editing.

This project is currently alpha-level. Curious people, or people interested in hacking along,
are welcome to try it out. People who want to use it for serious projects, or people who don't
like bugs, are recommended to wait for a beta release.

Some implementation details:

 - Uses static structural typing with type inference.
 - Compiled code is stored as an ordered dataflow graph.
 - Pluggable type system, each type dictates its own form of garbage collection.
 - Implemented in C++
 - Interpreted execution. An LLVM backend is planned for the future.
 - Currently supported on XP and OSX. A Linux port would probably not be hard.

For more information, see the /docs folder.

Unless otherwise specified, the contents of this project are freely available to the
public under the MIT licence. See the LICENSE file for more information.
