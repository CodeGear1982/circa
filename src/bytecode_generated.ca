
type Writer {
    int curIndent
    bool needsIndent
    List output
}

def Writer.write(@self, any args :multiple)
    if self.needsIndent
        self.needsIndent = false
        for i in 0..self.curIndent
            self.output.append('    ')
    self.output.append(args.join(''))
def Writer.writeln(@self, any args :multiple)
    self.write(args.join(''))
    self.output.append("\n")
    self.needsIndent = true
def Writer.indent(@self)
    self.curIndent += 1
def Writer.unindent(@self)
    self.curIndent -= 1
def Writer.toString(self) -> String
    return self.output.join("")
def Writer.save(self, String filename)
    write_text_file(filename, self.toString)

OpNames = [
    'NoOp'
    'SetNull'
    'InlineCopy'
    'PushFunctionBranch'
    'PushNestedBranch'
    'PushBranch'
    'FireNative'
    'CaseBlock'
    'ForLoop'
    'ErrorNotEnoughInputs'
    'ErrorTooManyInputs'
]

index = 0
Ops = for op_name in OpNames
    cname = concat('op_' op_name)
    op = [index op_name cname]
    index += 1
    op

header = create(Writer)
header.writeln("// Copyright (c) Andrew Fischer. See LICENSE file for license terms.")
header.writeln('')

impl = create(Writer)
impl.writeln("// Copyright (c) Andrew Fischer. See LICENSE file for license terms.")
impl.writeln('')
impl.writeln('#include "common_headers.h"')
impl.writeln('')
impl.writeln('#include "bytecode_generated.h"')
impl.writeln('')

header.writeln('#pragma once')
header.writeln('')

for op in Ops
    header.writeln('const char ' op[2] ' = ' op[0] ';')

header.writeln('')
header.writeln('const char* bytecode_op_name(char op);')

impl.writeln('const char* bytecode_op_name(char op)')
impl.writeln('{')
impl.indent
impl.writeln('switch (op) {')
for op in Ops
    impl.writeln('case ' op[2] ': return "' op[1] '";')
impl.writeln('default: return "(unknown op)";')
impl.writeln('}')
impl.unindent
impl.writeln('}')

header.save('src/bytecode_generated.h')
impl.save('src/bytecode_generated.cpp')
