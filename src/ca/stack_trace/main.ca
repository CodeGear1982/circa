
require indent_writer

def block_name(Block block) -> String
  if block.owner.is_null
    ""
  else
    block.owner.name

def parent_major(Term term) -> Block
  term.parent.nearest_major

def location_str(Term term) -> String
  if term.is_null
    return ""

  loc = term.source_location
  s = str(term.parent.source_filename ':' loc.y1)

  blockName = parent_major(term) | block_name
  if blockName != ""
    @s.append(str(' inside ' blockName '()'))
  s

def trace_to_string(VM vm) -> String
  writer = indent_writer.new

  frames = vm.frame_list
  remove(@frames (frame) -> frame.block.find_property(:hide_from_trace).or(false))

  for frame in frames
    term = frame.current_term

    if term.is_null
      @writer.write('[inside ' block_name(frame.block) '()] ')
    else
      @writer.write('[' location_str(term) '] ')

    @writer.writeln
    @writer.indent

  if vm.has_error
    @writer.write('Error: ' vm.slot(0))

  writer.toString

def dump(VM vm)
  trace_to_string(vm) | print
