
require indent_writer

def Block.name(self) -> String
  if self.owner.is_null
    ""
  else
    self.owner.name

def Term.parent_major(self) -> Block
  self.parent.nearest_major

def Term.location_str(self) -> String
  if self.is_null
    return ""

  loc = self.source_location
  s = str(self.parent.source_filename ':' loc.y1)

  blockName = self.parent_major.name
  if blockName != ""
    @s.append(str(' inside ' blockName '()'))
  s

def trace_to_string(VM vm) -> String
  writer = indent_writer.new

  for frame in vm.frame_list

    term = frame.current_term

    if term.is_null
      @writer.write('[inside ' frame.block.name '()] ')
    else
      @writer.write('[' term.location_str '] ')

    @writer.writeln
    @writer.indent

  if vm.has_error
    @writer.write('Error: ' vm.slot(0))

  writer.toString

def dump(VM vm)
  trace_to_string(vm) | print
