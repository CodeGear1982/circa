
struct CodeWriter
{
    int curIndent
    bool needsIndent
    List output
}

def CodeWriter.write(@self, String s)
    if self.needsIndent
        self.needsIndent = false
        for i in 0..self.curIndent
            self.output.append('    ')
    self.output.append(s)

def CodeWriter.writeln(@self, String line)
    self.write(line)
    self.output.append("\n")
    self.needsIndent = true

def CodeWriter.indent(@self)
    self.curIndent += 1
def CodeWriter.unindent(@self)
    self.curIndent -= 1

def CodeWriter.toString(self) -> String
    return self.output.join("")

def circa_name_to_c_name(String s) -> String
    result = ""

    for c in s.characters
        if c == '.'
            result.append('__')
        elif c == ':'
            result.append('__')
        else
            result.append(c)

    return result

def write_function(CodeWriter writer :out, Function func, String cname :out)
    writer.write('void ')
    cname = circa_name_to_c_name(func.name)
    writer.write(cname)
    writer.write('(Stack* stack)')
    writer.writeln('')
    writer.writeln('{')
    writer.indent()

    -- Write each input
    index = 0
    for Term input in func.inputs
        name = input.name

        -- check if this is a #anonymous name. If so, use the type name, lower cased.
        if name.char_at(0) == '#' or name == '_'
            name = input.get_type.name.to_camel_case

        t = input.get_type
        if t == String
            writer.write('const char* ')
            writer.write(name)
            writer.write(str(' = circa_string(circa_input(stack, ' index '))'))
            writer.writeln(';')
        elif t == int
            writer.write('int ')
            writer.write(name)
            writer.write(str(' = circa_int(circa_input(stack, ' index '))'))
            writer.writeln(';')
        elif t == number
            writer.write('float ')
            writer.write(name)
            writer.write(str(' = circa_float(circa_input(stack, ' index '))'))
            writer.writeln(';')
        else
            writer.write('Value* ')
            writer.write(name)
            writer.write(str(' = circa_input(stack, ' index ')'))
            writer.writeln(';')

        index += 1

    -- Function body
    for Term statement in func.contents.statements
        writer.writeln(statement.to_source_string)

    index = 0
    for Term input in func.outputs

        if input.get_type == void
            continue

        if index == 0
            name = 'output'
        else
            name = str('output_' index)

        writer.write('Value* ')
        writer.write(name)
        writer.write(str(' = circa_output(stack, ' index ')'))
        writer.writeln(';')

        index += 1

        
    writer.unindent()
    writer.writeln('}')

def write_bindings(Block block) -> String

    writer = make(CodeWriter)

    writer.writeln('#include "circa/circa.h"')
    writer.writeln('')

    bindings = []

    for Function func in block.functions
        cname = ""
        write_function(&writer, func, &cname)

        bindings.append([func, cname])

    -- Import list
    writer.writeln('static const caFunctionBinding IMPORTS[] = {')
    writer.indent()
    for binding in bindings
        func = binding[0] -> Function
        cname = binding[1] -> String

        writer.writeln(str('{"' func.name '", ' cname '},'))
    writer.writeln(str('{0, 0}'))
    writer.unindent()
    writer.writeln('};')

    -- Installation function
    writer.writeln("void Install_xxx(caBlock* block)")
    writer.writeln("{")
    writer.indent()
    writer.writeln("circa_install_function_list(block, IMPORTS);")
    writer.unindent()
    writer.writeln("}")

    return writer.toString
   
def load_and_write(String filename) -> String
    script = load_script(filename)
    out = write_bindings(script)
    return out
