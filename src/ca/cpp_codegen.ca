
type CodeWriter
{
    int curIndent
    bool needsIndent
    List output
}

def CodeWriter.write(self :out, string s)
    if self.needsIndent
        self.needsIndent = false
        for i in 0..self.curIndent
            self.output.append('    ')
    self.output.append(s)

def CodeWriter.writeln(self :out, string line)
    self.write(line)
    self.output.append("\n")
    self.needsIndent = true

def CodeWriter.indent(self :out)
    self.curIndent += 1
def CodeWriter.unindent(self :out)
    self.curIndent -= 1

def CodeWriter.write_type_name(self :out, Term term)
    self.write(term.get_type().name())

def write_literal_function(CodeWriter w :out, Term term)

    func = term.value() -> Function

    w.write(func.output(0).get_type().name())
    w.write(' ')
    w.write(func.name())
    w.write('(')

    first = true
    for input in func.inputs()
        if not(first)
            w.write(', ')
        first = false
        @input -> Term
        w.write_type_name(input)
        w.write(' ')
        w.write(input.name())
    w.writeln(')')
    w.writeln('{')
    w.indent()
    write_branch(&w, func.contents())
    w.unindent()
    w.writeln('}')

def write_value_term(CodeWriter w :out, Term term)
    v = term.value()

    if is_function(v)
        write_literal_function(&w, term)
    else
        -- Value
        w.write('const ')
        w.write_type_name(term)
        w.write(' ')
        w.write(term.name())
        w.write(' = ')
        w.write(term.value() -> to_string)
        w.writeln(';')

def write_top_level(CodeWriter w :out, Branch branch)

    for term in branch.terms()
        @term -> Term

        if term.property('statement') != true
            continue

        if term.function() == comment
            commentStr = term.property('comment')
            if commentStr == ""
                w.writeln('')
            else
                w.writeln(concat('// ' commentStr))
        elif term.function() == value
            write_value_term(&w, term)

        else
            -- Normal function call
            termName = term.name()
            if termName != ""
                w.write(concat(termName ' = '))
            w.write(concat(term.function().name() '()'))
            w.writeln(';')
        

def branch_to_cpp_string(Branch b) -> string
    writer = create(CodeWriter)

    write_top_level(&writer, b)

    return writer.output.join("")

test_branch = {

    def my_function(int a, int b) -> int
        return a - b

    a = 1
    b = 2
    -- this is a comment
    add(a 3)
    print(b)
}

branch_to_cpp_string(branch_ref(test_branch)) -> print
