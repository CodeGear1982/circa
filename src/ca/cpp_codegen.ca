
type CodeWriter
{
    int curIndent
    bool needsIndent
    List output
}

def CodeWriter.write(self :out, String s)
    if self.needsIndent
        self.needsIndent = false
        for i in 0..self.curIndent
            self.output.append('    ')
    self.output.append(s)

def CodeWriter.writeln(self :out, String line)
    self.write(line)
    self.output.append("\n")
    self.needsIndent = true

def CodeWriter.indent(self :out)
    self.curIndent += 1
def CodeWriter.unindent(self :out)
    self.curIndent -= 1
def CodeWriter.toString(self) -> String
    return self.output.join("")

def CodeWriter.write_type_name(self :out, Term term)
    self.write(term.get_type.name)

def write_literal_function(CodeWriter w :out, Term term)

    func = term.value -> Function

    w.write(func.output(0).get_type.name)
    w.write(' ')
    w.write(func.name)
    w.write('(')

    inputs = for input in func.inputs
        @input -> Term
        concat(input.get_type.name ' ' input.name)
    w.write(inputs.join(', '))
    w.writeln(')')
    w.writeln('{')
    w.indent()
    write_block(&w, func.contents)
    w.unindent()
    w.writeln('}')

def write_value_term(CodeWriter w :out, Term term)
    v = term.value

    if is_function(v)
        write_literal_function(&w, term)
    else
        -- Value
        w.write('const ')
        w.write_type_name(term)
        w.write(' ')
        w.write(term.name)
        w.write(' = ')
        w.write(term.value -> to_string)
        w.writeln(';')

def write_block(CodeWriter w :out, Block block)

    for term in block.terms
        @term -> Term

        if term.property('statement') != true
            continue

        if term.function == comment
            commentStr = term.property('comment')
            if commentStr == ""
                w.writeln('')
            else
                w.writeln(concat('// ' commentStr))
        elif term.function == value
            write_value_term(&w, term)

        else
            -- Normal function call
            termName = term.name
            if termName != ""
                w.write(concat(termName ' = '))
            w.write(term.function.name)
            w.write('(')
            first = true
            for input in term.inputs
                if not(first)
                    w.write(', ')
                first = false
                @input -> Term
                if input.name != ""
                    w.write(input.name)

            w.write(')')
            w.writeln(';')
        

def block_to_cpp_string(Block b) -> String
    writer = make(CodeWriter)

    write_block(&writer, b)

    return writer.toString()

test_block = {

    def my_function(int a, int b) -> int
        return a - b

    a = 1
    b = 2
    -- this is a comment
    add(a 3)
    print(b)
}

block_to_cpp_string(block_ref(test_block)) -> print
