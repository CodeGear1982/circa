
type CodeWriter
{
    int curIndent
    bool needsIndent
    List output
}

def CodeWriter.write(self :out, string s)
    self.output.append(s)

def CodeWriter.writeln(self :out, string line)
    self.output.append(line)
    self.output.append("\n")

def type_name(Term term) -> string
    circaName = term.get_type().name()

def write_top_level(CodeWriter w :out, Branch branch)
    for term in branch.terms()
        @term -> Term

        if term.function().name() == "comment" {
            commentStr = term.property('comment')
            if commentStr == ""
                w.writeln('')
            else
                w.writeln(concat('// ' commentStr))
        } else {
            termName = term.name()
            if termName != ""
                w.write(concat(termName ' = '))
            w.writeln(concat(term.function().name() '()'))
        }


def branch_to_cpp_string(Branch b) -> string
    writer = create(CodeWriter)

    write_top_level(&writer, b)

    return writer.output.join("")

test_branch = {
    a = 1
    b = 2
    -- this is a comment
    add(a b)
    print(b)
}

branch_to_cpp_string(branch_ref(test_branch)) -> print
