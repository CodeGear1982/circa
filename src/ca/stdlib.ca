
-- Builtin functions

-- Manual declaration of inputs & outputs (for top level branches)
def input() -> any
def output(any)

def length(List) -> int
    "Return the number of items in the given list"

def from_string(String s) -> any
    "Parse a string representation to a Circa value"

def to_string_repr(any val) -> String
    "Encode a Circa value as a string representation"

def changed(any current) -> bool
    state any prev = null
    result = prev != current
    prev = current
    return result

def call(any callable, List inputs) -> any
    "Dynamic function dispatch"

namespace cppbuild
    def build_module(String baseFilename)

namespace file
    def exists(String filename) -> bool
    def version(String filename) -> int
    def read_text(String filename) -> String

    def file_changed(String filename) -> bool
        ver = version(filename)
        return changed([filename ver])

    type FileSource;
    type FileRecord;

    def fetch_record(String filename, Name source) -> FileRecord

namespace refactor
    def rename(Term r, String s)
    def change_function(Term r, Callable func)

namespace reflect
    def this_branch() -> Branch
    def kernel() -> Branch

namespace sys
    def arg(int index) -> String
    def dll_patch()
    def module_search_paths() -> List
    def do_admin_command(String cmd) -> String

def branch_ref(any branch :ignore_error) -> Branch

-- Load a Branch from a file.
def load_script_value(String filename) -> Branch

def Branch.input(_, int index) -> Term
def Branch.inputs(_) -> List
def Branch.output(_, int index) -> Term
def Branch.outputs(_) -> List
def Branch.format_source(_) -> StyledSource
def Branch.has_static_error(_) -> bool
def Branch.get_static_errors(_) -> List
def Branch.get_static_errors_formatted(_) -> List
def Branch.evaluate(_)
def Branch.terms(_) -> List
def Branch.get_term(_, int index) -> Term
def Branch.list_configs(_) -> List
def Branch.functions(_) -> List
def Branch.file_signature(_) -> any
def Branch.statements(_) -> List
def Branch.dump(_)

type Frame;
def Frame.branch(_) -> Branch
def Frame.register(_, int) -> any
def Frame.pc(_) -> int

def Function.name(_) -> String
def Function.input(_, int index) -> Term
def Function.inputs(_) -> List
def Function.output(_, int index) -> Term
def Function.outputs(_) -> List
def Function.contents(_) -> Branch

def make_interpreter() -> Interpreter

type Interpreter;
def Interpreter.push_frame(_, Branch, List inputs)
def Interpreter.run_step(_)
def Interpreter.run_steps(_, int steps)
def Interpreter.frame(_, int depth) -> Frame

def String.append(self :out, String right)
    self = concat(self, right)
    
def String.char_at(_, int index) -> String

def String.ends_with(_,String) -> bool
def String.length(_) -> int
def String.slice(_,int,int) -> String
def String.starts_with(_,String) -> bool
def String.split(_,String sep) -> List
def String.substr(_,int,int) -> String
def String.to_camel_case(_) -> String
def String.to_lower(_) -> String
def String.to_upper(_) -> String

def String.characters(self) -> List
    out = for i in 0..(self.length)
        self.char_at(i)
    return out

def Type.name(_) -> String
def Type.property(_, String) -> any
def Type.is_handle(_) -> bool
    return _.property('handle') == true

def Term.name(self) -> String
def Term.to_string(_) -> String
def Term.to_source_string(_) -> String
def Term.function(_) -> Function
def Term.get_type(_) -> Type
def Term.assign(_, any)
def Term.value(_) -> any
def Term.tweak(_, number steps)
def Term.asint(_) -> int
def Term.asfloat(_) -> number
def Term.input(_, int) -> Term
def Term.inputs(_) -> List
def Term.num_inputs(_) -> int
def Term.source_location(_) -> Rect_i
def Term.global_id(_) -> int
def Term.properties(_) -> Map
def Term.property(_, String) -> any

def toggle(bool tog) -> bool
    <<<
    Stateful function, returns a boolean status. Every frame the function is called
    with (true), the result flips. Starts out false.
    >>>
    state bool s = false
    if tog { s = not(s) }
    return s

def approach(number target, number maximum_change) -> number
    <<<
    Stateful function, returns a result which approaches 'target'. Each frame, this
    result will change at most by 'maximum_change'
    >>>
    state current = target
    if target > current
        current += min(maximum_change, target - current)
    elif target < current
        current -= min(maximum_change, current - target)
    return current

def once() -> bool
    <<<
    Stateful function, returns true the first time it's called, and false thereafter.
    >>>
    state bool s = true
    result = s
    s = false
    return result

def cycle(int max) -> int
    "Stateful function, cycles though the integers starting at 0 and ending before 'max'"
    state int counter = 0
    if counter >= max
        counter = 0
    result = counter
    counter += 1
    return result

def cycle_elements(List list) -> any
    "Stateful function, returns each item of 'list' one at a time"
    return list[cycle(length(list))]

def random_element(List list) -> any
    "Return a random element from the given list, with equal probability per element"
    return list[rand_i() % length(list)]

def seed() -> number
    "Stateful function, returns a random number 0..1 which doesn't change after initialization"
    state number s = rand()
    return s

-- Message passing functions
def receive_last(String inbox_name, any default) -> any
    results = receive(inbox_name)
    if results == []
        return default
    else
        return results[length(results)-1]

def receive_stateful(String inbox_name, any initialValue) -> any
    state value = initialValue
    receive_last(inbox_name, @value)
    return value

-- Math utility functions
def to_rect(Point topLeft, Point size) -> Rect
    return [topLeft.x, topLeft.y, topLeft.x + size.x, topLeft.y + size.y]

def polar(number angle) -> Point
    return [sin(angle) -cos(angle)]

def magnitude(Point point) -> number
    "Returns the magnitude, or the distance from [0,0] to this point."
    return sqrt(sqr(point.x) + sqr(point.y))

def point_distance(Point a, Point b) -> number
    "Returns the distance between a and b."
    return sqrt(sqr(a.x - b.x) + sqr(a.y - b.y))

def rotate_point(Point p, number rotation) -> Point
    "Rotate p around [0,0] by the given angle."
    return [p.x*cos(rotation) - p.y*sin(rotation), p.x*sin(rotation)+p.y*cos(rotation)]

def random_norm_vector() -> Point
    "Return a random normalized vector"
    angle = rand() * 360
    return [cos(angle) sin(angle)]

def norm(Point v) -> Point
    "Returns v normalized to be along the unit circle."
    m = magnitude(v)
    return [v.x / m, v.y / m]

def perpendicular(Point v) -> Point
    "Returns a vector that is perpendicular to v, rotated clockwise."
    return [v.y -v.x]

def expand_rect(Point center, Point size) -> Rect
    "Return a rectangle with the given center and size"
    width = abs(size.x)
    height = abs(size.y)
    return [center.x - width/2, center.y - height/2, center.x + width / 2, center.y + height/2]

def approach_rect(Rect target, number change) -> Rect
    return Rect([approach(target.x1,change), approach(target.y1,change),
        approach(target.x2,change),approach(target.y2,change)])

def grow_rect(Rect r, number amount) -> Rect
    return Rect([r.x1 - amount, r.y1 - amount, r.x2 + amount, r.y2 + amount])

def rect(Point topleft, Point bottomright) -> Rect
    return [topleft.x topleft.y bottomright.x bottomright.y]

def rect_intersects_rect(Rect rect_a, Rect rect_b) -> bool
    "Return whether the two rectangles intersect."
    <<<
    def unit_tests()
        rect_intersects_rect([0 0 10 10] [1 1 2 2])
        rect_intersects_rect([0 0 2 1] [1 0 3 1])
        rect_intersects_rect([1 0 3 1] [0 0 2 1])
    >>>

    intersects_on_x = (rect_a.x2 > rect_b.x1) and (rect_b.x2 > rect_a.x1)
    intersects_on_y = (rect_a.y2 > rect_b.y1) and (rect_b.y2 > rect_a.y1)
    return intersects_on_x and intersects_on_y

def interp_rect(Rect a, Rect b, number ratio) -> Rect
    min(@ratio, 1.0)
    result = for i in 0..4 { a[i] + (b[i] - a[i]) * ratio }
    return Rect(result)

def bezier3(number t, List points) -> Point
    "Quadratic bezier curve, with 3 control points. t must be in the range of [0, 1]"
    p0 = points[0] -> Point
    p1 = points[1] -> Point
    p2 = points[2] -> Point
    return p0 * sqr(1 - t) + p1 * (2 * t * (1 - t)) + p2 * sqr(t)

def bezier4(number t, List points) -> Point
    "Cubic bezier curve, with 4 control points. t must be in the range of [0, 1]"
    p0 = points[0] -> Point
    p1 = points[1] -> Point
    p2 = points[2] -> Point
    p3 = points[3] -> Point
    return p0 * cube(1 - t) + p1 * (3 * t * sqr(1 - t)) + p2 * sqr(t) * (3 * (1 - t)) + p3 * cube(t)

def smooth_in_out(number t, number smooth_in, number smooth_out) -> number
    return bezier4(t, [[0 0] [smooth_in, 0] [1 - smooth_out, 1] [1 1]]).y

def clamp(number x, number minVal, number maxVal) -> number
    return min(max(x, minVal), maxVal)

def smoothstep(number x, number edge0, number edge1) -> number
    "Smooth interpolation func, see en.wikipedia.org/wiki/Smoothstep"
    x = clamp((x - edge0)/(edge1-edge0), 0, 1)
    return x*x*(3 - 2*x)

def smootherstep(number x, number edge0, number edge1) -> number
    "Alternative to smoothstep by Ken Perlin, see en.wikipedia.org/wiki/Smoothstep"
    x = clamp((x - edge0)/(edge1-edge0), 0, 1)
    return x*x*x*(x*(x*6 - 15) + 10)

def random_color() -> Color
    return [rand() rand() rand() 1.0]

def blend_color(Color a, Color b, number ratio) -> Color
    <<<
    def unit_tests()
        blend_color(#abc #123 0.0) == #abc
        blend_color(#abc #123 1.0) == #123
        blend_color(#abc #123 2.0) == #123
        blend_color(#abc #123 -1.0) == #abc
        blend_color(#fff #fff 0.5) == #fff
    >>>

    max(@ratio, 0.0)
    min(@ratio, 1.0)

    if ratio == 0.0
        return a
    elif ratio == 1.0
        return b
    else
        result = a + (b - a) * ratio

        -- hack to preserve alpha:
        result[3] = 1.0
        return result

def hsv_to_rgb(List hsv) -> Color
    h = hsv[0] -> number
    s = hsv[1] -> number
    v = hsv[2] -> number

    if s == 0
        -- grey
        return [v v v 1]

    h *= 6
    i = floor(h)
    f = h - i
    p = v * (1 - s)
    q = v * (1 - s * f)
    t = v * (1 - s * (1 - f))

    if i == 0
        return [v t p 1]
    elif i == 1
        return [q v p 1]
    elif i == 2
        return [p v t 1]
    elif i == 3
        return [p q v 1]
    elif i == 4
        return [t p v 1]
    elif i == 5
        return [v p q 1]

    return [0 0 0 0]

def delta(number val) -> number
    "Return the difference between this value and the previous call's value"
    state number prev = val
    result = val - prev
    prev = val
    return result

namespace styled_source
    literal_string = 1
    literal_number = 4
    paren = 2
    comment = 3
    name = 5
    keyword = 205
    type_name = 203
    function_name = 202
    infix_operator = 201
    whitespace = 206
