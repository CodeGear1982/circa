
-- Builtin functions

def docs:category(Name name)
    -- Meta function, declares this function to be part of a documentation category.

def assert(bool condition)
    -- Raises an error if 'condition' is false.

def length(List) -> int
    -- Return the number of items in the given list

def from_string(String s) -> any
    -- Parse a string representation to a Circa value

def to_string_repr(any val) -> String
    -- Encode a Circa value as a string representation

def changed(any current) -> bool
    state any prev = null
    result = prev != current
    prev = current
    return result

def call(any callable, List inputs) -> any
    -- Dynamic function dispatch

type DynamicInputs {
    List inputs
    any stateVal
}

type DynamicOutputs {
    List outputs
    any stateVal
}

def dynamic_call(Branch branch, DynamicInputs inputs) -> DynamicOutputs
    -- Dynamic call, supporting the full function protocol.

def send(String name, any msg)
    -- Pass a message to an actor by name

def call_actor(String name, any msg)
    -- Invoke an actor immediately

def actor_run_message(Actor actor, any msg)
    b = actor.branch
    call(b, msg)

namespace cppbuild
    def build_module(String baseFilename)

namespace file
    def exists(String filename) -> bool
    def version(String filename) -> int
    def read_text(String filename) -> String

    def file_changed(String filename) -> bool
        ver = version(filename)
        return changed([filename ver])

namespace refactor
    def rename(Term r, String s)
    def change_function(Term r, Callable func)

namespace reflect
    def this_branch() -> Branch
    def kernel() -> Branch

namespace sys
    def arg(int index) -> String
    def dll_patch()
    def module_search_paths() -> List
    def perf_stats_reset()
    def perf_stats_dump()


-- Load a module from a file.
def load_module(String filename) -> Branch

-- Metaprogramming on Branch
def branch_ref(any branch :ignore_error) -> Branch
    -- Obtain a Branch ref from an expression.
def Branch.call(_, any inputs :multiple)
    -- Invoke this Branch with the given inputs.
def Branch.dump(_)
    -- Dump this branch's raw contents to stdout.
def Branch.file_signature(_) -> any
    -- Return a 'file signature', which contains the filename and last-modified time.
def Branch.find_term(_, String name) -> Term
    -- Find a term inside this Branch with the given name.
def Branch.format_source(_) -> List
    -- Return the branch's contents as formatted source.
def Branch.format_function_heading(_) -> List
    -- Return a formatted function header for this branch.
def Branch.functions(_) -> List
    -- Return a list of functions that occur inside this branch.
def Branch.get_term(_, int index) -> Term
    -- Fetch a term by index.
def Branch.get_static_errors(_) -> List
    -- Return a raw list of static errors inside this branch.
def Branch.get_static_errors_formatted(_) -> List
    -- Return a formatted list of static errors inside this branch.
def Branch.has_static_error(_) -> bool
    -- Return whether this branch has any static errors.
def Branch.input(_, int index) -> Term
    -- Fetch an input placeholder term by index.
def Branch.is_null(_) -> bool
    -- Return whether this is a null Branch reference.
def Branch.inputs(_) -> List
    -- Return a list of input placeholder terms.
def Branch.link(_, Branch lib)
    -- Iterate through this branch, looking for terms that have missing references.
    -- For each missing reference, if a term with the expected name is found in 'lib',
    -- then modify the term to use the named term in 'lib'.
def Branch.list_configs(_) -> List
    -- Return a list of Terms that look like configs (named literal values).
def Branch.output(_, int index) -> Term
    -- Return an output placeholder term by index.
def Branch.outputs(_) -> List
    -- Return a list of all output placeholders.
def Branch.owner(_) -> Term
    -- Return the Term that owns this Branch (may be null).
def Branch.statements(_) -> List
    -- Return a list of Terms that are statements.
def Branch.terms(_) -> List
    -- Return a list of this branch's terms.
def Branch.version(_) -> int
    -- Return the 'version', which is a monotonically increasing number that is
    -- incremented whenever the branch is modified. Useful for change tracking.

def Dict.count(self) -> int
    -- Return the number of elements
def Dict.set(@self, String key, any value)
    -- Assign a key-value pair.
def Dict.get(self, String key) -> any
    -- Retrieve the value for a given key.

type Frame;
def Frame.branch(_) -> Branch
    -- Return the Branch associated with this Frame.
def Frame.register(_, int) -> any
    -- Fetch the value in the given register index.
def Frame.registers(_) -> List
    -- Fetch a list of all register values.
def Frame.pc(_) -> int
    -- Fetch the current program counter (the interpreter's current position).
def Frame.pc_term(_) -> Term
    -- Fetch the term associated with the current program counter.

def Function.name(_) -> String
def Function.input(_, int index) -> Term
def Function.inputs(_) -> List
def Function.output(_, int index) -> Term
def Function.outputs(_) -> List
def Function.contents(_) -> Branch

type Interpreter;
def make_interpreter() -> Interpreter
def Interpreter.push_frame(_, Branch, List inputs)
    -- Push a new frame, using the given branch and input list.
def Interpreter.pop_frame(_)
    -- Pop the topmost frame.
def Interpreter.set_state_input(_, any)
    -- Assign a value to the :state input of the topmost frame (if any)
def Interpreter.get_state_output(_) -> any
def Interpreter.reset(_)
def Interpreter.run(_)
def Interpreter.run_steps(_, int steps)
def Interpreter.frame(_, int depth) -> Frame
def Interpreter.top_frame(_) -> Frame
    return _.frame(0)
def Interpreter.frames(_) -> List
def Interpreter.output(_, int index) -> any
def Interpreter.errored(_) -> bool
def Interpreter.error_message(_) -> String
def Interpreter.toString(_) -> String

def List.append(@self, any)
def List.extend(@self, List)
def List.count(self) -> int
def List.insert(@self, int, any)
def List.length(self) -> int
def List.join(self, String) -> String
def List.slice(self, int start, int fin) -> List

-- Overloaded functions
def is_overloaded_func(Branch branch) -> bool
    -- Return true if this branch is an overloaded function
    docs:category(:metaprogramming)

def overload:get_contents(Branch branch) -> List
    -- Get a list of all the functions that this overloaded function uses.
    docs:category(:metaprogramming)

def String.append(@self, String right)
    self = concat(self, right)
    
def String.char_at(_, int index) -> String

def String.ends_with(_,String) -> bool
    -- Return true if this string ends with the given substring.
def String.length(_) -> int
    -- Returns the string length.
def String.slice(_,int,int) -> String
def String.starts_with(_,String) -> bool
def String.split(_,String sep) -> List
def String.substr(_,int,int) -> String
def String.to_camel_case(_) -> String
def String.to_lower(_) -> String
def String.to_upper(_) -> String

def String.characters(self) -> List
    out = for i in 0..(self.length)
        self.char_at(i)
    return out

def Type.name(_) -> String
    -- Returns this Term's local name. May be empty.
def Type.property(_, String) -> any
def Type.is_handle(_) -> bool
    return _.property('handle') == true
def Type.declaringTerm(_) -> Term

-- Metaprogramming on Term
def term_ref(any :ignore_error) -> Term
def Term.assign(_, any)
def Term.asint(_) -> int
def Term.asfloat(_) -> number
def Term.parent(_) -> Branch
def Term.contents(_) -> Branch
def Term.name(self) -> String
def Term.to_string(_) -> String
def Term.to_source_string(_) -> String
def Term.function(_) -> Function
def Term.function_contents(_) -> Branch
def Term.get_type(_) -> Type
def Term.value(_) -> any
def Term.tweak(_, number steps)
def Term.input(_, int) -> Term
def Term.inputs(_) -> List
def Term.num_inputs(_) -> int
def Term.source_location(_) -> Rect_i
def Term.location_string(_) -> String
def Term.global_id(_) -> int
def Term.properties(_) -> Map
def Term.property(_, String) -> any
def Term.is_function(self) -> bool
    return is_function(self.value)
def Term.is_type(self) -> bool
    return is_type(self.value)

-- workaround, this function must be declared after Term.name:
def Branch.name(self) -> String
    return self.owner.name

-- Builtin types
type Actor { String name, String moduleName, List incomingQueue, any stateVal }
type FileSignature { String filename, int time_modified }
type Callable;
type Color { number r, number g, number b, number a }
type Point { number x, number y }
type Point_i { int x, int y }
type Rect { number x1, number y1, number x2, number y2 }
type Rect_i { int x1 int y1 int x2 int y2 }

def Rect.width(self) -> number
    return self.x2 - self.x1
def Rect.height(self) -> number
    return self.y2 - self.y1

def toggle(bool tog) -> bool
    -- Stateful function, returns a boolean status. Every frame the function is called
    -- with (true), the result flips. Starts out false.

    state bool s = false
    if tog
        s = not(s)
    return s

def approach(number target, number maximum_change) -> number
    -- Stateful function, returns a result which approaches 'target'. Each time the
    -- function is called, the result will change at most by 'maximum_change'.

    state current = target
    if target > current
        current += min(maximum_change, target - current)
    elif target < current
        current -= min(maximum_change, current - target)
    return current

def once() -> bool
    -- Stateful function, returns true the first time it's called, and false thereafter.

    state bool s = true
    result = s
    s = false
    return result

def cycle(int max) -> int
    -- Stateful function, cycles though the integers from 0 to (max - 1). When the maximum
    -- is reached, the function will start again at 0.

    state int counter = 0
    if counter >= max
        counter = 0
    result = counter
    counter += 1
    return result

def cycle_elements(List list) -> any
    -- Stateful function, cycles through each item of 'list' one at a time.
    return list[cycle(length(list))]

def random_element(List list) -> any
    -- Return a random element from the given list, with equal probability per element.
    return list[rand_i() % length(list)]

def seed() -> number
    -- Stateful function, returns a random number 0..1 which doesn't change after initialization.
    state number s = rand()
    return s

-- Math utility functions
def polar(number angle) -> Point
    -- Return a point on the unit circle with the given angle.
    return [sin(angle) -cos(angle)]

def magnitude(Point point) -> number
    -- Returns the magnitude, or the distance from [0,0] to this point.
    return sqrt(sqr(point.x) + sqr(point.y))

def point_distance(Point a, Point b) -> number
    -- Returns the distance between a and b.
    return sqrt(sqr(a.x - b.x) + sqr(a.y - b.y))

def rotate_point(Point p, number rotation) -> Point
    -- Rotate p around [0,0] by the given angle.
    return [p.x*cos(rotation) - p.y*sin(rotation), p.x*sin(rotation)+p.y*cos(rotation)]

def random_norm_vector() -> Point
    -- Return a random normalized vector.
    angle = rand() * 360
    return [cos(angle) sin(angle)]

def norm(Point v) -> Point
    -- Returns v normalized to be along the unit circle.
    m = magnitude(v)
    return [v.x / m, v.y / m]

def perpendicular(Point v) -> Point
    -- Returns a vector that is perpendicular to v, rotated clockwise.
    return [v.y -v.x]

def to_rect(Point topLeft, Point size) -> Rect
    -- Return a Rect with the given top-left coordinate and size.
    return [topLeft.x, topLeft.y, topLeft.x + size.x, topLeft.y + size.y]

def expand_rect(Point center, Point size) -> Rect
    -- Return a Rect with the given center coordinate and size.
    width = abs(size.x)
    height = abs(size.y)
    return [center.x - width/2, center.y - height/2, center.x + width / 2, center.y + height/2]

def grow_rect(Rect r, number amount) -> Rect
    -- Return a Rect based on r, where each side is moved away from the center by 'amount'.
    return Rect([r.x1 - amount, r.y1 - amount, r.x2 + amount, r.y2 + amount])

def rect(Point topleft, Point bottomright) -> Rect
    -- Return a Rect with the given top-left and bottom-right coordinates.
    return [topleft.x topleft.y bottomright.x bottomright.y]

def approach_rect(Rect target, number maxChange) -> Rect
    -- Stateful function, returns a Rect that gradually approaches the target Rect.
    -- Each coordinate will change by at most 'maxChange' per call.
    return Rect([approach(target.x1,maxChange), approach(target.y1,maxChange),
        approach(target.x2,maxChange),approach(target.y2,maxChange)])

def rect_intersects_rect(Rect rect_a, Rect rect_b) -> bool
    -- Return whether the two rectangles intersect.
    
    {-
    def unit_tests()
        rect_intersects_rect([0 0 10 10] [1 1 2 2])
        rect_intersects_rect([0 0 2 1] [1 0 3 1])
        rect_intersects_rect([1 0 3 1] [0 0 2 1])
    -}

    intersects_on_x = (rect_a.x2 > rect_b.x1) and (rect_b.x2 > rect_a.x1)
    intersects_on_y = (rect_a.y2 > rect_b.y1) and (rect_b.y2 > rect_a.y1)
    return intersects_on_x and intersects_on_y

def interp_rect(Rect a, Rect b, number ratio) -> Rect
    min(@ratio, 1.0)
    result = for i in 0..4 { a[i] + (b[i] - a[i]) * ratio }
    return Rect(result)

def bezier3(number t, List points) -> Point
    -- Quadratic bezier curve, with 3 control points. t must be in the range of [0, 1].
    p0 = points[0] -> Point
    p1 = points[1] -> Point
    p2 = points[2] -> Point
    return p0 * sqr(1 - t) + p1 * (2 * t * (1 - t)) + p2 * sqr(t)

def bezier4(number t, List points) -> Point
    -- Cubic bezier curve, with 4 control points. t must be in the range of [0, 1].
    p0 = points[0] -> Point
    p1 = points[1] -> Point
    p2 = points[2] -> Point
    p3 = points[3] -> Point
    return p0 * cube(1 - t) + p1 * (3 * t * sqr(1 - t)) + p2 * sqr(t) * (3 * (1 - t)) + p3 * cube(t)

def smooth_in_out(number t, number smooth_in, number smooth_out) -> number
    return bezier4(t, [[0 0] [smooth_in, 0] [1 - smooth_out, 1] [1 1]]).y

def clamp(number x, number minVal, number maxVal) -> number
    return min(max(x, minVal), maxVal)

def smoothstep(number x, number edge0, number edge1) -> number
    -- Smooth interpolation func, see en.wikipedia.org/wiki/Smoothstep
    x = clamp((x - edge0)/(edge1-edge0), 0, 1)
    return x*x*(3 - 2*x)

def smootherstep(number x, number edge0, number edge1) -> number
    -- Alternative to smoothstep by Ken Perlin, see en.wikipedia.org/wiki/Smoothstep
    x = clamp((x - edge0)/(edge1-edge0), 0, 1)
    return x*x*x*(x*(x*6 - 15) + 10)

def random_color() -> Color
    -- Return a color with random RGB components, and full alpha.
    return [rand() rand() rand() 1.0]

def blend_color(Color a, Color b, number ratio) -> Color
    -- Return a color that is blended between a and b. If ratio is 0.0 we'll
    -- return 'a', if it's 1.0 we'll return 'b'.
    
    {-
    def unit_tests()
        blend_color(#abc #123 0.0) == #abc
        blend_color(#abc #123 1.0) == #123
        blend_color(#abc #123 2.0) == #123
        blend_color(#abc #123 -1.0) == #abc
        blend_color(#fff #fff 0.5) == #fff
    -}

    max(@ratio, 0.0)
    min(@ratio, 1.0)

    if ratio == 0.0
        return a
    elif ratio == 1.0
        return b
    else
        result = a + (b - a) * ratio

        -- hack to preserve alpha:
        result[3] = 1.0
        return result

def hsv_to_rgb(List hsv) -> Color
    -- Convert HSV components to an RGB Color

    h = hsv[0] -> number
    s = hsv[1] -> number
    v = hsv[2] -> number

    if s == 0
        -- grey
        return [v v v 1]

    h *= 6
    i = floor(h)
    f = h - i
    p = v * (1 - s)
    q = v * (1 - s * f)
    t = v * (1 - s * (1 - f))

    if i == 0
        return [v t p 1]
    elif i == 1
        return [q v p 1]
    elif i == 2
        return [p v t 1]
    elif i == 3
        return [p q v 1]
    elif i == 4
        return [t p v 1]
    elif i == 5
        return [v p q 1]

    return [0 0 0 0]

def lighten(Color c, number factor) -> Color
    return [
        min(c.r + factor, 1.0)
        min(c.g + factor, 1.0)
        min(c.b + factor, 1.0)
        c.a]
        
def darken(Color c, number factor) -> Color
    return [
        max(c.r - factor, 0.0)
        max(c.g - factor, 0.0)
        max(c.b - factor, 0.0)
        c.a]

def delta(number val) -> number
    -- Stateful function, return the difference between this value and the value from
    -- the previous call.
    state number prev = val
    result = val - prev
    prev = val
    return result
