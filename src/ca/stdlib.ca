
-- Builtin functions

def assert(bool condition)
    -- Raises an error if 'condition' is false.

def length(List) -> int
    -- Return the number of items in the given list

def from_string(String s) -> any
    -- Parse a string representation to a Circa value

def to_string_repr(any val) -> String
    -- Encode a Circa value as a string representation

def changed(any current) -> bool
    state any prev = null
    result = prev != current
    prev = current
    return result

def call(any callable, List inputs) -> any
    -- Dynamic function dispatch

type DynamicInputs {
    List inputs
    any stateVal
}

type DynamicOutputs {
    List outputs
    any stateVal
}

def dynamic_call(Branch branch, DynamicInputs inputs) -> DynamicOutputs
    -- Dynamic call, supporting the full function protocol.

def send(String name, any msg)
    -- Pass a message to an actor by name

def call_actor(String name, any msg)
    -- Invoke an actor immediately

def actor_run_message(Actor actor, any msg)
    b = actor.branch
    call(b, msg)

namespace cppbuild
    def build_module(String baseFilename)

namespace file
    def exists(String filename) -> bool
    def version(String filename) -> int
    def read_text(String filename) -> String

    def file_changed(String filename) -> bool
        ver = version(filename)
        return changed([filename ver])

namespace refactor
    def rename(Term r, String s)
    def change_function(Term r, Callable func)

namespace reflect
    def this_branch() -> Branch
    def kernel() -> Branch

namespace sys
    def arg(int index) -> String
    def dll_patch()
    def module_search_paths() -> List
    def perf_stats_reset()
    def perf_stats_dump()


-- Load a module from a file.
def load_module(String filename) -> Branch

-- Metaprogramming on Branch
def branch_ref(any branch :ignore_error) -> Branch
    -- Obtain a Branch ref from an expression.
def Branch.call(self, any inputs :multiple)
    -- Invoke this Branch with the given inputs.
def Branch.dump(self)
    -- Dump this branch's raw contents to stdout.
def Branch.file_signature(self) -> any
    -- Return a 'file signature', which contains the filename and last-modified time.
def Branch.find_term(self, String name) -> Term
    -- Find a term inside this Branch with the given name.
def Branch.format_source(self) -> List
    -- Return the branch's contents as formatted source.
def Branch.format_function_heading(self) -> List
    -- Return a formatted function header for this branch.
def Branch.functions(self) -> List
    -- Return a list of functions that occur inside this branch.
def Branch.get_term(self, int index) -> Term
    -- Fetch a term by index.
def Branch.get_static_errors(self) -> List
    -- Return a raw list of static errors inside this branch.
def Branch.get_static_errors_formatted(self) -> List
    -- Return a formatted list of static errors inside this branch.
def Branch.has_static_error(self) -> bool
    -- Return whether this branch has any static errors.
def Branch.input(self, int index) -> Term
    -- Fetch an input placeholder term by index.
def Branch.is_null(self) -> bool
    -- Return whether this is a null Branch reference.
def Branch.inputs(self) -> List
    -- Return a list of input placeholder terms.
def Branch.link(self, Branch lib)
    -- Iterate through this branch, looking for terms that have missing references.
    -- For each missing reference, if a term with the expected name is found in 'lib',
    -- then modify the term to use the named term in 'lib'.
def Branch.list_configs(self) -> List
    -- Return a list of Terms that look like configs (named literal values).
def Branch.output(self, int index) -> Term
    -- Return an output placeholder term by index.
def Branch.outputs(self) -> List
    -- Return a list of all output placeholders.
def Branch.owner(self) -> Term
    -- Return the Term that owns this Branch (may be null).
def Branch.statements(self) -> List
    -- Return a list of Terms that are statements.
def Branch.terms(self) -> List
    -- Return a list of this branch's terms.
def Branch.version(self) -> int
    -- Return the 'version', which is a monotonically increasing number that is
    -- incremented whenever the branch is modified. Useful for change tracking.

def Dict.count(self) -> int
    -- Return the number of elements
def Dict.set(@self, String key, any value)
    -- Assign a key-value pair.
def Dict.get(self, String key) -> any
    -- Retrieve the value for a given key.

type Frame;
def Frame.branch(self) -> Branch
    -- Return the Branch associated with this Frame.
def Frame.register(self, int) -> any
    -- Fetch the value in the given register index.
def Frame.registers(self) -> List
    -- Fetch a list of all register values.
def Frame.pc(self) -> int
    -- Fetch the current program counter (the interpreter's current position).
def Frame.pc_term(self) -> Term
    -- Fetch the term associated with the current program counter.

type Interpreter;
def make_interpreter() -> Interpreter
    -- Create a new interpreter
def Interpreter.push_frame(self, Branch, List inputs)
    -- Push a new frame, using the given branch and input list.
def Interpreter.pop_frame(self)
    -- Pop the topmost frame.
def Interpreter.set_state_input(self, any)
    -- Assign a value to the :state input of the topmost frame (if any)
def Interpreter.get_state_output(self) -> any
def Interpreter.reset(self)
    -- Clear this interpreter's state, including stack frames.
def Interpreter.run(self)
    -- Run the interpreter until either the topmost frame is finished, or an error
    -- is raised.
def Interpreter.run_steps(self, int steps)
    -- Run the interpreter for a specific number of steps. If an error occurs then
    -- evaluation will be stopped.
def Interpreter.frame(self, int depth) -> Frame
    -- Return the Frame with the given depth. The top of the stack has depth 0.
def Interpreter.top_frame(self) -> Frame
    -- Return the topmost Frame.
    self.frame(0)
def Interpreter.frames(self) -> List
    -- Return the list of Frames.
def Interpreter.output(self, int index) -> any
    -- Fetch the value in the nth output register.
def Interpreter.errored(self) -> bool
    -- Returns true if the interpreter has stopped to due error.
def Interpreter.error_message(self) -> String
    -- If there is a recorded error, returns a human-readable description string.
def Interpreter.toString(self) -> String

def List.append(@self, any element)
    -- Append an element to the end of this list.
def List.extend(@self, List right)
    -- Extend this list with the given input. Afterwards, 'self' will be the
    -- concatenation of the old 'self' and 'right'.
def List.resize(@self, int length)
    -- Resize the list to have the given length. If the length is increased, then
    -- null values are appended on the right; if the length is decreased then
    -- existing values on the right are dropped.
def List.count(self) -> int
    -- Return the number of elements in this list.
def List.insert(@self, int, any)
    -- Insert an element at the given index. If necessary, existing elements will
    -- be shifted to the right to make room.
    --
    -- Example:
    --   a = [1 2 3]
    --   a.insert(1, 'X')
    --   -- a now equals [1 'X' 2 3]
    
def List.length(self) -> int
    -- Return the number of elements in this list.
def List.join(self, String joiner) -> String
    -- Return a string constructed by converting every element to a string, and
    -- concatenating those strings, each separated by 'joiner'.
    --
    -- Example:
    --  [1 2 3].join(', ')
    -- 
    -- Outputs: '1, 2, 3'

def List.slice(self, int start, int fin) -> List
    -- Return a list constructed from the elements starting from index 'start', and
    -- ending immediately before index 'fin'.
    --
    -- If either 'start' or 'fin' is negative, it's interpreted as an offset from the
    -- end of the list.
    --
    -- Examples:
    --  [1 2 3 4].slice(1 3)
    --  Outputs: [2 3]
    -- 
    --  [1 2 3 4].slice(0 -1)
    --  Outputs: [1 2 3]

def List.get(self, index) -> any
    -- Get an element by index.
def List.empty(self) -> bool
    -- Returns whether the list is empty.
    self.length == 0
def List.last(self) -> any
    -- Returns the last element
    self.get(self.length - 1)
def List.pop(@self) -> any
    -- Returns the last element, and removes it from the list.
    result = self.last
    self = self.slice(0, -1)
    result

def Map.contains(self, any key) -> bool
    -- Returns true if the map contains the given key.
def Map.remove(@self, any key)
    -- Removes the given key from the map.
def Map.get(self, any key) -> any
    -- Gets the key associated with this value.
def Map.set(@self, any key, any value)
    -- Sets the value associated with this key.

-- Overloaded functions
def is_overloaded_func(Branch branch) -> bool
    -- Return true if this branch is an overloaded function

def overload:get_contents(Branch branch) -> List
    -- Get a list of all the functions that this overloaded function uses.

def String.append(@self, String right)
    -- Modify 'self' by appending the given string on the right side.
    self = concat(self, right)
    
def String.char_at(self, int index) -> String

def String.ends_with(self,String) -> bool
    -- Return true if this string ends with the given substring.
def String.length(self) -> int
    -- Returns the string length.
def String.slice(self,int,int) -> String
def String.starts_with(self,String prefix) -> bool
    -- Returns true if the string starts with the given prefix.
def String.split(self,String sep) -> List
def String.substr(self,int,int) -> String
def String.to_camel_case(self) -> String
    -- Deprecated function
def String.to_lower(self) -> String
def String.to_upper(self) -> String

def String.characters(self) -> List
    out = for i in 0..(self.length)
        self.char_at(i)
    return out

def Type.name(self) -> String
    -- Returns this Term's local name. May be empty.
def Type.property(self, String) -> any
def Type.is_handle(self) -> bool
    self.property('handle') == true
def Type.declaringTerm(self) -> Term

def type(any) -> Type
    -- Returns the runtime type of a value

-- Metaprogramming on Term
def term_ref(any :ignore_error) -> Term
def Term.assign(self, any)
def Term.asint(self) -> int
def Term.asfloat(self) -> number
def Term.parent(self) -> Branch
def Term.contents(self) -> Branch
    -- Fetch the nested Branch contents of this Term. The format and the meaning
    -- of these contents is dictated by the term's function.
def Term.is_null(self) -> bool
    -- Returns whether this is a null Term reference.
def Term.name(self) -> String
    -- Return this term's local name. May be blank.
def Term.to_string(self) -> String
def Term.to_source_string(self) -> String
def Term.function(self) -> Branch
    -- Fetch this term's function.
def Term.get_type(self) -> Type
    -- Fetch the declared type of this term.
def Term.value(self) -> any
    -- For a value term, this fetches the actual value.
def Term.tweak(self, number steps)
def Term.input(self, int) -> Term
    -- Fetch an input term by index.
def Term.inputs(self) -> List
    -- Return a list of input terms.
def Term.num_inputs(self) -> int
    -- Return the number of inputs.
def Term.source_location(self) -> Rect_i
    -- Return a Rect_i that describes where this term occurs in its source file.
def Term.location_string(self) -> String
def Term.global_id(self) -> int
    -- Fetch this term's global identifier.
def Term.properties(self) -> Map
def Term.property(self, String) -> any
    -- Fetch a term property by name.
def Term.is_value(self) -> bool
    self.function == branch_ref(value)
def Term.is_function(self) -> bool
    self.is_value and is_function(self.value)
def Term.is_type(self) -> bool
    self.is_value and is_type(self.value)
def Term.is_input_placeholder(self) -> bool
    self.function == branch_ref(input_placeholder)
def Term.is_comment(self) -> bool
    self.function == branch_ref(comment)

-- workaround, these functions currently need to be declared after Term:
def Branch.name(self) -> String
    self.owner.name

def Branch.is_method(self) -> bool
    self.owner.property("syntax:methodDecl") == true

def Branch.get_top_comments(self) -> List
    out = []
    for Term t in self.terms
        if t.is_input_placeholder
            continue
        elif t.is_comment
            str = t.property('comment')
            if str == ""
                break

            out.append(t.property('comment'))
        else
            break

    return out

-- Builtin types
type Actor { String name, String moduleName, List incomingQueue, any stateVal }
type FileSignature { String filename, int time_modified }
type Callable;
type Color { number r, number g, number b, number a }
type Point { number x, number y }
type Point_i { int x, int y }
type Rect { number x1, number y1, number x2, number y2 }
type Rect_i { int x1 int y1 int x2 int y2 }

def Point.magnitude(self) -> number
    -- Return the magnitude of this point, or the distance to [0 0].
    sqrt(sqr(self.x) + sqr(self.y))

def Point.norm(self) -> Point
    -- Returns v normalized to be along the unit circle.
    m = magnitude(self)
    [self.x / m, self.y / m]

def Point.perpendicular(self) -> Point
    -- Returns a vector that is perpendicular to self, rotated clockwise.
    [self.y -self.x]

def Point.to_rect_center(self, Point size) -> Rect
    -- Returns a Rect with this point as the center, and 'size' as the width & height.
    size_half = (size * 0.5) -> Point
    [self.x - size_half.x,
        self.y - size_half.y, self.x + size_half.x, self.y + size_half.y]

def Point.delta(self) -> Point
    -- Stateful function, returns the point difference since the last frame.
    state Point prev = self
    result = [self.x - prev.x, self.y - prev.y]
    prev = self
    result

def Point.distance(self, Point b) -> number
    -- Returns the distance between self and b.
    sqrt(sqr(self.x - b.x) + sqr(self.y - b.y))

def Point.rotate(self, number rotation) -> Point
    -- Return the point rotated around [0 0] by the given angle.
    [self.x*cos(rotation) - self.y*sin(rotation), self.x*sin(rotation)+self.y*cos(rotation)]

def Rect.width(self) -> number
    self.x2 - self.x1
def Rect.height(self) -> number
    self.y2 - self.y1
def Rect.topleft(self) -> Point
    -- Returns the top-left coordinates as a Point.
    [self.x1 self.y1]
def Rect.topright(self) -> Point
    -- Returns the top-rigth coordinates as a Point.
    [self.x2 self.y1]
def Rect.bottomleft(self) -> Point
    -- Returns the bottom-left coordinates as a Point.
    [self.x1 self.y2]
def Rect.bottomright(self) -> Point
    -- Returns the bottom-right coordinates as a Point.
    [self.x2 self.y2]

def Rect.intersects(self, Rect b) -> bool
    -- Return whether the two rectangles intersect.
    intersects_on_x = (self.x2 > b.x1) and (b.x2 > self.x1)
    intersects_on_y = (self.y2 > b.y1) and (b.y2 > self.y1)
    return intersects_on_x and intersects_on_y

def Rect.translate(self, Point p) -> Rect
    [self.x1 + p.x, self.y1 + p.y, self.x2 + p.x, self.y2 + p.y]

def toggle(bool tog) -> bool
    -- Stateful function, returns a boolean status. Every frame the function is called
    -- with (true), the result flips. Starts out false.

    state bool s = false
    if tog
        s = not(s)
    return s

def approach(number target, number maximum_change) -> number
    -- Stateful function, returns a result which approaches 'target'. Each time the
    -- function is called, the result will change at most by 'maximum_change'.

    state current = target
    if target > current
        current += min(maximum_change, target - current)
    elif target < current
        current -= min(maximum_change, current - target)
    return current

def once() -> bool
    -- Stateful function, returns true the first time it's called, and false thereafter.

    state bool s = true
    result = s
    s = false
    return result

def cycle(int max) -> int
    -- Stateful function, cycles though the integers from 0 to (max - 1). When the maximum
    -- is reached, the function will start again at 0.

    state int counter = 0
    if counter >= max
        counter = 0
    result = counter
    counter += 1
    return result

def cycle_elements(List list) -> any
    -- Stateful function, cycles through each item of 'list' one at a time.
    return list[cycle(length(list))]

def random_element(List list) -> any
    -- Return a random element from the given list, with equal probability per element.
    return list[rand_i(length(list))]

def seed() -> number
    -- Stateful function, returns a random number 0..1 which doesn't change after initialization.
    state number s = rand()
    return s

-- Math utility functions
def polar(number angle) -> Point
    -- Return a point on the unit circle with the given angle.
    return [sin(angle) -cos(angle)]

def magnitude(Point point) -> number
    -- Returns the magnitude, or the distance from [0,0] to this point.
    return sqrt(sqr(point.x) + sqr(point.y))

def point_distance(Point a, Point b) -> number
    -- Returns the distance between a and b.
    sqrt(sqr(a.x - b.x) + sqr(a.y - b.y))

def rotate_point(Point p, number rotation) -> Point
    -- Rotate p around [0,0] by the given angle.
    return [p.x*cos(rotation) - p.y*sin(rotation), p.x*sin(rotation)+p.y*cos(rotation)]

def random_norm_vector() -> Point
    -- Return a random normalized vector.
    angle = rand() * 360
    return [cos(angle) sin(angle)]



def to_rect(Point topLeft, Point size) -> Rect
    -- Return a Rect with the given top-left coordinate and size.
    return [topLeft.x, topLeft.y, topLeft.x + size.x, topLeft.y + size.y]

def expand_rect(Point center, Point size) -> Rect
    -- Return a Rect with the given center coordinate and size.
    width = abs(size.x)
    height = abs(size.y)
    return [center.x - width/2, center.y - height/2, center.x + width / 2, center.y + height/2]

def grow_rect(Rect r, number amount) -> Rect
    -- Return a Rect based on r, where each side is moved away from the center by 'amount'.
    return Rect([r.x1 - amount, r.y1 - amount, r.x2 + amount, r.y2 + amount])

def rect(Point topleft, Point bottomright) -> Rect
    -- Return a Rect with the given top-left and bottom-right coordinates.
    return [topleft.x topleft.y bottomright.x bottomright.y]

def approach_rect(Rect target, number maxChange) -> Rect
    -- Stateful function, returns a Rect that gradually approaches the target Rect.
    -- Each coordinate will change by at most 'maxChange' per call.
    return Rect([approach(target.x1,maxChange), approach(target.y1,maxChange),
        approach(target.x2,maxChange),approach(target.y2,maxChange)])


def interp_rect(Rect a, Rect b, number ratio) -> Rect
    -- Linearly interpolate between two rectangles.
    min(@ratio, 1.0)
    result = for i in 0..4 { a[i] + (b[i] - a[i]) * ratio }
    return Rect(result)

def bezier3(number t, List points) -> Point
    -- Quadratic bezier curve, with 3 control points. t must be in the range of [0, 1].
    p0 = points[0] -> Point
    p1 = points[1] -> Point
    p2 = points[2] -> Point
    return p0 * sqr(1 - t) + p1 * (2 * t * (1 - t)) + p2 * sqr(t)

def bezier4(number t, List points) -> Point
    -- Cubic bezier curve, with 4 control points. t must be in the range of [0, 1].
    p0 = points[0] -> Point
    p1 = points[1] -> Point
    p2 = points[2] -> Point
    p3 = points[3] -> Point
    return p0 * cube(1 - t) + p1 * (3 * t * sqr(1 - t)) + p2 * sqr(t) * (3 * (1 - t)) + p3 * cube(t)

def smooth_in_out(number t, number smooth_in, number smooth_out) -> number
    return bezier4(t, [[0 0] [smooth_in, 0] [1 - smooth_out, 1] [1 1]]).y

def clamp(number x, number minVal, number maxVal) -> number
    -- Return a clamped value. If x is less than 'minVal' then return 'minVal', if it's
    -- greater than 'maxVal' then return 'maxVal', otherwise return the original 'x'.
    return min(max(x, minVal), maxVal)

def smoothstep(number x, number edge0, number edge1) -> number
    -- Smooth interpolation func, see en.wikipedia.org/wiki/Smoothstep
    x = clamp((x - edge0)/(edge1-edge0), 0, 1)
    return x*x*(3 - 2*x)

def smootherstep(number x, number edge0, number edge1) -> number
    -- Alternative to smoothstep by Ken Perlin, see en.wikipedia.org/wiki/Smoothstep
    x = clamp((x - edge0)/(edge1-edge0), 0, 1)
    return x*x*x*(x*(x*6 - 15) + 10)

def random_color() -> Color
    -- Return a color with random RGB components, and full alpha.
    return [rand() rand() rand() 1.0]

def blend_color(Color a, Color b, number ratio) -> Color
    -- Return a color that is blended between a and b. If ratio is 0.0 we'll
    -- return 'a', if it's 1.0 we'll return 'b'.
    
    {-
    def unit_tests()
        blend_color(#abc #123 0.0) == #abc
        blend_color(#abc #123 1.0) == #123
        blend_color(#abc #123 2.0) == #123
        blend_color(#abc #123 -1.0) == #abc
        blend_color(#fff #fff 0.5) == #fff
    -}

    max(@ratio, 0.0)
    min(@ratio, 1.0)

    if ratio == 0.0
        return a
    elif ratio == 1.0
        return b
    else
        result = a + (b - a) * ratio

        -- hack to preserve alpha:
        result[3] = 1.0
        return result

def hsv_to_rgb(List hsv) -> Color
    -- Convert HSV components to an RGB Color

    h = hsv[0] -> number
    s = hsv[1] -> number
    v = hsv[2] -> number

    if s == 0
        -- grey
        return [v v v 1]

    h *= 6
    i = floor(h)
    f = h - i
    p = v * (1 - s)
    q = v * (1 - s * f)
    t = v * (1 - s * (1 - f))

    if i == 0
        return [v t p 1]
    elif i == 1
        return [q v p 1]
    elif i == 2
        return [p v t 1]
    elif i == 3
        return [p q v 1]
    elif i == 4
        return [t p v 1]
    elif i == 5
        return [v p q 1]

    return [0 0 0 0]

def lighten(Color c, number factor) -> Color
    return [
        min(c.r + factor, 1.0)
        min(c.g + factor, 1.0)
        min(c.b + factor, 1.0)
        c.a]
        
def darken(Color c, number factor) -> Color
    return [
        max(c.r - factor, 0.0)
        max(c.g - factor, 0.0)
        max(c.b - factor, 0.0)
        c.a]

def delta(number val) -> number
    -- Stateful function, return the difference between this value and the value from
    -- the previous call.
    state number prev = val
    result = val - prev
    prev = val
    return result
