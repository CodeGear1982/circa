
type TargetSubElement {
    List list
}

def TargetSubElement.top(self) -> List
    if self.list.empty
        null
    else
        self.list.last
def TargetSubElement.pop(@self)
    self.list.pop
def TargetSubElement.append(@self, any subElement)
    self.list.append(subElement)
def TargetSubElement.empty(self) -> bool
    self.list.empty

type Target {
    Term term
    TargetSubElement subElement
}

type ConstraintSet {
    Map byTerm
}
def ConstraintSet.setValue(@self, Term term, any value)
    self.byTerm.set(term, value)
def ConstraintSet.getKnowledge(@self, Term term) -> any
    if self.byTerm.contains(term)
        self.byTerm.get(term)
    elif term.is_value
        term.value
    else
        null

type Desire {
    Name name
    List args
}

type Request {
    Target target
    ConstraintSet constraints
    Desire desire
}

type Failure {
    Name name
    List args
}

type ChangeOperation {
    Name name
    List args
}

def advance_request(Request request) -> any

    term = request.target.term
    desireType = request.desire[0]

    -- First dispatch on function

    -- value() function
    if term.function == block_ref(value)

        -- Accept an :assign request
        if request.desire.name == :assign
            result = make(ChangeOperation)
            result.name = :assign_value
            result.args = request.desire.args
            return result
        else
            return Failure([:FuncCantHandleRequest request])

    -- copy() function, forward to input
    elif term.function == block_ref(copy) or term.function == block_ref(output_placeholder)
        
        -- TODO, need to correct request.knowledge
        request.target.term = term.input(0)
        return request

    -- get_index
    elif term.function == block_ref(get_index)
        -- TODO, handle requests that target the index value.
        indexTerm = term.input(1)

        -- Dispatch based on our knowledge of the index
        knowledge = request.constraints.getKnowledge(indexTerm)

        if knowledge == null
            return Failure([:NotEnoughInformation request])

        indexValue = term.value()

        request.target.subElement.append([:index indexValue])
        request.target.term = term.input(0)
        return request

    -- for-loop
    elif term.function.name == 'for'

        lastElement = request.target.subElement.top

        if lastElement[0] != :index
            -- Don't know how to target for if the subElement is not an index.
            return Failure([:FuncCantHandleRequest request])

        forContents = request.target.term.contents
        loopIndex = forContents.input(1)
        outputTerm = forContents.output(0)

        newRequest = request
        newRequest.target.subElement.pop
        newRequest.constraints.setValue(loopIndex lastElement[1])
        newRequest.target.term = outputTerm

        return newRequest

    return :DidNotUnderstand

def resolve_request(Request request) -> any

    print('trying to resolve: ' request)
    
    -- TODO, use unbounded loop here when available
    max_iterations = 100
    for i in 0..max_iterations

        advanced = advance_request(request)

        print('advanced: ' advanced)
        
        if type(advanced) != Request
            return advanced

        request = advanced

    return :TooManyIterations
