
type Writer {
    bool needsComma
    List output
}

def to_json_string(any i) -> String
    if is_string(i)
        return concat('"' i '"')
    elif is_list(i)
        elements = List(i)
        for e in @elements
            to_json_string(@e)
        return concat('[', elements.join(', '), ']')
    elif is_bool(i)
        return to_string(i)
    else
        return concat('"' to_string(i) '"')

def Writer.start(@self)
    self.output = ['[']
    self.needsComma = false
def Writer.finish(@self)
    self.output.append(']\n')
def Writer.save(self, String filename)
    write_text_file(filename, self.output.join("\n"))

def Writer.write(@self, any args :multiple)
    if self.needsComma
        self.output.append(',')
        self.needsComma = false
    
    self.output.append(args.join(''))

def Writer.dump_function(@self, Block func)
    self.write('{')
    self.write('"type": "Function",')
    self.write('"name": "' func.name '",')
    self.write('"term": "' func.owner '",')
    heading = func.format_function_heading
    to_json_string(@heading)
    self.write('"heading": ' heading ',')
    self.write('"topComments": ' to_json_string(func.get_top_comments) ',')
    self.write('"isOverloaded": ' is_overloaded_func(func) ',')
    self.write('"overloads": ' to_json_string(overload_get_contents(func)) ',')
    self.write('"isMethod": ' func.is_method ',')

    inputTypes = for i in func.inputs { i.get_type.declaringTerm }

    self.write('"inputTypes": ' to_json_string(inputTypes) '')

    inputs = for input in func.inputs
        Term(@input)

    self.write('}')
    self.needsComma = true

def Writer.dump_type(@self, Type t)
    self.write('{')
    self.write('"type": "Type",')
    self.write('"name": "' t.name '",')
    self.write('"term": "' t.declaringTerm '"')

    self.write('}')
    self.needsComma = true

def Writer.dump_module(@self, Block b)
    for Term t in b.terms
        if t.is_function
            self.dump_function(t.contents)
        elif t.is_type
            self.dump_type(t.value)

writer = make(Writer)
writer.start
writer.dump_module(reflect:kernel())
writer.finish
writer.save('circa.docs.json')

writer.start
writer.dump_module(load_script('improv/ca/qt.ca'))
writer.dump_module(load_script('improv/ca/InputEvent.ca'))
writer.dump_module(load_script('improv/ca/UIHelper.ca'))
writer.dump_module(load_script('improv/ca/UserApi.ca'))
writer.finish
writer.save('improv.docs.json')
