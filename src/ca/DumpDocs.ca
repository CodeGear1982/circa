
type Writer {
    bool needsComma
}

def to_json_string(any i) -> String
    if is_string(i)
        return concat('"' i '"')
    elif is_list(i)
        elements = List(i)
        for e in @elements
            to_json_string(@e)
        return concat('[', elements.join(', '), ']')
    elif is_bool(i)
        return to_string(i)
    else
        return concat('"' to_string(i) '"')

def Writer.write(@self, any args :multiple)
    if self.needsComma
        print(',')
        self.needsComma = false
    
    print(args.join(''))

def Writer.dump_function(@self, Branch func)
    self.write('{')
    self.write('"type": "Function",')
    self.write('"name": "' func.name '",')
    self.write('"term": "' func.owner '",')
    heading = func.format_function_heading
    to_json_string(@heading)
    self.write('"heading": ' heading ',')
    self.write('"topComments": ' to_json_string(func.get_top_comments) ',')
    self.write('"isOverloaded": ' is_overloaded_func(func) ',')
    self.write('"overloads": ' to_json_string(overload:get_contents(func)) ',')
    self.write('"isMethod": ' func.is_method ',')

    inputTypes = for i in func.inputs { i.get_type.declaringTerm }

    self.write('"inputTypes": ' to_json_string(inputTypes) '')

    inputs = for input in func.inputs
        Term(@input)

    self.write('}')
    self.needsComma = true

def Writer.dump_type(@self, Type t)
    self.write('{')
    self.write('"type": "Type",')
    self.write('"name": "' t.name '",')
    self.write('"term": "' t.declaringTerm '"')

    self.write('}')
    self.needsComma = true

print('[')
writer = create(Writer)
items = for t in reflect:kernel().terms
    Term(@t)

    if t.is_function
        writer.dump_function(t.contents)
    elif t.is_type
        writer.dump_type(t.value)

print(']')
