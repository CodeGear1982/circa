
type CodeWriter
{
    int curIndent
    bool needsIndent
    List output
}

def CodeWriter.write(self :out, String s)
    if self.needsIndent
        self.needsIndent = false
        for i in 0..self.curIndent
            self.output.append('    ')
    self.output.append(s)

def CodeWriter.writeln(self :out, String line)
    self.write(line)
    self.output.append("\n")
    self.needsIndent = true

def CodeWriter.indent(self :out)
    self.curIndent += 1
def CodeWriter.unindent(self :out)
    self.curIndent -= 1

def CodeWriter.toString(self) -> String
    return self.output.join("")

def circa_name_to_c_name(String s) -> String
    return s

def write_function(CodeWriter writer :out, Function func)
    writer.write('void ')
    writer.write(func.name -> circa_name_to_c_name)
    writer.write('(caStack* stack)')
    writer.writeln('')
    writer.writeln('{')
    writer.indent()
    writer.unindent()
    writer.writeln('}')

def write_bindings(Branch branch) -> String
    writer = create(CodeWriter)

    for func in branch.list_functions
        write_function(&writer, func)

    return writer.toString

bindings = load_script('canvas/qt.ca')
write_bindings(bindings) -> print
