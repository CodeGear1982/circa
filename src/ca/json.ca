
def is_digit(String s)
  if s.length < 1
    return false
  (s.ord >= '0'.ord) and (s.ord <= '9'.ord)

type Reader {
  String str
  int pos
}

def Reader.empty(self) -> bool
  self.pos >= self.str.length

def Reader.next(self) -> String
  self.str.char_at(self.pos)

def Reader.advance(@self)
  self.pos += 1

def Reader.consumeWhitespace(@self)
  while self.next == ' '
    @self.advance

  self

def Reader.matches(self, str) -> bool
  self.str.substr(self.pos, str.length) == str

def Reader.consume(@self, str)
  self.pos += str.length

def Reader.parse_string(self) -> (Reader, any)
  @self.advance

  p = self.pos
  while self.next != '"'
    if self.empty
      error("Unexpected end of string, looking for: \"")

    -- TODO: handle escapes and unicode
    @self.advance

  result = self.str.slice(p, self.pos)
  @self.advance
  return self, result

def Reader.parse_value(self) -> (Reader, any)
  @self.consumeWhitespace

  result = null

  if self.next == '['
    @self.advance
    @self.consumeWhitespace
    
    result = []

    first = true
    while self.next != ']'
      @self.consumeWhitespace
      if self.empty
        error("Unexpected end of string, looking for: ] or ,")

      if not first
        if self.next != ','
          error("Expected: ," self)
        @self.advance
        @self.consumeWhitespace

      val = @self.parse_value
      @result.append(val)
      first = false

      @self.consumeWhitespace

    @self.advance
  if self.next == '{'
    @self.advance
    @self.consumeWhitespace

    result = Map.make

    first = true
    while self.next != '}'
      @self.consumeWhitespace
      if self.empty
        error("Unexpected end of string, looking for: } or ,")

      if not first
        if self.next != ','
          error('Expected ,' self)
        @self.advance
        @self.consumeWhitespace

      key = @self.parse_string
      @self.consumeWhitespace

      if self.next != ':'
        error('Expected :')
      @self.advance
      @self.consumeWhitespace

      val = @self.parse_value

      @result.set(key,val)
      first = false

    @self.advance

  elif self.matches("true")
    @self.consume("true")
    result = true

  elif self.matches("false")
    @self.consume("false")
    result = false

  elif self.matches("null")
    @self.consume("null")
    result = null

  elif is_digit(self.next) or self.next == '-'

    p = self.pos

    @self.advance
    while is_digit(self.next)
      @self.advance

    foundDot = false
    if self.next == "."
      foundDot = true
      @self.advance

      while is_digit(self.next)
        @self.advance

    -- TODO: exponent notation

    result = self.str.slice(p, self.pos)
    assert(is_string(result))

    if foundDot
      @result.to_number
    else
      @result.to_int

  elif self.next == '"'
    result = @self.parse_string

  return self, result

def parse(String str) -> any
  reader = Reader.make(str 0)
  result = @reader.parse_value
  return result

def String.quote(self) -> String
  -- TODO: insert escapes as needed
  concat('"' self '"')

def write(val) -> String
  if is_list(val)
    concat('[' (for el in val { write(el) }).join(', ') ']')
  elif is_map(val)
    concat('{' (for k in val.keys { concat(k.quote, ": ", write(val.get(k))) }).join(', ') '}')
  elif is_string(val)
    val.quote
  else
    to_string(val)
