// This file was autogenerated

#include <cstring>

namespace circa {

const char* BUILTIN_MODULE_stdlib = 
    "\n"
    "-- Parse errors\n"
    "def unknown_function(any ins :multiple)\n"
    "def unknown_identifier()\n"
    "\n"
    "-- Misc builtins\n"
    "def declare_field()\n"
    "def return(any outs :multiple :optional)\n"
    "def discard(any outs :multiple :optional)\n"
    "def dynamic_method(any inputs :multiple)\n"
    "def break(any outs :multiple :optional)\n"
    "def continue(any outs :multiple :optional)\n"
    "def extra_output(any _) -> any\n"
    "def func_call_implicit(any inputs :multiple)\n"
    "def get_field(any obj, String key) -> any\n"
    "def get_index(List list, int index) -> any\n"
    "def selector(any elements :multiple) -> Selector\n"
    "def get_with_selector(any object, Selector selector) -> any\n"
    "def set_with_selector(any object, Selector selector, any newValue) -> any\n"
    "def syntax_error(msg :multiple)\n"
    "def section()\n"
    "def case_condition_bool(bool condition)\n"
    "def loop_condition_bool(bool condition)\n"
    "def minor_return_if_empty()\n"
    "\n"
    "-- While-block\n"
    "def while()\n"
    "\n"
    "-- For-block\n"
    "def for(List list) -> List\n"
    "def loop_index() -> int\n"
    "def loop_get_element(list, int index)\n"
    "def loop_output_index() -> any\n"
    "\n"
    "-- If-block\n"
    "def if() -> any\n"
    "def case(bool b :optional)\n"
    "\n"
    "-- Switch-block\n"
    "def switch(any input :optional) -> any\n"
    "\n"
    "-- Explicit input/output (future questionable)\n"
    "def output(any _)\n"
    "\n"
    "-- List values\n"
    "def list(any vals :multiple) -> List\n"
    "def blank_list(int count) -> List\n"
    "\n"
    "-- Logical\n"
    "def and(bool a, bool b) -> bool\n"
    "  -- Return whether a and b are both true\n"
    "def or(bool a, bool b) -> bool\n"
    "  -- Return whether a or b are both true\n"
    "def not(bool b) -> bool\n"
    "\n"
    "-- Map values\n"
    "def map(any vals :multiple) -> Map\n"
    "\n"
    "-- Math\n"
    "def add_i(int a, int b) -> int\n"
    "def add_f(number a, number b) -> number\n"
    "def max_f(number a,number b) -> number\n"
    "  -- Maximum of two numbers\n"
    "def max_i(int a,int b) -> int\n"
    "  -- Maximum of two integers\n"
    "def min_f(number a,number b) -> number\n"
    "  -- Minimum of two numbers\n"
    "def min_i(int a,int b) -> int\n"
    "  -- Minimum of two integers\n"
    "def remainder_i(int a,int b) -> int\n"
    "def remainder_f(number a,number b) -> number\n"
    "def mult_i(int a,int b) -> int\n"
    "def mult_f(number a,number b) -> number\n"
    "def mod_i(int a,int b) -> int\n"
    "def mod_f(number a,number b) -> number\n"
    "def neg_i(int i) -> int\n"
    "def neg_f(number n) -> number\n"
    "def sub_i(int a,int b) -> int\n"
    "def sub_f(number a,number b) -> number\n"
    "def round(number n) -> int\n"
    "  -- Return the integer that is closest to n\n"
    "def floor(number n) -> int\n"
    "  -- Return the closest integer that is less than n\n"
    "def ceil(number n) -> int\n"
    "  -- Return the closest integer that is greater than n\n"
    "def average(vals :multiple) -> number\n"
    "  -- Returns the average of all inputs\n"
    "def pow(number i, number x) -> number\n"
    "  -- Returns i to the power of x\n"
    "def sqr(number n) -> number\n"
    "  -- Square function\n"
    "def cube(number n) -> number\n"
    "  -- Cube function\n"
    "def sqrt(number n) -> number\n"
    "  -- Square root\n"
    "def log(number n) -> number\n"
    "  -- Natural log function\n"
    "\n"
    "-- Trig\n"
    "def sin(number degrees) -> number\n"
    "  -- Trigonometric sin() function\n"
    "def cos(number degrees) -> number\n"
    "  -- Trigonometric cos() function\n"
    "def tan(number degrees) -> number\n"
    "  -- Trigonometric tan() function\n"
    "def arcsin(number n) -> number\n"
    "  -- Trigonometric arcsin() function\n"
    "def arccos(number n) -> number\n"
    "  -- Trigonometric arccos() function\n"
    "def arctan(number n) -> number\n"
    "  -- Trigonometric arctan() function\n"
    "\n"
    "-- Secret functions used by interpreter\n"
    "def _get_local_state() -> any\n"
    "  -- Special call, read this frame's state.\n"
    "def _get_local_stack_path() -> any\n"
    "def _find_active_value(term) -> (any, bool)\n"
    "def _save_state_result(Term declaredStateTerm, any result)\n"
    "def _get_demand_value(Term t) -> (bool, any)\n"
    "def _store_demand_value(Term t, any val)\n"
    "def _extract_stack_path() -> List\n"
    "def dbg_get_incoming_state() -> any\n"
    "def dbg_get_outgoing_state() -> any\n"
    "def dbg_set_incoming_state(val)\n"
    "def dbg_set_outgoing_state(val)\n"
    "\n"
    "-- Type checking\n"
    "def is_compound(n) -> bool\n"
    "def is_list(n) -> bool\n"
    "def is_map(n) -> bool\n"
    "def is_int(n) -> bool\n"
    "def is_number(n) -> bool\n"
    "def is_bool(n) -> bool\n"
    "def is_string(n) -> bool\n"
    "def is_null(n) -> bool\n"
    "def is_function(n) -> bool\n"
    "def is_type(n) -> bool\n"
    "\n"
    "def is_scalar(n) -> bool\n"
    "  is_int(n) or is_number(n)\n"
    "\n"
    "-- Overloaded math funcs\n"
    "def add(any left, any right) -> any\n"
    "  if is_int(left) and is_int(right)\n"
    "    add_i(left, right)\n"
    "  elif is_int(left) or is_number(left)\n"
    "    add_f(left, right)\n"
    "  else\n"
    "    left.add(right)\n"
    "\n"
    "def sub(any left, any right) -> any\n"
    "  if is_int(left) and is_int(right)\n"
    "    sub_i(left, right)\n"
    "  elif is_int(left) or is_number(left)\n"
    "    sub_f(left, right)\n"
    "  else\n"
    "    left.sub(right)\n"
    "\n"
    "def mult(any left, any right) -> any\n"
    "  if is_int(left) and is_int(right)\n"
    "    mult_i(left, right)\n"
    "  elif is_int(left) or is_number(left)\n"
    "    mult_f(left, right)\n"
    "  else\n"
    "    left.mult(right)\n"
    "\n"
    "def div(any left, any right) -> any\n"
    "  if is_int(left) or is_number(left)\n"
    "    div_f(left, right)\n"
    "  else\n"
    "    left.div(right)\n"
    "\n"
    "def less_than(any a, any b) -> bool\n"
    "  if is_int(a) and is_int(b)\n"
    "    less_than_i(a b)\n"
    "  else\n"
    "    less_than_f(a b)\n"
    "\n"
    "def less_than_eq(any a, any b) -> bool\n"
    "  if is_int(a) and is_int(b)\n"
    "    less_than_eq_i(a b)\n"
    "  else\n"
    "    less_than_eq_f(a b)\n"
    "\n"
    "def greater_than(any a, any b) -> bool\n"
    "  if is_int(a) and is_int(b)\n"
    "    greater_than_i(a b)\n"
    "  else\n"
    "    greater_than_f(a b)\n"
    "\n"
    "def greater_than_eq(any a, any b) -> bool\n"
    "  if is_int(a) and is_int(b)\n"
    "    greater_than_eq_i(a b)\n"
    "  else\n"
    "    greater_than_eq_f(a b)\n"
    "\n"
    "def max(any a, any b) -> any\n"
    "  if is_int(a) and is_int(b)\n"
    "    max_i(a b)\n"
    "  else\n"
    "    max_f(a b)\n"
    "\n"
    "def min(any a, any b) -> any\n"
    "  if is_int(a) and is_int(b)\n"
    "    min_i(a b)\n"
    "  else\n"
    "    min_f(a b)\n"
    "\n"
    "def remainder(any a, any b) -> any\n"
    "  if is_int(a) and is_int(b)\n"
    "    remainder_i(a b)\n"
    "  else\n"
    "    remainder_f(a b)\n"
    "\n"
    "def mod(any a, any b) -> any\n"
    "  if is_int(a) and is_int(b)\n"
    "    mod_i(a b)\n"
    "  else\n"
    "    mod_f(a b)\n"
    "\n"
    "def neg(any a) -> any\n"
    "  if is_int(a)\n"
    "    neg_i(a)\n"
    "  else\n"
    "    neg_f(a)\n"
    "\n"
    "def number.add(left, right) -> number\n"
    "  add(left, right)\n"
    "def number.sub(left, right) -> number\n"
    "  sub(left, right)\n"
    "def number.mult(left, right) -> number\n"
    "  mult(left, right)\n"
    "def number.div(left, right) -> number\n"
    "  div(left, right)\n"
    "\n"
    "def rand() -> number\n"
    "\n"
    "def copy(any val) -> any\n"
    "\n"
    "def cast_declared_type(any val) -> any\n"
    "def cast(any val, Type t) -> (any, bool)\n"
    "\n"
    "def cond(bool condition, any pos, any neg) -> any\n"
    "  -- If 'condition' is true, returns 'pos'. Otherwise returns 'neg'.\n"
    "\n"
    "def str(any vals :multiple) -> String\n"
    "  -- Convert inputs to a string and concatenate the result\n"
    "\n"
    "def copy(any val) -> any\n"
    "\n"
    "def convert(any value, Type t) -> any\n"
    "  -- Convert the value to the given type, if possible.\n"
    "\n"
    "def compute_patch(existing, new) -> any\n"
    "  -- Compute a patch, which when applied to 'existing' will equal 'new'\n"
    "\n"
    "def div_f(number a,number b) -> number\n"
    "def div_i(number a,number b) -> int\n"
    "\n"
    "def apply_patch(existing, patch) -> any\n"
    "  -- Apply a patch\n"
    "\n"
    "def assert(bool condition)\n"
    "  -- Raises an error if 'condition' is false.\n"
    "\n"
    "def equals(any a,any b) -> bool\n"
    "\n"
    "def from_string(String s) -> any\n"
    "  -- Parse a string representation to a Circa value\n"
    "\n"
    "def error(any msg :multiple)\n"
    "\n"
    "\n"
    "-- Comparison\n"
    "def less_than_i(int a,int b) -> bool\n"
    "def less_than_f(number a,number b) -> bool\n"
    "def less_than_eq_i(int a,int b) -> bool\n"
    "def less_than_eq_f(number a,number b) -> bool\n"
    "def greater_than_i(int a,int b) -> bool\n"
    "def greater_than_f(number a,number b) -> bool\n"
    "def greater_than_eq_i(int a,int b) -> bool\n"
    "def greater_than_eq_f(number a,number b) -> bool\n"
    "\n"
    "def length(List list) -> int\n"
    "  -- Return the number of items in the given list\n"
    "\n"
    "def make(Type t) -> any\n"
    "\n"
    "def range(int start, int max) -> List\n"
    "  -- Return a list of integers from start to max-1\n"
    "\n"
    "def rpath(String path) -> String\n"
    "\n"
    "def set_field(any obj, String key, any val) -> any\n"
    "def set_index(any list, int index, any val) -> List\n"
    "\n"
    "def static_error(any msg)\n"
    "\n"
    "def not_equals(any a,any b) -> bool\n"
    "\n"
    "def print(any items :multiple)\n"
    "  -- Prints a line of text output to the console.\n"
    "\n"
    "def get(Map val, List path) -> any\n"
    "def set(Map val, List path, any newValue) -> any\n"
    "def delete(Map val, List path) -> Map\n"
    "\n"
    "def trace(any items :multiple)\n"
    "\n"
    "def to_string(any val) -> String\n"
    "\n"
    "def to_string_repr(any val) -> String\n"
    "  -- Encode a Circa value as a string representation.\n"
    "\n"
    "def type(any val) -> Type\n"
    "  -- Returns the runtime type of a value.\n"
    "\n"
    "def static_type(any term :meta) -> Type\n"
    "  -- Returns the static type of a value.\n"
    "\n"
    "def env(any name) -> any\n"
    "  -- Fetch the env variable in the current scope with the given name.\n"
    "\n"
    "def env_opt(any name, any default) -> any\n"
    "  -- Like env(), but if the value doesn't exist then 'default' is used.\n"
    "\n"
    "def set_env(any name, any value)\n"
    "  -- Set an env var in the current scope.\n"
    "\n"
    "def has_effects()\n"
    "  -- Annotation, declare that a function has effects. Used in native-patched\n"
    "  -- functions. Not fully supported yet.\n"
    "\n"
    "def native_patch(String filename)\n"
    "  -- Declare that this block should be patched by a native module.\n"
    "\n"
    "def memoize()\n"
    "  -- Instruct the VM to memoize the current frame.\n"
    "\n"
    "def write_text_file(String filename, String contents)\n"
    "  -- Write contents to the given filename, overwriting any existing file. (future questionable)\n"
    "\n"
    "\n"
    "def inputs_fit_function(List inputs,Func func) -> bool\n"
    "def overload_error_no_match(List inputs)\n"
    "def unique_id() -> int\n"
    "def source_id() -> any\n"
    "\n"
    "-- Channels\n"
    "def channel_send(Symbol name, any val)\n"
    "def channel_read(Symbol name) -> List\n"
    "\n"
    "def global_script_version() -> int\n"
    "\n"
    "-- Func\n"
    "struct Func {\n"
    "  Block block\n"
    "  Map bindings\n"
    "}\n"
    "\n"
    "def Func.call(self, any inputs :multiple) -> any\n"
    "  -- Call the func using the given inputs.\n"
    "\n"
    "  -- This function is replaced by special bytecode, however in some situations\n"
    "  -- (like dynamic methods), we might find ourselves actually calling this\n"
    "  -- function. So we have another closure call here, and this one will definitely\n"
    "  -- be compiled with the correct bytecode.\n"
    "  self.apply(inputs)\n"
    "\n"
    "def Func.apply(self, List inputs) -> any\n"
    "  -- Like .call, but the inputs are given as one list instead of separate args.\n"
    "\n"
    "  -- See note in Func.call:\n"
    "  self.apply(inputs)\n"
    "\n"
    "def call(Func func, inputs :multiple) -> any\n"
    "  func.apply(inputs)\n"
    "\n"
    "def closure_block() -> Func\n"
    "  -- Internally used function for declaring a closure.\n"
    "\n"
    "-- Secret internally-used funcs\n"
    "\n"
    "def _nonlocal(term :ref) -> any\n"
    "  value, found = _find_active_value(term)\n"
    "  if found\n"
    "    value\n"
    "  else\n"
    "    _eval_on_demand(term)\n"
    "\n"
    "def _declared_state(Type t, Func initializer :optional) -> any\n"
    "  -- Internally used function for fetching a stateful value. The parser\n"
    "  -- adds a call to this function whereever the 'state' keyword is used.\n"
    "\n"
    "  existing = _get_local_state()\n"
    "\n"
    "  if existing != null\n"
    "    -- Try to cast to the desired type\n"
    "    existing, cast_success = cast(existing, t)\n"
    "\n"
    "    if cast_success\n"
    "      return existing\n"
    "\n"
    "  -- Cast failed. Try to use the initializer.\n"
    "  if initializer != null\n"
    "    return initializer.call()\n"
    "\n"
    "  -- No initializer. Use the type's default value.\n"
    "  return make(t)\n"
    "\n"
    "def _dynamic_term_eval(Term t, List inputs) -> any\n"
    "  t.function.to_func.apply(inputs)\n"
    "\n"
    "def _eval_on_demand(Term t) -> any\n"
    "  -- Internal function, used when a nonlocal() term needs a value.\n"
    "  if t.is_value or t.is_func_decl\n"
    "    return t.value\n"
    "\n"
    "  found, val = _get_demand_value(t)\n"
    "  if found\n"
    "    return val\n"
    "\n"
    "  inputs = for Term input in t.inputs\n"
    "    _eval_on_demand(input)\n"
    "\n"
    "  result = _dynamic_term_eval(t inputs)\n"
    "  _store_demand_value(t result)\n"
    "  result\n"
    "\n"
    "-- Misc builtin funcs --\n"
    "\n"
    "def abs(number n) -> number\n"
    "  -- Absolute value\n"
    "def any_true(list) -> bool\n"
    "  for i in list\n"
    "    if not(i)\n"
    "      return false\n"
    "  true\n"
    "\n"
    "def get_with_symbol(any lhs, Symbol symbol) -> any\n"
    "\n"
    "def first_symbol(any val) -> Symbol\n"
    "  if type(val) == Symbol\n"
    "    val\n"
    "  elif type(val) == List\n"
    "    if length(val) > 0\n"
    "      first_symbol(val[0])\n"
    "\n"
    "def rand_range(number min, number max) -> number\n"
    "  min + rand() * (max - min)\n"
    "def rand_i(int range) -> int\n"
    "  floor(rand() * range)\n"
    "\n"
    "def swap(a, b) -> (any, any)\n"
    "  return b, a\n"
    "\n"
    "def increment(int i) -> int\n"
    "  i + 1\n"
    "\n"
    "def decrement(int i) -> int\n"
    "  i - 1\n"
    "\n"
    "-- Builtin types\n"
    "struct FileSignature { String filename, int time_modified }\n"
    "struct Callable;\n"
    "struct Color { number r, number g, number b, number a }\n"
    "struct Module { String name, Block relativeTo }\n"
    "struct Stack;\n"
    "struct Vec2 { number x, number y }\n"
    "struct Vec2i { int x, int y }\n"
    "struct Vec3 { number x, number y, number z }\n"
    "struct Vec4 { number x, number y, number z, number w }\n"
    "struct Rect { number x1, number y1, number x2, number y2 }\n"
    "struct Rect_i { int x1, int y1, int x2, int y2 }\n"
    "\n"
    "def Module._get(self, name)\n"
    "def Module.block(self) -> Block\n"
    "def Module.resolve(self) -> Block\n"
    "  self.block\n"
    "def Module.to_func(self) -> Func\n"
    "  self.block.to_func\n"
    "def Module.to_stack(self) -> Stack\n"
    "  self.block.to_stack\n"
    "\n"
    "def load_script(String filename) -> Block\n"
    "  -- Load a script file with the given filename.\n"
    "\n"
    "def require(String name) -> Module\n"
    "  -- Load a module.\n"
    "\n"
    "def require_check(Module module)\n"
    "  block = module.resolve\n"
    "  if block.has_static_error\n"
    "    msg = [str(\"Module '\" module.name \"' has static errors: \")]\n"
    "    for error in block.get_static_errors_formatted\n"
    "      @msg.append(str('  ' error))\n"
    "\n"
    "    print(msg.join('\\n'))\n"
    "\n"
    "def package(String moduleName)\n"
    "  -- Declare that the current module is a reusable library with the given name.\n"
    "  -- (Note: Currently this function does nothing)\n"
    "\n"
    "-- Test helpers\n"
    "def test_oracle() -> any\n"
    "  -- For internal testing. This function will output values that are manually\n"
    "  -- inserted with the C++ function oracle_send().\n"
    "\n"
    "def test_spy(any val)\n"
    "  -- For internal testing. This function will save inputs to a global list which\n"
    "  -- can be easily examined from C++ with test_spy_get_results().\n"
    "\n"
    "-- File module\n"
    "def file_exists(String filename) -> bool\n"
    "def file_version(String filename) -> int\n"
    "def file_read_text(String filename) -> String\n"
    "def file_changed(String filename) -> bool\n"
    "  ver = file_version(filename)\n"
    "  changed([filename ver])\n"
    "\n"
    "-- Reflect module\n"
    "def reflect_this_block() -> Block\n"
    "def reflect_caller() -> Term\n"
    "def reflect_kernel() -> Block\n"
    "\n"
    "-- Sys module\n"
    "def sys_arg(int index) -> String\n"
    "def sys_module_search_paths() -> List\n"
    "def _perf_stats_dump() -> Map\n"
    "\n"
    "\n"
    "def make_blob(int size) -> Blob\n"
    "def Blob.size(self) -> int\n"
    "def Blob.slice(self, int offset, int len) -> Blob\n"
    "def Blob.set_u8(self, int offset, int value)\n"
    "def Blob.set_u16(self, int offset, int value)\n"
    "def Blob.set_u32(self, int offset, int value)\n"
    "def Blob.set_i8(self, int offset, int value)\n"
    "def Blob.set_i16(self, int offset, int value)\n"
    "def Blob.set_i32(self, int offset, int value)\n"
    "def Blob.u8(self, int offset) -> int\n"
    "def Blob.u16(self, int offset) -> int\n"
    "def Blob.u32(self, int offset) -> int\n"
    "def Blob.i8(self, int offset) -> int\n"
    "def Blob.i16(self, int offset) -> int\n"
    "def Blob.i32(self, int offset) -> int\n"
    "\n"
    "def Blob.to_hex_string(self, int offset, int len) -> String\n"
    "  def to_hex_digit(int i)\n"
    "    if i >= 0 and i < 10\n"
    "      String.make.from_char_code('0'.char_code + i)\n"
    "    else\n"
    "      String.make.from_char_code('a'.char_code + i - 10)\n"
    "\n"
    "  result = \"\"\n"
    "  for i in offset..(offset+len)\n"
    "    byte = self.u8(i)\n"
    "    @result.append(to_hex_digit(byte // 16))\n"
    "    @result.append(to_hex_digit(byte % 16))\n"
    "  result\n"
    "\n"
    "def Block.dump(self)\n"
    "  -- Dump this block's raw contents to stdout.\n"
    "def Block.find_term(self, String name) -> Term\n"
    "  -- Find a term inside this Block with the given name.\n"
    "def Block.functions(self) -> List\n"
    "  -- Return a list of functions that occur inside this block.\n"
    "def Block.get_term(self, int index) -> Term\n"
    "  -- Fetch a term by index.\n"
    "def Block.get_static_errors(self) -> List\n"
    "  -- Return a raw list of static errors inside this block.\n"
    "def Block.get_static_errors_formatted(self) -> List\n"
    "  -- Return a formatted list of static errors inside this block.\n"
    "def Block.has_static_error(self) -> bool\n"
    "  -- Return whether this block has any static errors.\n"
    "def Block.id(self) -> int\n"
    "def Block.input(self, int index) -> Term\n"
    "  -- Fetch an input placeholder term by index.\n"
    "def Block.is_null(self) -> bool\n"
    "  -- Return whether this is a null Block reference.\n"
    "def Block.inputs(self) -> List\n"
    "  -- Return a list of input placeholder terms.\n"
    "def Block.link(self, Block lib)\n"
    "  -- Iterate through this block, looking for terms that have missing references.\n"
    "  -- For each missing reference, if a term with the expected name is found in 'lib',\n"
    "  -- then modify the term to use the named term in 'lib'.\n"
    "def Block.list_configs(self) -> List\n"
    "  -- Return a list of Terms that look like configs (named literal values).\n"
    "def Block.output(self, int index) -> Term\n"
    "  -- Return an output term by index.\n"
    "def Block.outputs(self) -> List\n"
    "  -- List of output placeholder terms.\n"
    "def Block.output_placeholder(self, int index) -> Term\n"
    "  -- Return an output placeholder term by index.\n"
    "def Block.owner(self) -> Term\n"
    "  -- Return the Term that owns this Block (may be null).\n"
    "def Block.parent(self) -> Block\n"
    "  -- Return the Block that owns this Block (may be null).\n"
    "def Block.primary_output(self) -> Term\n"
    "  -- Return the primary output.\n"
    "  self.output(0)\n"
    "def Block.property(self, Symbol key) -> any\n"
    "def Block.properties(self) -> Map\n"
    "def Block.source_filename(self) -> String\n"
    "def Block.statements(self) -> List\n"
    "  -- Return a list of Terms that are statements.\n"
    "def Block.terms(self) -> List\n"
    "  -- Return a list of this block's terms.\n"
    "def Block.term_named(self, String name) -> Term\n"
    "def Block.walk_terms(self) -> List\n"
    "  -- Return a list of this block's terms, and all nested terms.\n"
    "\n"
    "def Block.to_func(self) -> Func\n"
    "  Func.make(self)\n"
    "\n"
    "def Block.to_stack(self) -> Stack\n"
    "  self.to_func.to_stack\n"
    "\n"
    "def Block.name(self) -> String\n"
    "    self.owner.name\n"
    "\n"
    "def Block.is_method(self) -> bool\n"
    "  self.owner.property(\"syntax:methodDecl\") == true\n"
    "\n"
    "def Block.get_top_comments(self) -> List\n"
    "  out = []\n"
    "  for Term t in self.terms\n"
    "    if t.is_input_placeholder\n"
    "      continue\n"
    "    elif t.is_comment\n"
    "      s = t.property('comment')\n"
    "      if s == \"\"\n"
    "        break\n"
    "\n"
    "      out.append(t.property('comment'))\n"
    "    else\n"
    "      break\n"
    "\n"
    "  out\n"
    "\n"
    "def Block.call(self, any inputs :multiple) -> any\n"
    "  -- Invoke this Block with the given inputs.\n"
    "  self.to_func.apply(inputs)\n"
    "\n"
    "def Block.get_loop_index(self) -> Term\n"
    "  -- For a for-loop, return the index term\n"
    "  for term in self.terms\n"
    "    if term.function == loop_index.block\n"
    "      return term\n"
    "  error(\"Iterator not found in Block.get_iterator\")\n"
    "\n"
    "def Block.get_iterator(self) -> Term\n"
    "  -- For a for-loop, return the iterator term\n"
    "  for term in self.terms\n"
    "    if term.function == loop_get_element.block\n"
    "      return term\n"
    "  error(\"Iterator not found in Block.get_iterator\")\n"
    "\n"
    "def Block.if_block_cases(self) -> List\n"
    "  self.terms.filter((term) -> term.function.name == 'case')\n"
    "\n"
    "def Block.case_find_condition(self) -> Term\n"
    "  for term in self.terms\n"
    "    if term.function == case_condition_bool.block\n"
    "      return term\n"
    "  return null\n"
    "\n"
    "def Block.find_while_condition(self) -> Term\n"
    "  for term in self.terms\n"
    "    if term.function == loop_condition_bool.block\n"
    "      return term\n"
    "  return null\n"
    "\n"
    "struct Frame { Stack stack, int index }\n"
    "struct ModuleFrame { Block block, List registers }\n"
    "\n"
    "def Frame.active_value(self, Term) -> any\n"
    "def Frame.set_active_value(self, Term, any)\n"
    "def Frame.block(self) -> Block\n"
    "  -- Return the Block associated with this Frame.\n"
    "def Frame.current_term(self) -> Term\n"
    "  -- Fetch the term associated with the current program counter.\n"
    "def Frame.create_expansion(self, Term term) -> Frame\n"
    "  -- Create an expansion frame using the given Term.\n"
    "  -- Errors if the Term is not part of this frame's block.\n"
    "def Frame.height(self) -> int\n"
    "  -- Frame height, the distance from the base frame.\n"
    "def Frame.has_parent(self) -> bool\n"
    "def Frame.parent(self) -> Frame\n"
    "  -- Return this frame's parent.\n"
    "def Frame.pc(self) -> int\n"
    "  -- Fetch the current program counter (the interpreter's current position).\n"
    "def Frame.parentPc(self) -> int\n"
    "def Frame.register(self, int index) -> any\n"
    "  -- Fetch the value in the given register index.\n"
    "def Frame.registers(self) -> List\n"
    "  -- Fetch a list of all register values.\n"
    "def Frame.inputs(self) -> List\n"
    "  -- Returns a list of input register values\n"
    "def Frame.input(self, int nth) -> any\n"
    "  -- Returns the nth input register value\n"
    "def Frame.outputs(self) -> List\n"
    "  -- Returns a list of output register values\n"
    "def Frame.output(self, int nth) -> any\n"
    "  -- Returns the nth output register value\n"
    "def Frame.extract_state(self) -> Map\n"
    "  -- Returns the frame's state as a plain object (composite of maps and lists).\n"
    "\n"
    "def capture_stack() -> Stack\n"
    "  -- Returns a frozen copy of the currently executing stack.\n"
    "\n"
    "def Stack.apply(self, List inputs) -> any\n"
    "def Stack.block(self) -> Block\n"
    "  -- Returns the (topmost) block.\n"
    "def Stack.call(self, any inputs :multiple) -> any\n"
    "def Stack.copy(self) -> Stack\n"
    "def Stack.current_term(self) -> Term\n"
    "  self.top.current_term\n"
    "def Stack.dump(self)\n"
    "  -- Dumps a string representation to stdout.\n"
    "def Stack.dump_with_bytecode(self)\n"
    "def Stack.dump_compiled(self)\n"
    "def Stack.eval_on_demand(self, Term term) -> any\n"
    "def Stack.find_active_value(self, Term term) -> any\n"
    "def Stack.rethrow(self)\n"
    "  -- If the stack has an error, raise it in this context.\n"
    "  if self.has_error\n"
    "    error(self.error_message)\n"
    "def Stack.extract_state(self) -> Map\n"
    "def Stack.find_active_frame_for_term(self, Term term) -> Frame\n"
    "def Stack.id(self) -> int\n"
    "def Stack.init(self, Func func)\n"
    "def Stack.has_incoming_state(self) -> bool\n"
    "\n"
    "def Stack.env(self, name) -> any\n"
    "def Stack.env_map(self) -> Map\n"
    "def Stack.set_env(self, any name, any val)\n"
    "def Stack.set_env_map(self, Map map)\n"
    "\n"
    "def Stack.init_env(self)\n"
    "  self.set_env_map(Map.make)\n"
    "\n"
    "def Stack.modify_env(self, Func func)\n"
    "  self.set_env_map(func.call(self.env_map))\n"
    "\n"
    "def Stack.append_hack(self, any hack)\n"
    "  self.modify_env((env) -> env.list_append(:_hacks hack))\n"
    "\n"
    "def Stack.forward_env(self, names :multiple)\n"
    "  for name in names\n"
    "    self.set_env(name env(name))\n"
    "\n"
    "def Stack.init_channel(self, any name)\n"
    "  self.set_env(name, [])\n"
    "\n"
    "def Stack.read_channel(self, any name)\n"
    "  out = self.env_map.get(name)\n"
    "  self.set_env(name, [])\n"
    "  return out\n"
    "\n"
    "def Stack.get_watch_result(self, key) -> any\n"
    "def Stack.stack_push(self, Block b, List inputs)\n"
    "  -- Push a new frame, using the given block and input list.\n"
    "def Stack.stack_push2(self, Func func)\n"
    "  self.stack_push(func.block, [])\n"
    "def Stack.stack_pop(self)\n"
    "  -- Pop the topmost frame.\n"
    "def Stack.set_state_input(self, any)\n"
    "def Stack.get_state(self) -> any\n"
    "def Stack.migrate(self, Block from, Block to)\n"
    "def Stack.migrate_to(self, Func func)\n"
    "  -- Use 'func' as the new root, and migrate data and state.\n"
    "def Stack.reset(self)\n"
    "def Stack.reset_state(self)\n"
    "def Stack.restart(self)\n"
    "  -- Restart or \"rewind\" the stack, so the program counter is returned to the start\n"
    "  -- of the topmost frame. State is preserved.\n"
    "def Stack.run(self) -> Stack\n"
    "  -- Run the interpreter until either the topmost frame is finished, or an error\n"
    "  -- is raised.\n"
    "def Stack.frame(self, int depth) -> Frame\n"
    "  -- Return the Frame with the given depth. The top of the stack has depth 0.\n"
    "def Stack.frame_from_base(self, int height) -> Frame\n"
    "  -- Return the Frame with the given height.\n"
    "def Stack.frame_count(self) -> int\n"
    "\n"
    "def Stack.frames_from_top(self) -> List\n"
    "  for i in 0..self.frame_count\n"
    "    self.frame(i)\n"
    "\n"
    "def Stack.frames_from_start(self) -> List\n"
    "  for i in self.frame_count..0\n"
    "    self.frame(i-1)\n"
    "\n"
    "def Stack.top(self) -> Frame\n"
    "  -- Return the topmost Frame.\n"
    "  self.frame(0)\n"
    "\n"
    "def Stack.active_value(self, Term term) -> any\n"
    "  self.top.active_value(term)\n"
    "\n"
    "def Stack.set_active_value(self, Term term, any val)\n"
    "  self.top.set_active_value(term, val)\n"
    "\n"
    "def Stack.output(self, int index) -> any\n"
    "  -- Fetch the value in the nth output register.\n"
    "\n"
    "def Stack.errored(self) -> bool\n"
    "  -- Returns true if the interpreter has stopped due to error.\n"
    "\n"
    "def Stack.has_error(self) -> bool\n"
    "  self.errored\n"
    "\n"
    "def Stack.error_message(self) -> String\n"
    "  -- If there is a recorded error, returns a human-readable description string.\n"
    "\n"
    "def Stack.toString(self) -> String\n"
    "\n"
    "def make_stack(Func func) -> Stack\n"
    "  -- Create a new stack (deprecated name, see make_vm)\n"
    "\n"
    "def make_vm(Func func) -> Stack\n"
    "  -- Create a new Stack\n"
    "\n"
    "def Func.to_stack(self) -> Stack\n"
    "  make_stack(self)\n"
    "\n"
    "def repeat(any val, int count) -> List\n"
    "\n"
    "def int.to_hex_string(val) -> String\n"
    "\n"
    "def List.append(self, any item) -> List\n"
    "  -- Append an item to the end of this list.\n"
    "\n"
    "def List.clear(self) -> List\n"
    "  -- Return an empty list.\n"
    "  []\n"
    "\n"
    "def List.concat(self, List rightSide) -> List\n"
    "  -- Concatenate two lists.\n"
    "\n"
    "def List.contains(self, any val) -> bool\n"
    "  for i in self\n"
    "    if i == val\n"
    "      return true\n"
    "  return false\n"
    "\n"
    "def List.resize(self, int length) -> List\n"
    "  -- Resize the list to have the given length. If the length is increased, then\n"
    "  -- null values are appended on the right; if the length is decreased then\n"
    "  -- existing values on the right are dropped.\n"
    "\n"
    "def List.count(self) -> int\n"
    "  -- Return the number of elements in this list.\n"
    "\n"
    "def List.insert(self, int index, any val) -> List\n"
    "  -- Insert an element at the given index. If necessary, existing elements will\n"
    "  -- be shifted to the right to make room.\n"
    "  --\n"
    "  -- Example:\n"
    "  --   a = [1 2 3]\n"
    "  --   a.insert(1, 'X')\n"
    "  --   -- a now equals [1 'X' 2 3]\n"
    "\n"
    "def List.prepend(self, any val) -> List\n"
    "  self.insert(0, val)\n"
    "    \n"
    "def List.length(self) -> int\n"
    "  -- Return the number of elements in this list.\n"
    "\n"
    "def List.join(self, String joiner) -> String\n"
    "  -- Return a string constructed by converting every element to a string, and\n"
    "  -- concatenating those strings, each separated by 'joiner'.\n"
    "  --\n"
    "  -- Example:\n"
    "  --  [1 2 3].join(', ')\n"
    "  -- \n"
    "  -- Outputs: '1, 2, 3'\n"
    "\n"
    "def List.split(self, boundaryValue) -> List\n"
    "  out = [[]]\n"
    "  for item in self\n"
    "    if item == boundaryValue\n"
    "      @out.append([])\n"
    "    else\n"
    "      @out.modify(out.length - 1, (el) -> el.append(item))\n"
    "  out\n"
    "\n"
    "def List.slice(self, int start, int fin) -> List\n"
    "  -- Return a list constructed from the elements starting from index 'start', and\n"
    "  -- ending immediately before index 'fin'.\n"
    "  --\n"
    "  -- If either 'start' or 'fin' is negative, it's interpreted as an offset from the\n"
    "  -- end of the list.\n"
    "  --\n"
    "  -- Examples:\n"
    "  --  [1 2 3 4].slice(1 3)\n"
    "  --  Outputs: [2 3]\n"
    "  -- \n"
    "  --  [1 2 3 4].slice(0 -2)\n"
    "  --  Outputs: [1 2 3 4]\n"
    "\n"
    "def List.get(self, int index) -> any\n"
    "  -- Get an element by index.\n"
    "\n"
    "def List.get_opt(self, int index, any fallback) -> any\n"
    "  -- Get an element by index if it exists, otherwise return 'fallback'.\n"
    "  if index < 0 or index >= self.length\n"
    "    fallback\n"
    "  else\n"
    "    self.get(index)\n"
    "\n"
    "def List.set(self, int index, any val) -> List\n"
    "  -- Set an element by index.\n"
    "\n"
    "def List.remove(self, int index) -> List\n"
    "  -- Remove an element at the given index, shrinking the list by 1.\n"
    "\n"
    "def List.modify(self, int index, Func func)\n"
    "  self.set(index, func.call(self.get(index)))\n"
    "\n"
    "def List.add(self, any value) -> List\n"
    "  if is_compound(value)\n"
    "    for i,el in self { el + value[i] }\n"
    "  else\n"
    "    for el in self { el + value }\n"
    "\n"
    "def List.sub(self, any value) -> List\n"
    "  if is_compound(value)\n"
    "    for i,el in self { el - value[i] }\n"
    "  else\n"
    "    for el in self { el - value }\n"
    "\n"
    "def List.mult(self, any value) -> List\n"
    "  if is_compound(value)\n"
    "    for i,el in self { el * value[i] }\n"
    "  else\n"
    "    for el in self { el * value }\n"
    "\n"
    "def List.div(self, any value) -> List\n"
    "  if is_compound(value)\n"
    "    for i,el in self { el / value[i] }\n"
    "  else\n"
    "    for el in self { el / value }\n"
    "\n"
    "def List.cycle(self, int index) -> any\n"
    "  -- Get an element by index. If the index is out of bounds, then modulo the\n"
    "  -- index to one that exists.\n"
    "  self.get(mod(index, self.length))\n"
    "\n"
    "def List.empty(self) -> bool\n"
    "  -- Returns whether the list is empty.\n"
    "  self.length == 0\n"
    "\n"
    "def List.first(self) -> any\n"
    "  -- Returns the first element\n"
    "  self.get(0)\n"
    "\n"
    "def List.last(self) -> any\n"
    "  -- Returns the last element\n"
    "  self.get(self.length - 1)\n"
    "\n"
    "def List.pop(self) -> (List, any)\n"
    "  return self.slice(0, -1), self.last\n"
    "\n"
    "def List.filter(self, Func func) -> List\n"
    "  result = []\n"
    "  for i in self\n"
    "    if func.call(i)\n"
    "      @result.append(i)\n"
    "  result\n"
    "\n"
    "def List.flatten(self) -> List\n"
    "  -- Take a list of lists, and concat them all into one list.\n"
    "  out = []\n"
    "  for el in self\n"
    "    @out.concat(el)\n"
    "  out\n"
    "\n"
    "def List.each(self, Func func) -> List\n"
    "  for i in self\n"
    "    func.call(i)\n"
    "\n"
    "def List.apply(self, int index, Func func) -> List\n"
    "  self.set(index, func.call(self[index]))\n"
    "\n"
    "def Map.contains(self, any key) -> bool\n"
    "  -- Returns true if the map contains the given key.\n"
    "\n"
    "def Map.remove(self, any key) -> Map\n"
    "  -- Removes the given key from the map.\n"
    "\n"
    "def Map.get(self, any key) -> any\n"
    "  -- Gets the key associated with this value.\n"
    "\n"
    "def Map.get_opt(self, any key, any default) -> any\n"
    "  if self.contains(key)\n"
    "    self.get(key)\n"
    "  else\n"
    "    default\n"
    "    \n"
    "def Map.set(self, any key, any value) -> Map\n"
    "  -- Sets the value associated with this key.\n"
    "\n"
    "def Map.empty(self) -> bool\n"
    "  -- Whether the map has no values\n"
    "\n"
    "def Map.apply(@self, any key, Func func)\n"
    "  @self.set(key, func.call(self.get(key)))\n"
    "\n"
    "def Map.modify(@self, any key, Func func)\n"
    "  @self.set(key, func.call(self.get(key)))\n"
    "\n"
    "def Map.list_append(@self, any key, any value) -> Map\n"
    "  if self.contains(key)\n"
    "    @self.modify(key, (l) -> l.append(value))\n"
    "  else\n"
    "    @self.set(key, [value])\n"
    "\n"
    "def Map.bucketize(@self, List list, Func getKey) -> Map\n"
    "  for el in list\n"
    "    @self.list_append(getKey.call(el), el)\n"
    "\n"
    "  -- language defect, shouldn't be required:\n"
    "  self\n"
    "\n"
    "def Map.keys(self) -> List\n"
    "\n"
    "struct Set {\n"
    "  Map m\n"
    "}\n"
    "\n"
    "def Set.add(@self, element) -> Set\n"
    "  @self.m.set(element, true)\n"
    "\n"
    "def Set.contains(@self, element) -> bool\n"
    "  self.m.contains(element)\n"
    "\n"
    "def Set.remove(@self, element) -> Set\n"
    "  @self.m.remove(element)\n"
    "\n"
    "def Set.elements(self) -> List\n"
    "  self.m.keys\n"
    "\n"
    "def List.to_set(self) -> Set\n"
    "  set = make(Set)\n"
    "  for item in self\n"
    "    @set.add(item)\n"
    "  set\n"
    "\n"
    "def String.append(self, String right) -> String\n"
    "  -- Append a string to the right side.\n"
    "  str(self, right)\n"
    "    \n"
    "def String.char_at(self, int index) -> String\n"
    "  -- Get character at a given index. UTF unsafe.\n"
    "\n"
    "def String.index_of(self, String substr) -> (bool, int)\n"
    "  for i in 0..self.length\n"
    "    if self.substr(i, substr.length) == substr\n"
    "      return true, i\n"
    "  return false, 0\n"
    "\n"
    "def String.ends_with(self, String suffix) -> bool\n"
    "  -- Return true if this string ends with the given substring.\n"
    "\n"
    "def String.char_code(self) -> int\n"
    "def String.from_char_code(self, int code) -> String\n"
    "\n"
    "def String.length(self) -> int\n"
    "  -- Returns the string length.\n"
    "\n"
    "def String.slice(self, int start, int fin) -> String\n"
    "\n"
    "def String.starts_with(self, String prefix) -> bool\n"
    "  -- Returns true if the string starts with the given prefix.\n"
    "\n"
    "def String.split(self, String sep) -> List\n"
    "\n"
    "def String.substr(self, int start, int length) -> String\n"
    "\n"
    "def String.to_camel_case(self) -> String\n"
    "  -- Deprecated function\n"
    "\n"
    "def String.to_lower(self) -> String\n"
    "\n"
    "def String.to_upper(self) -> String\n"
    "\n"
    "def String.to_number(self) -> number\n"
    "def String.to_int(self) -> int\n"
    "\n"
    "def String.characters(self) -> List\n"
    "    out = for i in 0..(self.length)\n"
    "        self.char_at(i)\n"
    "    return out\n"
    "\n"
    "-- Type\n"
    "def Type.declaringTerm(self) -> Term\n"
    "def Type.cast(self, any value) -> any\n"
    "    value, success = cast(value, self)\n"
    "    if not(success)\n"
    "        error(str(\"Couldn't cast value \" value \" to type \" self.name))\n"
    "    value\n"
    "        \n"
    "def Type.make(self, any values :multiple) -> any\n"
    "def Type.name(self) -> String\n"
    "def Type.property(self, String name) -> any\n"
    "\n"
    "-- Term\n"
    "def term_ref(term :ref) -> Term\n"
    "  if term.function == _nonlocal.block\n"
    "    term = term.input(0)\n"
    "  term\n"
    "def Term.assign(self, any val)\n"
    "def Term.asint(self) -> int\n"
    "def Term.asfloat(self) -> number\n"
    "def Term.index(self) -> int\n"
    "def Term.contents(self) -> Block\n"
    "    -- Fetch the nested Block contents of this Term. The format and the meaning\n"
    "    -- of these contents is dictated by the term's function.\n"
    "def Term.is_input(self) -> bool\n"
    "def Term.is_null(self) -> bool\n"
    "    -- Returns whether this is a null Term reference.\n"
    "def Term.is_output(self) -> bool\n"
    "def Term.name(self) -> String\n"
    "    -- Return this term's local name. May be blank.\n"
    "def Term.parent(self) -> Block\n"
    "def Term.to_string(self) -> String\n"
    "def Term.unique_name(self) -> any\n"
    "def Term.function(self) -> Block\n"
    "    -- Fetch this term's function.\n"
    "def Term.get_type(self) -> Type\n"
    "    -- Fetch the declared type of this term.\n"
    "def Term.id(self) -> int\n"
    "def Term.value(self) -> any\n"
    "    -- For a value term, this fetches the actual value.\n"
    "def Term.set_value(self, any val)\n"
    "    -- For a value term, permanently change the value.\n"
    "def Term.input(self, int index) -> Term\n"
    "    -- Fetch an input term by index.\n"
    "def Term.inputs(self) -> List\n"
    "    -- Return a list of input terms.\n"
    "def Term.num_inputs(self) -> int\n"
    "    -- Return the number of inputs.\n"
    "def Term.source_location(self) -> Rect_i\n"
    "    -- Return a Rect_i that describes where this term occurs in its source file.\n"
    "def Term.location_string(self) -> String\n"
    "def Term.global_id(self) -> int\n"
    "    -- Fetch this term's global identifier.\n"
    "\n"
    "def Term.properties(self) -> Map\n"
    "\n"
    "def Term.has_property(self, Symbol key) -> bool\n"
    "def Term.property(self, Symbol key) -> any\n"
    "    -- Fetch a term property.\n"
    "def Term.property_opt(self, Symbol key, default) -> any\n"
    "    -- Fetch an optional term property.\n"
    "\n"
    "def Term.input_property(self, int index, Symbol key) -> any\n"
    "def Term.input_property_opt(self, int index, Symbol key, any default) -> any\n"
    "def Term.has_input_property(self, int index, Symbol key) -> bool\n"
    "\n"
    "def Term.is_value(self) -> bool\n"
    "def Term.is_function(self) -> bool\n"
    "    self.get_type == Func\n"
    "def Term.is_func_decl(self) -> bool\n"
    "    self.function == function_decl.block\n"
    "def Term.has_name(term) -> bool\n"
    "  term.name != ''\n"
    "def Term.is_hidden(term) -> bool\n"
    "  term.property_opt(:Hidden, false)\n"
    "def Term.is_statement(term) -> bool\n"
    "  term.property_opt(:Statement, false)\n"
    "def Term.is_type(self) -> bool\n"
    "    self.is_value and is_type(self.value)\n"
    "def Term.is_input_placeholder(self) -> bool\n"
    "    self.function == input_placeholder.block\n"
    "def Term.is_comment(self) -> bool\n"
    "    self.function == comment.block\n"
    "def Term.trace_dependents(self, Block untilBlock) -> List\n"
    "def Term.output(self, int index) -> Term\n"
    "  if index == 0\n"
    "    self\n"
    "  else\n"
    "    self.extra_output(index - 1)\n"
    "def Term.extra_output(self, int index)\n"
    "  self.parent.get_term(self.index + index + 1)\n"
    "\n"
    "def vec2(number x, number y)\n"
    "  Vec2.make(x y)\n"
    "\n"
    "def Vec2.add(self, rhs) -> Vec2\n"
    "  rhs, isVec = cast(rhs, Vec2)\n"
    "  if isVec\n"
    "    [self.x + rhs.x, self.y + rhs.y]\n"
    "  else\n"
    "    [self.x + rhs, self.y + rhs]\n"
    "\n"
    "def Vec2.sub(self, rhs) -> Vec2\n"
    "  rhs, isVec = cast(rhs, Vec2)\n"
    "  if isVec\n"
    "    [self.x - rhs.x, self.y - rhs.y]\n"
    "  else\n"
    "    [self.x - rhs, self.y - rhs]\n"
    "\n"
    "def Vec2.mult(self, rhs) -> Vec2\n"
    "  rhs, isVec = cast(rhs, Vec2)\n"
    "  if isVec\n"
    "    [self.x * rhs.x, self.y * rhs.y]\n"
    "  else\n"
    "    [self.x * rhs, self.y * rhs]\n"
    "\n"
    "def Vec2.div(self, rhs) -> Vec2\n"
    "  rhs, isVec = cast(rhs, Vec2)\n"
    "  if isVec\n"
    "    [self.x / rhs.x, self.y / rhs.y]\n"
    "  else\n"
    "    [self.x / rhs, self.y / rhs]\n"
    "    \n"
    "def Vec2.distance(self, Vec2 b) -> number\n"
    "  -- Returns the distance between self and b.\n"
    "  sqrt(sqr(self.x - b.x) + sqr(self.y - b.y))\n"
    "\n"
    "def Vec2.distance_sqr(self, Vec2 b) -> number\n"
    "  sqr(self.x - b.x) + sqr(self.y - b.y)\n"
    "\n"
    "def Vec2.magnitude(self) -> number\n"
    "  -- Return the magnitude of this point, aka the distance to the origin.\n"
    "  sqrt(sqr(self.x) + sqr(self.y))\n"
    "\n"
    "def Vec2.magnitude_sqr(self) -> number\n"
    "  sqr(self.x) + sqr(self.y)\n"
    "\n"
    "def Vec2.norm(self) -> Vec2\n"
    "  -- Returns the point normalized to be along the unit circle.\n"
    "  m = self.magnitude\n"
    "  [self.x / m, self.y / m]\n"
    "\n"
    "def Vec2.perpendicular(self) -> Vec2\n"
    "  -- Returns a perpendicular vector, rotated clockwise.\n"
    "  [self.y -self.x]\n"
    "\n"
    "def Vec2.translate(self, Vec2 b) -> Vec2\n"
    "  [self.x + b.x, self.y + b.y]\n"
    "\n"
    "def Vec2.to_rect_center(self, Vec2 size) -> Rect\n"
    "  -- Returns a Rect with this point as the center, and the given size.\n"
    "  size_half = (size * 0.5) -> Vec2.cast\n"
    "  [self.x - size_half.x,\n"
    "      self.y - size_half.y, self.x + size_half.x, self.y + size_half.y]\n"
    "\n"
    "def Vec2.to_rect_topleft(self, Vec2 size) -> Rect\n"
    "  -- Returns a Rect with this point as the top-left, and the given size.\n"
    "  [self.x, self.y, self.x + size.x, self.y + size.y]\n"
    "\n"
    "def Vec2.delta(self) -> Vec2\n"
    "  -- Stateful function, returns the point difference since the last step.\n"
    "  state Vec2 prev = self\n"
    "  result = [self.x - prev.x, self.y - prev.y]\n"
    "  prev = self\n"
    "  result\n"
    "\n"
    "def Vec2.rotate(self, number rotation) -> Vec2\n"
    "  -- Return the point rotated around [0 0] by the given angle.\n"
    "  [self.x*cos(rotation) - self.y*sin(rotation), self.x*sin(rotation)+self.y*cos(rotation)]\n"
    "\n"
    "def vec3(number x, number y, number z)\n"
    "  Vec3.make(x y z)\n"
    "def Vec3.add(self, Vec3 b) -> Vec3\n"
    "  [self.x + b.x, self.y + b.y, self.z + b.z]\n"
    "def Vec3.sub(self, Vec3 b) -> Vec3\n"
    "  [self.x - b.x, self.y - b.y, self.z - b.z]\n"
    "def Vec3.mult(self, number s) -> Vec3\n"
    "  [self.x * s, self.y * s, self.z * s]\n"
    "def Vec3.div(self, number s) -> Vec3\n"
    "  [self.x / s, self.y / s, self.z / s]\n"
    "\n"
    "def vec4(number x, number y, number z, number w)\n"
    "  Vec4.make(x y z w)\n"
    "\n"
    "def Rect.add(self, Rect b) -> Rect\n"
    "  [self.x1 + b.x1, self.y1 + b.y1, self.x2 + b.x2, self.y2 + b.y2]\n"
    "def Rect.sub(self, Rect b) -> Rect\n"
    "  [self.x1 - b.x1, self.y1 - b.y1, self.x2 - b.x2, self.y2 - b.y2]\n"
    "def Rect.mult(self, number s) -> Rect\n"
    "  [self.x1 * s, self.y1 * s, self.x2 * s, self.y2 * s]\n"
    "def Rect.div(self, number s) -> Rect\n"
    "  [self.x1 / s, self.y1 / s, self.x2 / s, self.y2 / s]\n"
    "\n"
    "def Rect.width(self) -> number\n"
    "  self.x2 - self.x1\n"
    "def Rect.height(self) -> number\n"
    "  self.y2 - self.y1\n"
    "def Rect.size(self) -> Vec2\n"
    "  [self.width self.height]\n"
    "def Rect.left(self) -> number\n"
    "  self.x1\n"
    "def Rect.top(self) -> number\n"
    "  self.y1\n"
    "def Rect.right(self) -> number\n"
    "  self.x2\n"
    "def Rect.bottom(self) -> number\n"
    "  self.y2\n"
    "def Rect.top_left(self) -> Vec2\n"
    "  -- Returns the top-left coordinates as a Vec2.\n"
    "  [self.x1 self.y1]\n"
    "def Rect.top_right(self) -> Vec2\n"
    "  -- Returns the top-rigth coordinates as a Vec2.\n"
    "  [self.x2 self.y1]\n"
    "def Rect.bottom_left(self) -> Vec2\n"
    "  -- Returns the bottom-left coordinates as a Vec2.\n"
    "  [self.x1 self.y2]\n"
    "def Rect.bottom_center(self) -> Vec2\n"
    "  [(self.x1+self.x2)/2, self.y2]\n"
    "def Rect.bottom_right(self) -> Vec2\n"
    "  -- Returns the bottom-right coordinates as a Vec2.\n"
    "  [self.x2 self.y2]\n"
    "def Rect.center(self) -> Vec2\n"
    "  -- Returns the rectangle's center as a Vec2\n"
    "  [(self.x1 + self.x2) / 2, (self.y1 + self.y2) / 2]\n"
    "def Rect.points_cw(self) -> List\n"
    "  [self.top_left self.top_right self.bottom_right self.bottom_left]\n"
    "def Rect.points_ccw(self) -> List\n"
    "  [self.top_left self.bottom_left self.bottom_right self.top_right]\n"
    "\n"
    "def Rect.intersects(self, Rect b) -> bool\n"
    "  -- Return whether the two rectangles intersect.\n"
    "  intersects_on_x = (self.x2 > b.x1) and (b.x2 > self.x1)\n"
    "  intersects_on_y = (self.y2 > b.y1) and (b.y2 > self.y1)\n"
    "  intersects_on_x and intersects_on_y\n"
    "\n"
    "def Rect.translate(self, Vec2 p) -> Rect\n"
    "  [self.x1 + p.x, self.y1 + p.y, self.x2 + p.x, self.y2 + p.y]\n"
    "\n"
    "def Rect.contains(self, Vec2 p) -> bool\n"
    "  p.x >= self.x1 and p.y >= self.y1 and p.x < self.x2 and p.y < self.y2\n"
    "\n"
    "def Rect.grow(self, Vec2 size) -> Rect\n"
    "  [self.x1 - size.x, self.y1 - size.y, self.x2 + size.x, self.y2 + size.y]\n"
    "\n"
    "def Rect.grow_s(self, number size) -> Rect\n"
    "  [self.x1 - size, self.y1 - size, self.x2 + size, self.y2 + size]\n"
    "\n"
    "def Rect.subtractFrom(self, Symbol side, number dimension) -> (Rect, Rect)\n"
    "  if side == :top\n"
    "    min(@dimension, self.height)\n"
    "    out = self.set_y2(dimension)\n"
    "    self.y1 += dimension\n"
    "    return self, out\n"
    "  if side == :left\n"
    "    min(@dimension, self.width)\n"
    "    out = self.set_x2(self.x1 + dimension)\n"
    "    self.x1 += dimension\n"
    "    return self, out\n"
    "  if side == :right\n"
    "    min(@dimension, self.width)\n"
    "    out = self.set_x1(self.x2 - dimension)\n"
    "    self.x2 -= dimension\n"
    "    return self, out\n"
    "  if side == :bottom\n"
    "    min(@dimension, self.height)\n"
    "    out = self.set_y1(self.y2 - dimension)\n"
    "    self.y2 -= dimension\n"
    "    return self, out\n"
    "  error(str('Unrecognized side: ' side))\n"
    "\n"
    "def sum(List numbers) -> number\n"
    "  result = 0\n"
    "  for i in numbers\n"
    "    result += i\n"
    "  result\n"
    "    \n"
    "def zip(List left, List right) -> List\n"
    "  for i,l in left\n"
    "    [l, right.get_opt(i, null)]\n"
    "\n"
    "-- Stateful functions\n"
    "\n"
    "def cached(Func refresh) -> any\n"
    "  -- Cache a function's result, the function will only be (re)evaluated as needed.\n"
    "\n"
    "  state Func prev_refresh\n"
    "  state prev_version = global_script_version()\n"
    "  state out\n"
    "  if prev_refresh != refresh or prev_version != global_script_version()\n"
    "    prev_refresh = refresh\n"
    "    prev_version = global_script_version()\n"
    "    out = refresh.call()\n"
    "  out\n"
    "\n"
    "def changed(any val) -> bool\n"
    "  -- Stateful function; returns true if the value has changed since the\n"
    "  -- previous step.\n"
    "  state any prev = null\n"
    "  result = prev != val\n"
    "  prev = val\n"
    "  result\n"
    "\n"
    "def delta(number val) -> number\n"
    "  -- Stateful function, return the difference between this value and the value from\n"
    "  -- the previous call.\n"
    "  state number prev = val\n"
    "  result = val - prev\n"
    "  prev = val\n"
    "  result\n"
    "\n"
    "def toggle(bool tog) -> bool\n"
    "  -- Stateful function, returns a boolean status. Every frame the function is called\n"
    "  -- with (true), the result flips. Starts out false.\n"
    "\n"
    "  state bool s = false\n"
    "  if tog\n"
    "    s = not(s)\n"
    "  s\n"
    "\n"
    "def approach(number target, number maximum_change) -> number\n"
    "  -- Stateful function, returns a result which approaches 'target'. Each time the\n"
    "  -- function is called, the result will change at most by 'maximum_change'.\n"
    "  state current = target\n"
    "  if target > current\n"
    "    current += min(maximum_change, target - current)\n"
    "  elif target < current\n"
    "    current -= min(maximum_change, current - target)\n"
    "  current\n"
    "\n"
    "def once() -> bool\n"
    "  -- Stateful function, returns true the first time it's called, and false thereafter.\n"
    "  state bool s = true\n"
    "  result = s\n"
    "  s = false\n"
    "  result\n"
    "\n"
    "def cycle(int max) -> int\n"
    "  -- Stateful function, cycles though the integers from 0 to (max - 1). When the\n"
    "  -- maximum is reached, the function will start again at 0.\n"
    "\n"
    "  state int counter = 0\n"
    "  if counter >= max\n"
    "    counter = 0\n"
    "  result = counter\n"
    "  counter += 1\n"
    "  result\n"
    "\n"
    "def cycle_elements(List list) -> any\n"
    "  -- Stateful function, cycles through each item of 'list' one at a time.\n"
    "  list[cycle(length(list))]\n"
    "\n"
    "def random_element(List list) -> any\n"
    "  -- Return a random element from the given list, with equal probability per element.\n"
    "  list[rand_i(length(list))]\n"
    "\n"
    "def seed() -> number\n"
    "  -- Stateful function, returns a random number 0..1 which doesn't change after\n"
    "  -- initialization.\n"
    "  state number s = rand()\n"
    "  s\n"
    "\n"
    "-- Math utility functions\n"
    "def polar(number angle) -> Vec2\n"
    "  -- Return a point on the unit circle with the given angle.\n"
    "  [cos(angle) sin(angle)]\n"
    "\n"
    "def random_norm_vector() -> Vec2\n"
    "  -- Return a random normalized vector.\n"
    "  angle = rand() * 360\n"
    "  [cos(angle) sin(angle)]\n"
    "\n"
    "def rect(number x1, number y1, number x2, number y2) -> Rect\n"
    "  [x1 y1 x2 y2]\n"
    "\n"
    "def bezier3(number t, List points) -> Vec2\n"
    "  -- Quadratic bezier curve, with 3 control points. t must be in the range of [0, 1].\n"
    "  p0 = points[0] -> Vec2.cast\n"
    "  p1 = points[1] -> Vec2.cast\n"
    "  p2 = points[2] -> Vec2.cast\n"
    "  (p0 * sqr(1 - t) + p1 * (2 * t * (1 - t)) + p2 * sqr(t))\n"
    "\n"
    "def bezier4(number t, List points) -> Vec2\n"
    "  -- Cubic bezier curve, with 4 control points. t must be in the range of [0, 1].\n"
    "  p0 = points[0] -> Vec2.cast\n"
    "  p1 = points[1] -> Vec2.cast\n"
    "  p2 = points[2] -> Vec2.cast\n"
    "  p3 = points[3] -> Vec2.cast\n"
    "  (p0 * cube(1 - t) + p1 * (3 * t * sqr(1 - t)) + p2 * sqr(t) * (3 * (1 - t)) + p3 * cube(t))\n"
    "\n"
    "def smooth_in_out(number t, number smooth_in, number smooth_out) -> number\n"
    "  bezier4(t, [[0 0] [smooth_in, 0] [1 - smooth_out, 1] [1 1]]).y\n"
    "\n"
    "def clamp(number x, number minVal, number maxVal) -> number\n"
    "  -- Return a clamped value. If x is less than 'minVal' then return 'minVal', if it's\n"
    "  -- greater than 'maxVal' then return 'maxVal', otherwise return the original 'x'.\n"
    "  min(max(x, minVal), maxVal)\n"
    "\n"
    "def smoothstep(number x, number edge0, number edge1) -> number\n"
    "  -- Smooth interpolation func, see en.wikipedia.org/wiki/Smoothstep\n"
    "  x = clamp((x - edge0)/(edge1-edge0), 0, 1)\n"
    "  x*x*(3 - 2*x)\n"
    "\n"
    "def smootherstep(number x, number edge0, number edge1) -> number\n"
    "  -- Alternative to smoothstep by Ken Perlin, see en.wikipedia.org/wiki/Smoothstep\n"
    "  x = clamp((x - edge0)/(edge1-edge0), 0, 1)\n"
    "  x*x*x*(x*(x*6 - 15) + 10)\n"
    "\n"
    "def random_color() -> Color\n"
    "  -- Return a color with random RGB components.\n"
    "  [rand() rand() rand() 1.0]\n"
    "\n"
    "def hsv_to_rgb(List hsv) -> Color\n"
    "  -- Convert HSV components to an RGB Color\n"
    "\n"
    "  h = hsv[0] -> number.cast\n"
    "  s = hsv[1] -> number.cast\n"
    "  v = hsv[2] -> number.cast\n"
    "\n"
    "  if s == 0\n"
    "      -- grey\n"
    "      return [v v v 1]\n"
    "\n"
    "  h *= 6\n"
    "  i = floor(h)\n"
    "  f = h - i\n"
    "  p = v * (1 - s)\n"
    "  q = v * (1 - s * f)\n"
    "  t = v * (1 - s * (1 - f))\n"
    "\n"
    "  if i == 0\n"
    "    [v t p 1]\n"
    "  elif i == 1\n"
    "    [q v p 1]\n"
    "  elif i == 2\n"
    "    [p v t 1]\n"
    "  elif i == 3\n"
    "    [p q v 1]\n"
    "  elif i == 4\n"
    "    [t p v 1]\n"
    "  elif i == 5\n"
    "    [v p q 1]\n"
    "  else\n"
    "    [0 0 0 0]\n"
    "\n"
    "def hsl_color(number h, number s, number l) -> Color\n"
    "  if s == 0\n"
    "    [1 1 1 1]\n"
    "  else\n"
    "    def hue_to_rgb(number p, number q, number t)\n"
    "      mod(@t 1)\n"
    "      if t < 1/6\n"
    "        p + (q - p) * 6 * t\n"
    "      elif t < 1/2\n"
    "        q\n"
    "      elif t < 2/3\n"
    "        p + (q - p) * (2/3 - t) * 6\n"
    "      else\n"
    "        p\n"
    "\n"
    "    q = if l < 0.5\n"
    "      l * (1 + s)\n"
    "    else\n"
    "      l + s - l * s\n"
    "\n"
    "    p = 2 * l - q\n"
    "    r = hue_to_rgb(p, q, h + 1/3)\n"
    "    g = hue_to_rgb(p, q, h)\n"
    "    b = hue_to_rgb(p, q, h - 1/3)\n"
    "    [r g b 1]\n"
    "\n"
    "def Color.add(self, any value) -> Color\n"
    "  for i in self { i + value }\n"
    "def Color.sub(self, any value) -> Color\n"
    "  for i in self { i - value }\n"
    "def Color.mult(self, any value) -> Color\n"
    "  for i in self { i * value }\n"
    "def Color.div(self, any value) -> Color\n"
    "  for i in self { i / value }\n"
    "\n"
    "def Color.blend(self, Color rhs, number ratio) -> Color\n"
    "  -- Return a color that is blended between self and rhs. If ratio is 0.0 we'll\n"
    "  -- return 'self', if it's 1.0 we'll return 'rhs'.\n"
    "\n"
    "  max(@ratio, 0.0)\n"
    "  min(@ratio, 1.0)\n"
    "\n"
    "  if ratio == 0.0\n"
    "    self\n"
    "  elif ratio == 1.0\n"
    "    rhs\n"
    "  else\n"
    "    self + (rhs - self) * ratio\n"
    "\n"
    "def Color.lighten(self, number factor) -> Color\n"
    "  -- Linearly lighten each component of the color.\n"
    "  [ min(self.r + factor, 1.0)\n"
    "    min(self.g + factor, 1.0)\n"
    "    min(self.b + factor, 1.0)\n"
    "    self.a]\n"
    "        \n"
    "def Color.darken(self, number factor) -> Color\n"
    "  -- Linearly darken each component of the color.\n"
    "  [ max(self.r - factor, 0.0)\n"
    "    max(self.g - factor, 0.0)\n"
    "    max(self.b - factor, 0.0)\n"
    "    self.a]\n"
    "\n"
    "def weighted_rand(List choices :multiple) -> any\n"
    "  total = 0\n"
    "  for choice in choices\n"
    "    weight = choice[0]\n"
    "    total += weight\n"
    "\n"
    "  r = rand() * total\n"
    "  for choice in choices\n"
    "    r -= choice[0]\n"
    "    if r < 0\n"
    "      return choice[1]\n"
    "\n"
    "  return null\n"
    "\n"
    "def rand_gaussian()\n"
    "  -- Box-Muller transform\n"
    "\n"
    "  rand1 = -2 * log(rand())\n"
    "  rand2 = (rand()) * 360\n"
    "  sqrt(rand1) * cos(rand2)\n"
    "\n"
    "def number.map(x, Vec2 fromRange, Vec2 toRange)\n"
    "  ratio = (x - fromRange[0]) / (fromRange[1] - fromRange[0])\n"
    "  (toRange[0] + ratio * (toRange[1] - toRange[0]))\n"
    "\n"
    "def int.map(x, Vec2 fromRange, Vec2 toRange)\n"
    "  ratio = (x - fromRange[0]) / (fromRange[1] - fromRange[0])\n"
    "  (toRange[0] + ratio * (toRange[1] - toRange[0]))\n"
    "\n"
    "def noise(number x)\n"
    "  -- Perlin noise\n"
    "\n"
    "-- Codechange objects\n"
    "def codechange_set_value(Term target, any newValue) -> List\n"
    "  [:set_value target newValue]\n"
    "\n"
    "def debug_break()\n";

const char* BUILTIN_MODULE_json = 
    "\n"
    "def is_digit(String s)\n"
    "  if s.length < 1\n"
    "    return false\n"
    "  (s.char_code >= '0'.char_code) and (s.char_code <= '9'.char_code)\n"
    "\n"
    "struct Reader {\n"
    "  String str\n"
    "  int pos\n"
    "}\n"
    "\n"
    "def Reader.empty(self) -> bool\n"
    "  self.pos >= self.str.length\n"
    "\n"
    "def Reader.next(self) -> String\n"
    "  self.str.char_at(self.pos)\n"
    "\n"
    "def Reader.advance(@self)\n"
    "  self.pos += 1\n"
    "\n"
    "def Reader.consumeWhitespace(@self)\n"
    "  while self.next == ' '\n"
    "    @self.advance\n"
    "\n"
    "  self\n"
    "\n"
    "def Reader.matches(self, str) -> bool\n"
    "  self.str.substr(self.pos, str.length) == str\n"
    "\n"
    "def Reader.consume(@self, str)\n"
    "  self.pos += str.length\n"
    "\n"
    "def Reader.parse_string(self) -> (Reader, any)\n"
    "  @self.advance\n"
    "\n"
    "  p = self.pos\n"
    "  while self.next != '\"'\n"
    "    if self.empty\n"
    "      error(\"Unexpected end of string, looking for: \\\"\")\n"
    "\n"
    "    -- TODO: handle escapes and unicode\n"
    "    @self.advance\n"
    "\n"
    "  result = self.str.slice(p, self.pos)\n"
    "  @self.advance\n"
    "  return self, result\n"
    "\n"
    "def Reader.parse_value(self) -> (Reader, any)\n"
    "  @self.consumeWhitespace\n"
    "\n"
    "  result = null\n"
    "\n"
    "  if self.next == '['\n"
    "    @self.advance\n"
    "    @self.consumeWhitespace\n"
    "    \n"
    "    result = []\n"
    "\n"
    "    first = true\n"
    "    while self.next != ']'\n"
    "      @self.consumeWhitespace\n"
    "      if self.empty\n"
    "        error(\"Unexpected end of string, looking for: ] or ,\")\n"
    "\n"
    "      if not first\n"
    "        if self.next != ','\n"
    "          error(\"Expected: ,\" self)\n"
    "        @self.advance\n"
    "        @self.consumeWhitespace\n"
    "\n"
    "      val = @self.parse_value\n"
    "      @result.append(val)\n"
    "      first = false\n"
    "\n"
    "      @self.consumeWhitespace\n"
    "\n"
    "    @self.advance\n"
    "  if self.next == '{'\n"
    "    @self.advance\n"
    "    @self.consumeWhitespace\n"
    "\n"
    "    result = Map.make\n"
    "\n"
    "    first = true\n"
    "    while self.next != '}'\n"
    "      @self.consumeWhitespace\n"
    "      if self.empty\n"
    "        error(\"Unexpected end of string, looking for: } or ,\")\n"
    "\n"
    "      if not first\n"
    "        if self.next != ','\n"
    "          error('Expected ,' self)\n"
    "        @self.advance\n"
    "        @self.consumeWhitespace\n"
    "\n"
    "      key = @self.parse_string\n"
    "      @self.consumeWhitespace\n"
    "\n"
    "      if self.next != ':'\n"
    "        error('Expected :')\n"
    "      @self.advance\n"
    "      @self.consumeWhitespace\n"
    "\n"
    "      val = @self.parse_value\n"
    "\n"
    "      @result.set(key,val)\n"
    "      first = false\n"
    "\n"
    "    @self.advance\n"
    "\n"
    "  elif self.matches(\"true\")\n"
    "    @self.consume(\"true\")\n"
    "    result = true\n"
    "\n"
    "  elif self.matches(\"false\")\n"
    "    @self.consume(\"false\")\n"
    "    result = false\n"
    "\n"
    "  elif self.matches(\"null\")\n"
    "    @self.consume(\"null\")\n"
    "    result = null\n"
    "\n"
    "  elif is_digit(self.next) or self.next == '-'\n"
    "\n"
    "    p = self.pos\n"
    "\n"
    "    @self.advance\n"
    "    while is_digit(self.next)\n"
    "      @self.advance\n"
    "\n"
    "    foundDot = false\n"
    "    if self.next == \".\"\n"
    "      foundDot = true\n"
    "      @self.advance\n"
    "\n"
    "      while is_digit(self.next)\n"
    "        @self.advance\n"
    "\n"
    "    -- TODO: exponent notation\n"
    "\n"
    "    result = self.str.slice(p, self.pos)\n"
    "    assert(is_string(result))\n"
    "\n"
    "    if foundDot\n"
    "      @result.to_number\n"
    "    else\n"
    "      @result.to_int\n"
    "\n"
    "  elif self.next == '\"'\n"
    "    result = @self.parse_string\n"
    "\n"
    "  return self, result\n"
    "\n"
    "def parse(String str) -> any\n"
    "  reader = Reader.make(str 0)\n"
    "  result = @reader.parse_value\n"
    "  return result\n"
    "\n"
    "def String.quote(self) -> String\n"
    "  -- TODO: insert escapes as needed\n"
    "  str('\"' self '\"')\n"
    "\n"
    "def write(val) -> String\n"
    "  if is_list(val)\n"
    "    str('[' (for el in val { write(el) }).join(', ') ']')\n"
    "  elif is_map(val)\n"
    "    str('{' (for k in val.keys { str(k.quote, \": \", write(val.get(k))) }).join(', ') '}')\n"
    "  elif is_string(val)\n"
    "    val.quote\n"
    "  else\n"
    "    to_string(val)\n";

const char* BUILTIN_MODULE_error_trace = 
    "\n"
    "require indent_writer\n"
    "\n"
    "def Term.short_location_str(self) -> String\n"
    "  loc = self.source_location\n"
    "  str(self.parent.source_filename ':' loc.y1)\n"
    "\n"
    "def Stack.frames_from_top(self) -> List\n"
    "  for i in 0..self.frame_count\n"
    "    self.frame(i)\n"
    "\n"
    "def Stack.frames_from_start(self) -> List\n"
    "  for i in self.frame_count..0\n"
    "    self.frame(i-1)\n"
    "\n"
    "def Frame.next(frame) -> any\n"
    "  if frame.height + 1 < frame.stack.frame_count\n"
    "    frame.stack.frame_from_base(frame.height + 1)\n"
    "  else\n"
    "    null\n"
    "\n"
    "def trace_to_string(Stack stack) -> String\n"
    "  writer = indent_writer.new\n"
    "\n"
    "  for frame in stack.frames_from_start\n"
    "\n"
    "    if frame == stack.top\n"
    "      continue\n"
    "\n"
    "    term = frame.current_term\n"
    "\n"
    "    @writer.write('[' term.short_location_str '] ')\n"
    "\n"
    "    @writer.writeln\n"
    "    @writer.indent\n"
    "\n"
    "  @writer.write('Error: ' stack.top.register(stack.top.pc))\n"
    "\n"
    "  writer.toString\n";

const char* BUILTIN_MODULE_matrix = 
    "\n"
    "struct Mat2 {\n"
    "  List col0\n"
    "  List col1\n"
    "}\n"
    "struct Mat3 {\n"
    "  List col0\n"
    "  List col1\n"
    "  List col2\n"
    "}\n"
    "struct Mat4 {\n"
    "  List col0\n"
    "  List col1\n"
    "  List col2\n"
    "  List col3\n"
    "}\n"
    "\n"
    "def make_mat3() -> Mat3\n"
    "  Mat3.make([1.0 0.0 0.0] [0.0 1.0 0.0] [0.0 0.0 1.0])\n"
    "\n"
    "def make_scale3(Vec2 vec) -> Mat3\n"
    "  Mat3.make([vec.x 0.0 0.0] [0.0 vec.y 0.0] [0.0 0.0 1.0])\n"
    "\n"
    "def make_translate3(Vec2 vec) -> Mat3\n"
    "  Mat3.make([1.0 0.0 0.0] [0.0 1.0 0.0] [vec.x vec.y 1.0])\n"
    "\n"
    "def col3_mult(List left, List right) -> number\n"
    "  left[0] * right[0] + left[1] * right[1] + left[2] * right[2]\n"
    "\n"
    "def Mat3.mult(self, Mat3 rhs) -> Mat3\n"
    "  lrow0 = [self.col0[0] self.col1[0] self.col2[0]]\n"
    "  lrow1 = [self.col0[1] self.col1[1] self.col2[1]]\n"
    "  lrow2 = [self.col0[2] self.col1[2] self.col2[2]]\n"
    "\n"
    "  rcol0 = rhs.col0\n"
    "  rcol1 = rhs.col1\n"
    "  rcol2 = rhs.col2\n"
    "\n"
    "  Mat3.make([col3_mult(lrow0 rcol0) col3_mult(lrow1 rcol0) col3_mult(lrow2 rcol0)]\n"
    "    [col3_mult(lrow0 rcol1) col3_mult(lrow1 rcol1) col3_mult(lrow2 rcol1)]\n"
    "    [col3_mult(lrow0 rcol2) col3_mult(lrow1 rcol2) col3_mult(lrow2 rcol2)])\n"
    "\n"
    "def Mat3.scale(self, Vec2 vec) -> Mat3\n"
    "  self.mult(make_scale3(vec))\n"
    "\n"
    "def Mat3.translate(self, Vec2 vec) -> Mat3\n"
    "  self.mult(make_translate3(vec))\n";

const char* BUILTIN_MODULE_static_checking = 
    "\n"
    "struct Check {\n"
    "  List errors\n"
    "}\n"
    "\n"
    "def Check.term(@self, Term term)\n"
    "  if term.function.is_null\n"
    "    @self.errors.append([term :null_function])\n"
    "\n"
    "  if term.function == unknown_function.block\n"
    "    @self.errors.append([term :unknown_function])\n"
    "\n"
    "  if term.function == unknown_identifier.block\n"
    "    @self.errors.append([term :unknown_identifier])\n"
    "\n"
    "  if term.function == syntax_error.block\n"
    "    msg = term.input(0).value\n"
    "    @self.errors.append([term msg])\n"
    "\n"
    "def Check.block(@self, Block block)\n"
    "  for term in block.terms\n"
    "    @self.term(term)\n"
    "  self\n"
    "\n"
    "def check_block(Block block) -> List\n"
    "  result = Check.make.block(block)\n"
    "  result.errors\n"
    "\n"
    "def check_block_and_report(Block block)\n"
    "  errors = check_block(block)\n"
    "  if errors.length == 0\n"
    "    print(\"No errors found\")\n"
    "  else\n"
    "    print(errors.length \" error(s) found:\")\n"
    "    for error in errors\n"
    "      print('  ' format_error(error))\n"
    "\n"
    "def format_error(error) -> String\n"
    "  term = error[0]\n"
    "  msg = error[1]\n"
    "\n"
    "  result = ''\n"
    "  str(@result term.location_string ' ')\n"
    "\n"
    "  switch msg\n"
    "    case :null_function\n"
    "      str(@result 'NULL function reference')\n"
    "    case :unknown_function\n"
    "      str(@result 'Unknown function: ' term.property_opt(:Syntax_FunctionName ''))\n"
    "    case :unknown_identifier\n"
    "      str(@result 'Unknown identifier: ' term.name)\n"
    "    else\n"
    "      str(@result msg)\n"
    "\n"
    "  result\n";

const char* BUILTIN_MODULE_source_repro = 
    "\n"
    "struct SourceRepro {\n"
    "  List phrases\n"
    "}\n"
    "\n"
    "struct Phrase {\n"
    "  Symbol type\n"
    "  any val\n"
    "}\n"
    "\n"
    "def Phrase.term(self) -> Term\n"
    "  self.val\n"
    "\n"
    "def Phrase.block(self) -> Block\n"
    "  self.val\n"
    "\n"
    "def Phrase.text(self) -> String\n"
    "  switch\n"
    "    case type(self.val) == String\n"
    "      self.val\n"
    "    case self.type == :name_ref\n"
    "      self.term.name\n"
    "    case self.type == :block_start or self.type == :block_end\n"
    "      ''\n"
    "    else\n"
    "      self.val | to_string\n"
    "\n"
    "def new()\n"
    "  SourceRepro.make([] 1 0)\n"
    "\n"
    "def Term.is_neg(term)\n"
    "  term.function == neg.block\n"
    "def Term.is_def_function_decl(term)\n"
    "  term.function == function_decl.block and not term.property_opt(:Syntax_AnonFunction false)\n"
    "def Term.is_anon_function_decl(term)\n"
    "  term.function == function_decl.block and term.property_opt(:Syntax_AnonFunction false)\n"
    "def Term.is_struct_decl(term)\n"
    "  term.is_value and is_type(term.value)\n"
    "def Term.is_require(term)\n"
    "  term.function.name == 'require'\n"
    "def Term.is_declared_state(term)\n"
    "  term.function == _declared_state.block\n"
    "def Term.is_get_index(term)\n"
    "  term.function == get_index.block\n"
    "def Term.is_set_with_selector(term)\n"
    "  term.function == set_with_selector.block\n"
    "def Term.is_for_loop(term)\n"
    "  term.function.name == 'for'\n"
    "def Term.is_while_loop(term)\n"
    "  term.function.name == 'while'\n"
    "def Term.is_if_block(term)\n"
    "  term.function.name == 'if'\n"
    "def Term.is_switch_block(term)\n"
    "  term.function.name == 'switch'\n"
    "def Term.is_copy(term)\n"
    "  term.function == copy.block\n"
    "def Term.is_nonlocal(term)\n"
    "  term.function == _nonlocal.block\n"
    "def Term.is_continue(term)\n"
    "  term.function.name == 'continue'\n"
    "def Term.is_break(term)\n"
    "  term.function.name == 'break'\n"
    "def Term.is_discard(term)\n"
    "  term.function.name == 'discard'\n"
    "def Term.is_syntax_error(term)\n"
    "  term.function == syntax_error.block\n"
    "\n"
    "def break_apart_newlines(String str) -> List\n"
    "  newlineFound, loc = str.index_of('\\n')\n"
    "\n"
    "  if newlineFound\n"
    "    [str.substr(0, loc), str.substr(loc, 1)].concat(break_apart_newlines(str.substr(loc+1, -1)))\n"
    "  else\n"
    "    [str]\n"
    "\n"
    "def SourceRepro.append_phrase(@self, Symbol type, val)\n"
    "  phrase = Phrase.make(type val)\n"
    "  @self.phrases.append(phrase)\n"
    "\n"
    "def SourceRepro.phrase(@self, Symbol type, val)\n"
    "  if type == :ws\n"
    "    for s in break_apart_newlines(val)\n"
    "      if s == ''\n"
    "        discard\n"
    "      @self.append_phrase(:ws s)\n"
    "    -- language defect: this 'self' shouldn't be necessary:\n"
    "    self\n"
    "  else\n"
    "    @self.append_phrase(type val)\n"
    "\n"
    "def SourceRepro.neg(self, Term term) -> SourceRepro\n"
    "  @self.phrase(:operator '-')\n"
    "  @self.term_input(term 0)\n"
    "\n"
    "def SourceRepro.literal_color(self, Term term) -> SourceRepro\n"
    "  color = term.value\n"
    "  hasAlpha = color.a != 1.0\n"
    "  digits = term.property_opt(:Syntax_ColorFormat 6)\n"
    "  digitsPerChannel = cond(digits == 6 or digits == 8, 2, 1)\n"
    "  specifyAlpha = hasAlpha or digits == 4 or digits == 8\n"
    "  specifyColorCount = cond(specifyAlpha, 4, 3)\n"
    "\n"
    "  out = ['#']\n"
    "  for c in 0..specifyColorCount\n"
    "    if digitsPerChannel == 1\n"
    "      @out.append(floor(color[c] * 15.999).to_hex_string)\n"
    "    else\n"
    "      mod255 = floor(color[c] * 255)\n"
    "      @out.append((mod255 // 0x10).to_hex_string)\n"
    "      @out.append((mod255 % 0x10).to_hex_string)\n"
    "\n"
    "  @self.phrase(:value out.join(''))\n"
    "\n"
    "def SourceRepro.literal_int(self, Term term) -> SourceRepro\n"
    "  if term.property_opt(:Syntax_IntegerFormat '') == 'hex'\n"
    "    @self.phrase(:value str('0x' term.value.to_hex_string))\n"
    "  else\n"
    "    @self.phrase(:value term.value)\n"
    "  self\n"
    "\n"
    "def SourceRepro.term_value(self, Term term) -> SourceRepro\n"
    "  @self.name_binding_source(term)\n"
    "  if type(term.value) == Color\n"
    "    return self.literal_color(term)\n"
    "  if type(term.value) == int\n"
    "    return self.literal_int(term)\n"
    "  if is_string(term.value)\n"
    "    if term.has_property(:Syntax_OriginalFormat)\n"
    "      return self.phrase(:value term.property(:Syntax_OriginalFormat))\n"
    "\n"
    "    quote = term.property(:Syntax_QuoteType)\n"
    "    startQuote = quote\n"
    "    endQuote = quote\n"
    "    if quote == '<'\n"
    "      startQuote = '<<<'\n"
    "      endQuote = '>>>'\n"
    "\n"
    "    @self.phrase(:value str(startQuote term.value endQuote))\n"
    "\n"
    "  elif is_number(term.value)\n"
    "    if term.has_property(:Syntax_OriginalFormat)\n"
    "      return self.phrase(:value term.property(:Syntax_OriginalFormat))\n"
    "\n"
    "  else\n"
    "    @self.phrase(:value to_string(term.value))\n"
    "\n"
    "  self\n"
    "\n"
    "def SourceRepro.require_statement(self, Term term) -> SourceRepro\n"
    "  if term.property_opt(:Syntax_Require false)\n"
    "    @self.phrase(:text 'require ')\n"
    "    @self.phrase(:name term.name)\n"
    "  elif term.property_opt(:Syntax_Import false)\n"
    "    @self.phrase(:text 'import ')\n"
    "    @self.term_input(term 0)\n"
    "  else\n"
    "    @self.term_default_format(term)\n"
    "  self\n"
    "\n"
    "def SourceRepro.anon_function_decl(self, Term term) -> SourceRepro\n"
    "  inputs = term.contents.inputs\n"
    "\n"
    "  if inputs != []\n"
    "    @self.phrase(:text '(')\n"
    "\n"
    "    for i,input in inputs\n"
    "      if i > 0\n"
    "        @self.phrase(:text ',')\n"
    "\n"
    "      @self.phrase(:name input.name)\n"
    "\n"
    "    @self.phrase(:text ') ')\n"
    "\n"
    "  @self.phrase(:text '->')\n"
    "  \n"
    "  @self.block_pre(term)\n"
    "  @self.block_contents(term.contents)\n"
    "  @self.block_post(term)\n"
    "\n"
    "def SourceRepro.function_decl(self, Term term) -> SourceRepro\n"
    "  @self.phrase(:text \"def \")\n"
    "  @self.phrase(:name term.name)\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_PostNameWs ''))\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_Properties ''))\n"
    "  @self.phrase(:text \"(\")\n"
    "\n"
    "  inputs = term.contents.inputs.filter((term) -> not term.property_opt(:HiddenInput false) )\n"
    "\n"
    "  for i,input in inputs\n"
    "    if input.property_opt(:State false)\n"
    "      @self.phrase(:text \"state \")\n"
    "\n"
    "    if i > 0\n"
    "      @self.phrase(:text \", \")\n"
    "\n"
    "    if input.property_opt(:Syntax_ExplicitType true)\n"
    "      @self.phrase(:text input.get_type.name)\n"
    "      @self.phrase(:ws \" \")\n"
    "\n"
    "    if input.property_opt(:Syntax_RebindSymbol false)\n"
    "      @self.phrase(:text \"@\")\n"
    "\n"
    "    @self.phrase(:name input.name)\n"
    "\n"
    "    if input.property_opt(:Output false) and not input.property_opt(:Syntax_RebindSymbol false)\n"
    "      @self.phrase(:text \" :out\")\n"
    "\n"
    "    if input.property_opt(:Meta false)\n"
    "      @self.phrase(:text \" :meta\")\n"
    "\n"
    "    if input.property_opt(:Rebind false)\n"
    "      @self.phrase(:text \" :rebind\")\n"
    "\n"
    "    if input.property_opt(:Multiple false)\n"
    "      @self.phrase(:text \" :multiple\")\n"
    "\n"
    "    first = false\n"
    "\n"
    "  @self.phrase(:text ')')\n"
    "\n"
    "  if term.property_opt(:Syntax_ExplicitType false)\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_WhitespacePreColon ''))\n"
    "    @self.phrase(:text '->')\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_WhitespacePostColon ''))\n"
    "\n"
    "    outputs = term.contents.outputs.filter((term) -> not term.property_opt(:Hidden false))\n"
    "\n"
    "    if outputs.length > 1\n"
    "      @self.phrase(:text \"(\")\n"
    "\n"
    "    first = true\n"
    "    for output in outputs\n"
    "      if not first\n"
    "        @self.phrase(:text \", \")\n"
    "      first = false\n"
    "\n"
    "      @self.phrase(:name output.get_type.name)\n"
    "\n"
    "    if outputs.length > 1\n"
    "      @self.phrase(:text \")\")\n"
    "\n"
    "  @self.block_pre(term)\n"
    "  @self.block_contents(term.contents)\n"
    "  @self.block_post(term)\n"
    "\n"
    "  self\n"
    "\n"
    "def SourceRepro.struct_decl(self, Term term) -> SourceRepro\n"
    "  @self.phrase(:text \"struct \")\n"
    "  @self.phrase(:name term.name)\n"
    "\n"
    "  if term.has_property(:Syntax_TypeMagicSymbol)\n"
    "    @self.phrase(:text \" = \")\n"
    "    @self.phrase(:text term.property(:Syntax_TypeMagicSymbol))\n"
    "\n"
    "  if term.property_opt(:Syntax_NoBrackets false)\n"
    "    return self\n"
    "\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_PreLBracketWs ' '))\n"
    "  @self.phrase(:text '{')\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_PostLBracketWs ' '))\n"
    "\n"
    "  for field in term.contents.terms\n"
    "    if field.is_comment\n"
    "      @self.phrase(:comment field.property(:Comment))\n"
    "      @self.phrase(:ws field.property_opt(:Syntax_LineEnding ''))\n"
    "    elif field.property_opt(:FieldAccessor false)\n"
    "      @self.phrase(:ws field.property_opt(:Syntax_PreWs ''))\n"
    "      @self.phrase(:name field.contents.output_placeholder(0).get_type.name)\n"
    "      @self.phrase(:ws field.property_opt(:Syntax_PostNameWs ' '))\n"
    "      @self.phrase(:name field.name)\n"
    "      @self.phrase(:ws field.property_opt(:Syntax_PostWs ''))\n"
    "\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_PreRBracketWs ''))\n"
    "  @self.phrase(:text '}')\n"
    "\n"
    "def SourceRepro.get_index_brackets(self, Term term) -> SourceRepro\n"
    "  @self.name_binding_source(term)\n"
    "  @self.term_input(term 0)\n"
    "  @self.phrase(:text '[')\n"
    "  @self.term_input_inner(term 1)\n"
    "  @self.phrase(:text ']')\n"
    "\n"
    "def SourceRepro.selector(self, Term term) -> SourceRepro\n"
    "  for i in 0..(term.num_inputs)\n"
    "    input = term.input(i)\n"
    "\n"
    "    if input.is_value and is_string(input.value)\n"
    "      @self.phrase(:text '.')\n"
    "      @self.phrase(:identifier input.value)\n"
    "    else\n"
    "      @self.phrase(:text '[')\n"
    "      @self.term_input_inner(term i)\n"
    "      @self.phrase(:text ']')\n"
    "\n"
    "  self\n"
    "\n"
    "def SourceRepro.set_with_selector(self, Term term) -> SourceRepro\n"
    "  @self.term_input_inner(term 0)\n"
    "  @self.selector(term.input(1))\n"
    "  @self.phrase(:text term.property_opt(:Syntax_PreEqualsSpace ''))\n"
    "  if term.has_property(:Syntax_RebindOperator)\n"
    "    @self.phrase(:text term.property(:Syntax_RebindOperator))\n"
    "    @self.phrase(:text term.property_opt(:Syntax_PostEqualsSpace ''))\n"
    "    @self.term_input(term.input(2) 1)\n"
    "  else\n"
    "    @self.phrase(:text '=')\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_PostEqualsSpace ''))\n"
    "    @self.term_input_inner(term 2)\n"
    "  self\n"
    "\n"
    "def SourceRepro.return_statement(self, Term term) -> SourceRepro\n"
    "  @self.phrase(:text 'return')\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_PostKeywordWs ' '))\n"
    "  for inputIndex in 0..(term.num_inputs)\n"
    "    if inputIndex != 0\n"
    "      @self.phrase(:text ', ')\n"
    "    @self.term_input_inner(term inputIndex)\n"
    "  self\n"
    "\n"
    "def SourceRepro.declared_state(self, Term term) -> SourceRepro\n"
    "  if not term.property_opt(:Syntax_StateKeyword false)\n"
    "    return self.term_default_format(term)\n"
    "\n"
    "  @self.phrase(:text 'state ')\n"
    "  if term.has_property(:Syntax_ExplicitType)\n"
    "    @self.phrase(:name term.property(:Syntax_ExplicitType))\n"
    "    @self.phrase(:text ' ')\n"
    "  @self.phrase(:name term.name)\n"
    "\n"
    "  if not term.input(1).is_null\n"
    "    @self.phrase(:text ' = ')\n"
    "    initializer = term.input(1).contents.output(0)\n"
    "    if initializer.property_opt(:Hidden false)\n"
    "      initializer = initializer.input(0)\n"
    "    @self.term(initializer)\n"
    "  self\n"
    "\n"
    "def SourceRepro.for_loop(self, Term term) -> SourceRepro\n"
    "  @self.phrase(:text 'for ')\n"
    "  index = term.contents.get_loop_index\n"
    "\n"
    "  if index.has_name\n"
    "    @self.phrase(:name index.name)\n"
    "    @self.phrase(:text ', ')\n"
    "\n"
    "  if term.has_property(:Syntax_ExplicitType)\n"
    "    @self.phrase(:name term.property(:Syntax_ExplicitType))\n"
    "    @self.phrase(:ws ' ')\n"
    "  @self.phrase(:name term.contents.get_iterator.name)\n"
    "  @self.phrase(:text ' in ')\n"
    "  if term.property_opt(:ModifyList false)\n"
    "    @self.phrase(:text '@')\n"
    "  @self.term_input(term 0)\n"
    "\n"
    "  @self.block_pre(term)\n"
    "  @self.block_contents(term.contents)\n"
    "  @self.block_post(term)\n"
    "\n"
    "def SourceRepro.while_loop(self, Term term) -> SourceRepro\n"
    "  @self.name_binding_source(term)\n"
    "  @self.phrase(:text 'while ')\n"
    "  @self.term_input(term.contents.find_while_condition, 0)\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_LineEnding ''))\n"
    "\n"
    "  @self.block_pre(term)\n"
    "  @self.block_contents(term.contents)\n"
    "  @self.block_post(term)\n"
    "\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_WhitespaceBeforeEnd ''))\n"
    "\n"
    "def SourceRepro.if_block(self, Term term) -> SourceRepro\n"
    "  @self.name_binding_source(term)\n"
    "  cases = term.contents.if_block_cases.filter((term) -> not term.property_opt(:Hidden false))\n"
    "  for i,caseTerm in cases\n"
    "    @self.phrase(:ws caseTerm.property_opt(:Syntax_PreWs ''))\n"
    "\n"
    "    if caseTerm.name != 'else'\n"
    "      if i == 0\n"
    "        @self.phrase(:text 'if ')\n"
    "      else\n"
    "        @self.phrase(:text 'elif ')\n"
    "\n"
    "      condition = caseTerm.contents.case_find_condition\n"
    "      assert(not condition.is_null)\n"
    "      @self.term_input(condition 0)\n"
    "    else\n"
    "      @self.phrase(:text 'else')\n"
    "    @self.phrase(:ws caseTerm.property_opt(:Syntax_LineEnding ''))\n"
    "\n"
    "    @self.block_pre(caseTerm)\n"
    "    @self.block_contents(caseTerm.contents)\n"
    "    @self.block_post(caseTerm)\n"
    "  self\n"
    "\n"
    "def SourceRepro.switch_block(self, Term term) -> SourceRepro\n"
    "  @self.name_binding_source(term)\n"
    "  @self.phrase(:text 'switch')\n"
    "\n"
    "  if term.num_inputs > 0\n"
    "    @self.phrase(:text ' ')\n"
    "    @self.term_input(term 0)\n"
    "\n"
    "  @self.block_pre(term)\n"
    "\n"
    "  cases = term.contents.if_block_cases.filter((term) -> not term.property_opt(:Hidden false))\n"
    "  for caseTerm in cases\n"
    "    @self.phrase(:ws caseTerm.property_opt(:Syntax_PreWs ''))\n"
    "    @self.phrase(:text 'case ')\n"
    "    condition = caseTerm.contents.case_find_condition\n"
    "\n"
    "    @self.term_input_pre(condition 0)\n"
    "    if condition.input(0).property_opt(:Hidden false)\n"
    "      @self.term_expr(condition.input(0).input(0))\n"
    "    else\n"
    "      @self.term_expr(condition.input(0))\n"
    "    @self.term_input_post(condition 0)\n"
    "\n"
    "    @self.phrase(:ws caseTerm.property_opt(:Syntax_LineEnding ''))\n"
    "    @self.block_pre(caseTerm)\n"
    "    @self.block_contents(caseTerm.contents)\n"
    "    @self.block_post(caseTerm)\n"
    "  self\n"
    "\n"
    "def SourceRepro.implicit_copy(self, Term term) -> SourceRepro\n"
    "  @self.name_binding_source(term)\n"
    "  @self.term_input(term 0)\n"
    "\n"
    "def SourceRepro.nonlocal(self, Term term) -> SourceRepro\n"
    "  @self.phrase(:name term.input(0).name)\n"
    "\n"
    "def SourceRepro.term(@self, Term term)\n"
    "  if term.is_comment\n"
    "    @self.phrase(:comment term.property_opt(:Comment ''))\n"
    "  elif term.is_neg\n"
    "    @self.neg(term)\n"
    "  elif term.is_require\n"
    "    @self.require_statement(term)\n"
    "  elif term.is_def_function_decl\n"
    "    @self.function_decl(term)\n"
    "  elif term.is_struct_decl\n"
    "    @self.struct_decl(term)\n"
    "  elif term.is_get_index and term.property_opt(:Syntax_Brackets false)\n"
    "    @self.get_index_brackets(term)\n"
    "  elif term.is_set_with_selector\n"
    "    @self.set_with_selector(term)\n"
    "  elif term.property_opt(:Syntax_ReturnStatement false)\n"
    "    @self.return_statement(term)\n"
    "  elif term.is_declared_state\n"
    "    @self.declared_state(term)\n"
    "  elif term.is_while_loop\n"
    "    @self.while_loop(term)\n"
    "  elif term.is_if_block\n"
    "    @self.if_block(term)\n"
    "  elif term.is_switch_block\n"
    "    @self.switch_block(term)\n"
    "  elif term.is_copy\n"
    "    @self.implicit_copy(term)\n"
    "  elif term.is_nonlocal\n"
    "    @self.nonlocal(term)\n"
    "  elif term.is_continue\n"
    "    @self.phrase(:text 'continue')\n"
    "  elif term.is_break\n"
    "    @self.phrase(:text 'break')\n"
    "  elif term.is_discard\n"
    "    @self.phrase(:text 'discard')\n"
    "  elif term.is_syntax_error\n"
    "    @self.phrase(:text term.property_opt(:OriginalText ''))\n"
    "  elif term.is_value\n"
    "    @self.term_value(term)\n"
    "  else\n"
    "    @self.term_default_format(term)\n"
    "\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_PostWs ''))\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_LineEnding ''))\n"
    "  self\n"
    "\n"
    "def Term.has_implicit_name_binding(term) -> bool\n"
    "  if term.name == \"\"\n"
    "    false\n"
    "  elif term.property_opt(:Syntax_ImplicitName false)\n"
    "    true\n"
    "  elif term.property_opt(:Syntax_RedindOperator false)\n"
    "    true\n"
    "  else\n"
    "    false\n"
    "\n"
    "def SourceRepro.name_binding_source(self, Term term) -> SourceRepro\n"
    "  if term.name == \"\" or term.has_implicit_name_binding\n"
    "    return self\n"
    "\n"
    "  if term.has_property(:Syntax_NameBinding)\n"
    "    syntax = term.property(:Syntax_NameBinding)\n"
    "    for element in syntax\n"
    "      if type(element) == int\n"
    "        @self.phrase(:name_binding term.output(element).name)\n"
    "      else\n"
    "        @self.phrase(:text element)\n"
    "  else\n"
    "    @self.phrase(:name term.name).phrase(:text \" = \")\n"
    "\n"
    "  self\n"
    "\n"
    "\n"
    "def SourceRepro.term_input_pre(self, Term term, int index) -> SourceRepro\n"
    "  defaultPre = cond(index == 0, \"\", \" \")\n"
    "  @self.phrase(:ws term.input_property_opt(index :Syntax_PreWs defaultPre))\n"
    "\n"
    "def Term.input_visible(term, int index) -> bool\n"
    "  if term.input(index).is_null\n"
    "    return false\n"
    "  if term.input_property_opt(index :Hidden false)\n"
    "    return false\n"
    "  true\n"
    "\n"
    "def SourceRepro.term_expr(self, Term term) -> SourceRepro\n"
    "  if term.name == ''\n"
    "    @self.term(term)\n"
    "  else\n"
    "    @self.phrase(:name_ref term)\n"
    "  self\n"
    "\n"
    "def SourceRepro.term_input_inner(self, Term term, int index) -> SourceRepro\n"
    "  if not term.input_visible(index)\n"
    "    return self\n"
    "\n"
    "  inputTerm = term.input(index)\n"
    "\n"
    "  if inputTerm.name == ''\n"
    "    @self.term(inputTerm)\n"
    "  else\n"
    "    if term.input_property_opt(index :Syntax_IdentifierRebind false)\n"
    "      @self.phrase(:text '@')\n"
    "    @self.phrase(:name_ref inputTerm)\n"
    "  self\n"
    "\n"
    "def SourceRepro.term_input_post(self, Term term, int index) -> SourceRepro\n"
    "  defaultPost = cond(index+1 == term.num_inputs, \"\", \",\")\n"
    "  @self.phrase(:ws term.input_property_opt(index :Syntax_PostWs defaultPost))\n"
    "\n"
    "def SourceRepro.term_input(self, Term term, int index) -> SourceRepro\n"
    "  if not term.input_visible(index)\n"
    "    return self\n"
    "\n"
    "  @self.term_input_pre(term index)\n"
    "  @self.term_input_inner(term index)\n"
    "  @self.term_input_post(term index)\n"
    "\n"
    "def SourceRepro.term_default_format(self, Term term) -> SourceRepro\n"
    "\n"
    "  declarationStyle = term.property_opt(:Syntax_DeclarationStyle, 'function-call')\n"
    "  functionName = term.property_opt(:Syntax_FunctionName, term.function.name)\n"
    "\n"
    "  -- Check for an infix operator with implicit rebinding (like +=)\n"
    "  if declarationStyle == 'infix' and term.property_opt(:Syntax_RebindingInfix false)\n"
    "    @self.phrase(:name_binding term.name)\n"
    "    @self.phrase(:ws ' ')\n"
    "    @self.phrase(:operator functionName)\n"
    "    @self.term_input(term 1)\n"
    "    return self\n"
    "\n"
    "  @self.name_binding_source(term)\n"
    "\n"
    "  -- Optional parens\n"
    "  for i in 0..term.property_opt(:Syntax_Parens 0)\n"
    "    @self.phrase(:text '(')\n"
    "\n"
    "  if term.is_for_loop\n"
    "    @self.for_loop(term)\n"
    "  elif term.is_anon_function_decl\n"
    "    @self.anon_function_decl(term)\n"
    "  elif declarationStyle == 'function-call'\n"
    "    if functionName == ''\n"
    "      @self.term(term.function)\n"
    "    else\n"
    "      @self.phrase(:function_name functionName)\n"
    "\n"
    "    parens = not term.property_opt(:Syntax_NoParens false)\n"
    "\n"
    "    if parens\n"
    "      @self.phrase(:text '(')\n"
    "\n"
    "    for i in 0..term.num_inputs\n"
    "      @self.term_input(term i)\n"
    "\n"
    "    if parens\n"
    "      @self.phrase(:text ')')\n"
    "\n"
    "  elif declarationStyle == 'method-call'\n"
    "    @self.term_input_pre(term 0)\n"
    "    @self.term_input_inner(term 0)\n"
    "\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_PreDotWs ''))\n"
    "    @self.phrase(:text '.')\n"
    "    @self.phrase(:function_name functionName)\n"
    "    if not term.property_opt(:Syntax_NoParens false)\n"
    "      @self.phrase(:text '(')\n"
    "\n"
    "    for inputIndex in 1..term.num_inputs\n"
    "      @self.term_input(term inputIndex)\n"
    "\n"
    "    if not term.property_opt(:Syntax_NoParens false)\n"
    "      @self.phrase(:text ')')\n"
    "\n"
    "  elif declarationStyle == 'dot-access'\n"
    "    @self.term_input(term 0)\n"
    "    @self.phrase(:text '.')\n"
    "    @self.term_input(term 1)\n"
    "  elif declarationStyle == 'dot-concat'\n"
    "    @self.term_input(term 0)\n"
    "    @self.phrase(:text '.')\n"
    "    @self.phrase(:functionName functionName)\n"
    "  elif declarationStyle == 'infix'\n"
    "    @self.term_input(term 0)\n"
    "    @self.phrase(:functionName functionName)\n"
    "    @self.term_input(term 1)\n"
    "  elif declarationStyle == 'prefix'\n"
    "    @self.phrase(:functionName functionName)\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_PostFunctionWs ''))\n"
    "    @self.term_input(term 0)\n"
    "  elif declarationStyle == 'arrow-concat'\n"
    "    @self.term_input(term 0)\n"
    "    @self.phrase(:text '->')\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_PostOperatorWs ''))\n"
    "    @self.phrase(:functionName functionName)\n"
    "  elif declarationStyle == 'bar-apply'\n"
    "    @self.term_input(term 0)\n"
    "    @self.phrase(:text '|')\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_PostOperatorWs ''))\n"
    "    @self.phrase(:functionName functionName)\n"
    "  elif declarationStyle == 'method-right-arrow'\n"
    "    @self.term_input(term 1)\n"
    "    @self.phrase(:text '->')\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_PostOperatorWs ''))\n"
    "    @self.term_input_pre(term 0)\n"
    "    @self.term_input_inner(term 0)\n"
    "    @self.phrase(:text '.')\n"
    "    @self.phrase(:functionName functionName)\n"
    "  elif declarationStyle == 'bracket-list'\n"
    "    @self.phrase(:text '[')\n"
    "    for index in 0..(term.num_inputs)\n"
    "      @self.term_input(term index)\n"
    "    @self.phrase(:text ']')\n"
    "\n"
    "  else\n"
    "    error('unrecognized declaration style: ' declarationStyle)\n"
    "\n"
    "  -- Optional parens\n"
    "  for i in 0..term.property_opt(:Syntax_Parens 0)\n"
    "    @self.phrase(:text ')')\n"
    "\n"
    "  self\n"
    "\n"
    "def Term.should_print_source_line(term) -> bool\n"
    "  term.is_statement\n"
    "\n"
    "def SourceRepro.block_pre(self, Term term) -> SourceRepro\n"
    "  @self.phrase(:ws term.property_opt(:Syntax_PostHeadingWs ''))\n"
    "  if term.property_opt(:Syntax_BlockStyle '') == 'braces'\n"
    "    @self.phrase(:text '{')\n"
    "  self\n"
    "\n"
    "def SourceRepro.block_contents(@self, Block block)\n"
    "  @self.phrase(:block_start block)\n"
    "  @self.block(block)\n"
    "  @self.phrase(:block_end block)\n"
    "\n"
    "\n"
    "def SourceRepro.block_post(self, Term term) -> SourceRepro\n"
    "  if term.property_opt(:Syntax_BlockStyle '') == 'braces'\n"
    "    @self.phrase(:text '}')\n"
    "  self\n"
    "\n"
    "def SourceRepro.block(self, Block block) -> SourceRepro\n"
    "  newlineNeeded = false\n"
    "  \n"
    "  for term in block.terms\n"
    "    if not term.should_print_source_line\n"
    "      continue\n"
    "\n"
    "    if newlineNeeded\n"
    "      @self.phrase(:ws '\\n')\n"
    "      newlineNeeded = false\n"
    "\n"
    "    @self.phrase(:ws term.property_opt(:Syntax_PreWs ''))\n"
    "    @self.term(term)\n"
    "\n"
    "    if term.has_property(:Syntax_LineEnding) or term.has_property(:Syntax_PostHeadingWs)\n"
    "      -- no newline needed\n"
    "    else\n"
    "      newlineNeeded = true\n"
    "\n"
    "  self\n"
    "\n"
    "def phrases_to_string(List phrases) -> String\n"
    "  strs = for phrase in phrases\n"
    "    phrase.text\n"
    "  strs.join('')\n"
    "\n"
    "def term_phrases(Term term) -> List\n"
    "  SourceRepro.make.term(term).phrases\n"
    "\n"
    "def block_phrases(Block block) -> List\n"
    "  SourceRepro.make.block(block).phrases\n"
    "\n"
    "def block_to_string(Block block)\n"
    "  block | block_phrases | phrases_to_string\n";

const char* BUILTIN_MODULE_stack_dump = 
    "\n"
    "struct StackDump {\n"
    "  IndentWriter out\n"
    "}\n"
    "\n"
    "def StackDump.write(self, String str) -> StackDump\n"
    "  @self.out.write(str)\n"
    "def StackDump.to_string(self) -> String\n"
    "  self.out.toString\n"
    "\n"
    "def StackDump.stack(self, Stack stack) -> StackDump\n"
    "  @self.out.write('[Stack #' stack.id ', frames = ', stack.frames_count)\n"
    "\n"
    "def stack_to_string(Stack stack) -> String\n"
    "  StackDump.make.stack(stack).to_string\n";

const char* BUILTIN_MODULE_indent_writer = 
    "\n"
    "struct IndentWriter {\n"
    "    int curIndent\n"
    "    bool needsIndent\n"
    "    List output\n"
    "}\n"
    "\n"
    "def IndentWriter.write(self, args :multiple)\n"
    "    if self.needsIndent\n"
    "        self.needsIndent = false\n"
    "        for i in 0..self.curIndent\n"
    "            @self.output.append(' ')\n"
    "    @self.output.append(str.apply(args))\n"
    "    self\n"
    "\n"
    "def IndentWriter.writeln(self, args :multiple)\n"
    "    @self.write(str.apply(args))\n"
    "    @self.output.append(\"\\n\")\n"
    "    self.needsIndent = true\n"
    "    self\n"
    "\n"
    "def IndentWriter.indent(self)\n"
    "    self.curIndent += 1\n"
    "    self\n"
    "def IndentWriter.unindent(self)\n"
    "    self.curIndent -= 1\n"
    "    self\n"
    "\n"
    "def IndentWriter.toString(self) -> String\n"
    "    self.output.join(\"\")\n"
    "\n"
    "def new() -> IndentWriter\n"
    "    IndentWriter.make\n";

const char* BUILTIN_MODULE_socket = 
    "\n"
    "struct Server {\n"
    "    native_ptr native\n"
    "}\n"
    "\n"
    "struct Connection {\n"
    "    native_ptr native\n"
    "}\n"
    "\n"
    "struct ServerRequest {\n"
    "    Connection conn\n"
    "    any data\n"
    "}\n"
    "\n"
    "struct WebsockServer {\n"
    "    native_ptr native\n"
    "}\n"
    "\n"
    "def ServerRequest.reply(self, msg)\n"
    "  self.conn.send(msg)\n"
    "\n"
    "def make_server(String ip, int port, Symbol t) -> Server\n"
    "def make_tcp_server(String ip, int port) -> Server\n"
    "  make_server(ip port :tcp)\n"
    "def make_websock_server(String ip, int port) -> Server\n"
    "  make_server(ip port :websock)\n"
    "\n"
    "def Server.connections(self) -> List\n"
    "\n"
    "def Server.listen(self) -> List\n"
    "  -- returns list of ServerRequest\n"
    "  reqs = []\n"
    "  for Connection c in self.connections\n"
    "    for msg in c.receive\n"
    "      @reqs.append(ServerRequest.make(c msg))\n"
    "  reqs\n"
    "\n"
    "def make_tcp_client(String ip, int port) -> Connection\n"
    "def Connection.send(self, any msg)\n"
    "def Connection.outgoing_queue(self) -> List\n"
    "def Connection.receive(self) -> List\n"
    "def Connection.is_open(self) -> bool\n";

const char* find_builtin_module(const char* name) {
    if (strcmp(name, "stdlib") == 0)
        return BUILTIN_MODULE_stdlib;
    if (strcmp(name, "json") == 0)
        return BUILTIN_MODULE_json;
    if (strcmp(name, "error_trace") == 0)
        return BUILTIN_MODULE_error_trace;
    if (strcmp(name, "matrix") == 0)
        return BUILTIN_MODULE_matrix;
    if (strcmp(name, "static_checking") == 0)
        return BUILTIN_MODULE_static_checking;
    if (strcmp(name, "source_repro") == 0)
        return BUILTIN_MODULE_source_repro;
    if (strcmp(name, "stack_dump") == 0)
        return BUILTIN_MODULE_stack_dump;
    if (strcmp(name, "indent_writer") == 0)
        return BUILTIN_MODULE_indent_writer;
    if (strcmp(name, "socket") == 0)
        return BUILTIN_MODULE_socket;
    return NULL;
}

} // namespace circa

