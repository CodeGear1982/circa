type Token [python]


# Functions
function cond_branch(bool condition) [python]
function simple_branch() [python]
function equals(Ref, Ref -> bool) [python]
function not_equals(Ref, Ref -> bool) [python]
function print(string) [python]
function input(-> string) [python]
function assert(bool) [python]
function and(bool, bool -> bool) [python]
function or(bool, bool -> bool) [python]
function if_expr(bool, Ref, Ref -> Ref) [python]
function add_training(float) [python]
function add(float, float -> float) [python, training=add_training]
function sub(float, float -> float) [python]
function mult(float, float -> float) [python]
function div(float, float -> float) [python]
function assign(Ref, Ref) [python]
function concat(string, string ->string) [python]
function break() [python]

// Metaprogramming functions
function token(string -> Token) [python]
operator = map(Token, Function)
assign_operator = map(Token, Function)
assignFunction = map(Type, Function)
trainingFunction = map(Function, Function)

# Containers
# type Hashtable [python]
# function hashtable_insert(Hashtable, Ref) [python]
# function hashtable_access(Hashtable, Ref -> Ref) [python]

# type List [python]
# function list_append(List, Ref) [python]

# type Set [python]
# function set_insert(Set, Ref) [python]
# function set_remove(Set, Ref) [python]
# function set_membership(Set, Ref -> bool) [python]

// Bind operators to functions
operator(token('+')) := add
operator(token('-')) := sub
operator(token('*')) := mult
operator(token('/')) := div
operator(token('==')) := equals
operator(token('!=')) := not_equals

// Bind assign operators to functions
assign_operator(token('+=')) := add
assign_operator(token('-=')) := sub
assign_operator(token('*=')) := mult
assign_operator(token('/=')) := div

