
-- Test a method that modifies the object contents
type Object
{
    int a
}

def Object.f(self) -> Object
    self.a = 5

o = [3] -> Object
assert(o.a == 3)
@o.f()
assert(o.a == 5)

-- Same test, but with a nested object
type Object2
{
    List list
}

def Object2.f(self)
    @self.list.append(5)

o = make(Object2)
assert(o.list == [])
@o.f()
assert(o.list == [5])
@o.f()
assert(o.list == [5 5])
@o.f()
assert(o.list == [5 5 5])

-- Multiple levels of nesting
type T1 { List list }
type T2 { T1 t }
type T3 { T2 t }
type T4 { T3 t }

t = make(T4)
assert(to_string(t) == "{t: {t: {t: {list: []}}}}")
assert(t.t.t.t.list == [])
@t.t.t.t.list.append(10)
assert(t.t.t.t.list == [10])
assert(to_string(t) == "{t: {t: {t: {list: [10]}}}}")

-- Rebinding method that returns a value
type Object3
{
    int i
}

def Object3.swap(self :out, int i) -> int
  old = self.i
  self.i = i
  return old
    

o = make(Object3)
assert(to_string(o) == "{i: 0}")
result = o.swap(5)
assert(result == 0)
assert(to_string(o) == "{i: 5}")
result = o.swap(10)
assert(result == 5)
assert(to_string(o) == "{i: 10}")
result = o.swap(123)
assert(result == 10)
assert(to_string(o) == "{i: 123}")
