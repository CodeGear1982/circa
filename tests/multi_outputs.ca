
-- One rebound argument
def multi_output(int a :out)
  a = 5

x = 3
multi_output(&x)
assert(x == 5)

-- Multiple rebound arguments
def multi_output_2(int a :out, int b :out, int c :out)
  a = 1
  b = 2
  c = 3


x = -1
y = -2
z = -3
multi_output_2(&x, &y, &z)
assert(x == 1)
assert(y == 2)
assert(z == 3)

-- One rebound argument, plus a primary output
def multi_output_3(int a :out) -> int
  a = 8
  return 9

x = -1
y = multi_output_3(&x)
assert(x == 8)
assert(y == 9)

-- Multiple rebound arguments plus a primary output
def multi_output_4(int a :out, int b :out, int c :out) -> int
  a = 1
  b = 2
  c = 3
  return 4

x = -1
y = -2
z = -3
w = multi_output_4(&x, &y, &z)
assert(x == 1)
assert(y == 2)
assert(z == 3)
assert(w == 4)
