

type Asteroid {
  List edges
  Point location
  Point vel
  number rotation
  number rotation_vel
  number size
  number age
}

def random_location() -> Point
    return [50,50]
def random_norm_vector() -> Point
    return [1.0,0]
asteroid_num_edges = 10

def generate_asteroid(number size) -> Asteroid
    edges = for index in 0..10
        angle = index / asteroid_num_edges * 360
        (polar(angle) * (rand() * size + size/3)) -> Point

    rotation = (rand() * .2 - .1) * 360
    result = create(Asteroid)
    result.edges = edges
    result.location = random_location()
    result.vel = random_norm_vector()*10
    result.rotation_vel = rotation
    result.size = size
    return result

particles = []
spawned = []

def generate_particle_burst(List particles, Point loc, Point vel) -> List
    return particles
def generate_child_asteroid(Asteroid asteroid)
    -- no op


asteroids = for i in 0..3 { generate_asteroid(10) }
bullets = [0 1 2]

for asteroid in @asteroids
    Asteroid(@asteroid)
    collides = false

    for bullet in @bullets
        if true
            collides = true

            bullet_vel = Point([0 0])
            generate_particle_burst(@particles, asteroid.location, bullet_vel)

            discard

    if collides
        discard

    if collides and asteroid.size > 10
        spawned.append(generate_child_asteroid(asteroid))
        spawned.append(generate_child_asteroid(asteroid))
        if rand() > .5
            spawned.append(generate_child_asteroid(asteroid))

print(asteroids)
