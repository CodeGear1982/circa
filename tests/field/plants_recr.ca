

def elapsed() -> number
    state t = 0.0
    t += .1
    return t

base_grow_rate = 200.0
max_segment_length = 100.0 -- 10 to 30
max_segment_radius = 1.0
max_segment_angle = 1.0 -- .5 - 1
wiggle_factor = 0.07 -- 0 - 1
generation_limit = 3
distance_between_blocks_min = 30.0 -- 20 - 100
distance_between_blocks_var = 20.0 -- 20 - 100
block_split_angle = .1

type Segment {
  int generation
  number distance_from_base
  number base_radius
  number end_radius
  Point base_loc
  number base_angle
}

def Segment.step(seg)
    state wiggle_value = rand() - .5
    state thickness_ratio = 1.0
    age = elapsed()

    print('gen = ' seg.generation ', age = ' age)

    -- length
    target_length = base_grow_rate * age
    min(@target_length, max_segment_length)
    length = target_length * (1 - (1 / (age + 1)))

    end_loc = seg.base_loc.add(polar(seg.base_angle) * length)

    -- thickness
    thickness = 5.0
    base_l = seg.base_loc.add(polar(seg.base_angle - 90) * (thickness/2))
    base_r = seg.base_loc.add(polar(seg.base_angle + 90) * (thickness/2))

    tip_l = end_loc + [-1 0] * (thickness/2)
    tip_r = end_loc + [1 0] * (thickness/2)

    -- env.draw_poly([base_l tip_l tip_r base_r] #0f0)

    if seg.generation < generation_limit

        -- Grow a child segment
        child = make(Segment)
        child.base_loc = end_loc
        child.base_angle = seg.base_angle + 5.0
        child.generation = seg.generation + 1
        child.step

def f()
    state i = 0
    i += 1
    print("Step: " i)

    root = make(Segment)
    root.base_loc = [300 300]
    root.step()

int = make_stack(f)
int.call
int.dump
int.call
int.call
int.call
