

struct MyType {
  int a,
  int b,
  String name,
  number distance
}

-- Create an instance and assign fields
m = make(MyType)
m.name = "Andy"
m.a = 1
m.b = m.a + 2
assert(m.name == "Andy")
assert(m.a == 1)
assert(m.b == 3)
assert(str(m) == "{a: 1, b: 3, name: 'Andy', distance: 0.0}")

-- test += on a field
m.a += 5
assert(m.a == 6)
assert(str(m) == "{a: 6, b: 3, name: 'Andy', distance: 0.0}")

-- Cast from a plain list
struct MyType2 {
    String a
    String b
    int c
}

plain_list = ['hello' 'there' 3]
mt2 = plain_list -> MyType2.cast
assert(mt2.a == 'hello')
assert(mt2.b == 'there')
assert(mt2.c == 3)

-- Composite type
struct Composite {
  MyType myClass,
  MyType myClass2,
  String name,
}
c = make(Composite)
assert(str(c) == "{myClass: {a: 0, b: 0, name: '', distance: 0.0}, myClass2: {a: 0, b: 0, name: '', distance: 0.0}, name: ''}")

struct Vector { number x, number y }
v = make(Vector)

v.x = 5.0
v.y = 6.0

assert(str(v) == '{x: 5.0, y: 6.0}')
assert(v.x == 5.0)
assert(v.y == 6.0)
