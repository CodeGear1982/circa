
my_sample_code = {
  a = 1
  b = add(a 2)
}

br = branch_ref(my_sample_code)
terms = br.terms()

for i in 0..4
    assert(terms[i] == br.get_term(i))

a = br.get_term(1)
b = br.get_term(3)

-- Names
assert(a.name() == 'a')
assert(b.name() == 'b')

-- Source location
assert(a.source_location() == [2, 3, 8, 3])

-- Inputs
assert(a.num_inputs() == 0)
assert(b.num_inputs() == 2)
assert(b.input(0) == a)

-- Function
assert(a.function.name == "value")
assert(b.function.name == "add")

def myfunc()

x = myfunc()

xr = term_ref(x)
assert(xr.function == branch_ref(myfunc))

-- Function inputs & outputs
def myfunc2(int a, int b, int c) -> number
  return a + b + c

mf2 = branch_ref(myfunc2)

a = mf2.input(0)
b = mf2.input(1)
c = mf2.input(2)

assert(a.name() == "a")
assert(b.name() == "b")
assert(c.name() == "c")
assert(mf2.inputs() == [a b c])
assert(mf2.output(0).get_type() == number)

-- test Branch.statements
my_branch = { a = (1 + 2) * 3 }

statements = branch_ref(my_branch).statements
assert(statements.length == 1)
statement_0 = statements[0] -> Term
assert(statement_0.function == branch_ref(mult))
