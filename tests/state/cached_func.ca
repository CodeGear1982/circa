
def add_logged(a, b)
  print('  (reevaluate) Calling add on: ' a ', ' b)
  add(a b)

def cached(Func refresh) -> any
  @refresh.freeze

  state Func _refresh
  state _out
  if _refresh != refresh
    _refresh = refresh
    _out = refresh.call()
  _out

def main(v, cacheKey)
  print('calling main with: ' v ', cacheKey: ' cacheKey)
  result = cached({ cacheKey; add_logged(v, 2) })
  print('  result = ' result)

int = main.to_stack

print('Should reevaluate:')
int.call(1, 0)
print('Should use cache:')
int.call(1, 0)
print('Should reevaluate:')
int.call(1, 1)
print('Should use cache:')
int.call(1, 1)
print('Should reevaluate:')
int.call(2, 1)
print('Should reevaluate:')
int.call(2, 0)
print('Should use cache:')
int.call(2, 0)
print('Should reevaluate:')
int.call(2, 'x')
print('Should reevaluate:')
int.call(2, 'y')
print('Should reevaluate:')
int.call(3, 0)
print('Should reevaluate:')
int.call(4, 0)
 
  
