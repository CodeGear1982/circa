
f = {
    a = context(:a)
    output(concat('got context: ' a))
}.block

set_context(:a "outer context, don't use this")

-- First try calling without context.
actor = make_actor(f)
actor.call()

assert(actor.call() == "got context: null")

-- Call with injected context
actor.inject_context(:a "injected")
assert(actor.call() == "got context: injected")
assert(actor.call() == "got context: injected")

actor.inject_context(:a "injected 2")
assert(actor.call() == "got context: injected 2")

-- Context is preserved on error

g = {
    die = input(bool)
    if die
        assert(false)

    output(concat("got context: " context(:a)))
}.block

actor = make_actor(g)
actor.inject_context(:a "injected")
assert(actor.call(false) == "got context: injected")

actor.call(true)
assert(actor.errored)

assert(actor.call(false) == "got context: injected")
