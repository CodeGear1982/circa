
state orig_buffer = opengl:generate_frame_buffer([window.width window.height])

orig_buffer.bind()
include('asteroids.ca'->rpath)

emptyVertexShader = <<<
void main()
{
    gl_TexCoord[0] = gl_MultiTexCoord0;
	gl_Position = ftransform();
}
>>>

programBlurX = opengl:reload_shader_text(emptyVertexShader,
<<<
uniform sampler2D tex;
uniform float xdelt;
uniform float ydelt;

void main()
{
    vec4 sum = vec4(0);
    vec2 texcoord = gl_TexCoord[0].xy;

    vec4 orig = texture2D(tex, texcoord);

    int steps = 10;
    for (int x = 0; x < steps; x++)
    {
        sum += texture2D(tex, texcoord + vec2(xdelt * float(x - steps/2),0)) / float(steps);
    }

    gl_FragColor = sum;
}
>>>)

u_tex = opengl:get_uniform_location(programBlurX, "tex")
u_xdelt = opengl:get_uniform_location(programBlurX, "xdelt")
u_ydelt = opengl:get_uniform_location(programBlurX, "ydelt")

state pass1_buffer = opengl:generate_frame_buffer([window.width window.height])
pass1_buffer.bind()
opengl:bind_texture(orig_buffer.get_tex_id())
opengl:use_program(programBlurX)
opengl:uniform(u_tex 0)
opengl:uniform(u_xdelt 1/window.width)
opengl:uniform(u_ydelt 1/window.height)
opengl:draw_quad([0 0 window.width window.height])


programBlurY = opengl:reload_shader_text(emptyVertexShader,
<<<
uniform sampler2D tex;
uniform float xdelt;
uniform float ydelt;

void main()
{
    vec4 sum = vec4(0);
    vec2 texcoord = gl_TexCoord[0].xy;

    vec4 orig = texture2D(tex, texcoord);

    int steps = 10;
    for (int y = 0; y < steps; y++)
    {
        sum += texture2D(tex, texcoord + vec2(0, xdelt * float(y - steps/2))) / float(steps);
    }

    gl_FragColor = sum;
}
>>>)

u_tex = opengl:get_uniform_location(programBlurY, "tex")
u_xdelt = opengl:get_uniform_location(programBlurY, "xdelt")
u_ydelt = opengl:get_uniform_location(programBlurY, "ydelt")

state pass2_buffer = opengl:generate_frame_buffer([window.width window.height])
pass2_buffer.bind()
opengl:bind_texture(pass1_buffer.get_tex_id())
opengl:use_program(programBlurY)
opengl:uniform(u_tex 0)
opengl:uniform(u_xdelt 1/window.width)
opengl:uniform(u_ydelt 1/window.height)
opengl:draw_quad([0 0 window.width window.height])

programCombine = opengl:reload_shader_text(emptyVertexShader,
<<<
uniform sampler2D originalTex;
uniform sampler2D blurTex;

void main()
{
    vec2 texcoord = gl_TexCoord[0].xy;
    vec4 origPix = texture2D(originalTex, texcoord);
    vec4 blurPix = texture2D(blurTex, texcoord);
    gl_FragColor = origPix + blurPix * 0.6;
}
>>>)

u_origTex = opengl:get_uniform_location(programCombine, "originalTex")
u_blurTex = opengl:get_uniform_location(programCombine, "blurTex")

opengl:bind_main_frame_buffer()
opengl:activeTexture(0)
opengl:bind_texture(orig_buffer.get_tex_id())
opengl:activeTexture(1)
opengl:bind_texture(pass2_buffer.get_tex_id())
opengl:use_program(programCombine)
opengl:uniform(u_origTex 0)
opengl:uniform(u_blurTex 1)
opengl:draw_quad([0 0 window.width window.height])

# Cleanup
opengl:use_program(0)
opengl:activeTexture(1)
opengl:bind_texture(0)
opengl:activeTexture(0)
opengl:bind_texture(0)
