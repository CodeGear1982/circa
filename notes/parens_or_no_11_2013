
To have parens on function calls or no?

  No parens: 

Situations
  
  Free functions
    
    foo
    foo()
    foo(a b)

    Notes
     - A no-parens call is indistinguishable from a named reference to an existing value.
       This model is vaguely similar to lazy evaluation, but with differences. (the
       execution model is more predictable)
     - No-parens call seems a little too weird to tackle right now.

  Object methods
    foo.method
    foo.method()
    foo.method(1 2)

    Notes
     - Other languages have a concept of a "getter" method, where the method call is
       indistinguishable from a field access. Our paren-less methods are no different.

  Module access

    module.function
    module.function()
    module.function(1 2)

--

Various approaches for currying/function pointers

Automatic currying
  Call a function without enough arguments, and automatically get a curry instead of an error.
    Yeah this would be awful.
    A common source of typos would be silent or deferred error.
    This might work for Haskell but not here.

Force users to use {} to create a new partial function

  To defer a call to module.function, use:

    { module.function }

  Question: Inputs:

    { module.function(^^) }
    { module.function(*) }
    module.function{}
    { module.function(...) }

Add an operator to get a function reference

  ref = ~module.function
  ref = module.function~


