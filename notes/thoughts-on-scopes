
Need some plan for scopes

Restrictions?

* Nested branches can always access things in above branches

int a
{
  b = a  -- b can access 'a'
}

* Can a function-definition branch access things outside the function?

   - Yes, this is very useful

   - But, we can't modify things outside our scope (without doing some
     magic to the function). Need to either support this, or give
     warnings. Example:

         a = 2
         def f():
             a = 3

     User will think that the outside 'a' is modified.

* Generally can't access things in other nested branches
{
  int a
}
b = a  -- can't access 'a' here

{
  int a
}
{
  b = a -- can't access 'a' here
}

* Some exceptions, like Python allows this:
if
  a = 1
else
  a = 2
end
b = a  -- 'a' is bound in this level

* How do we properly expose things in lower branches to higher branches? Right now we allow
  the Branch to bind names to anything, but this happens at compile time and it needs to be
  done in a way that it can be reproduced later.

  Need some rules for this. Current plan is that every function has a expose_names field
  which lets people know if it exposes any names.

* Namespaces

Defined using this syntax:

namespace ns:
  a = 1
  b = 2

An item inside a namespace is accessed with qualified name syntax:
    c = ns:a

Colon operator can also potentially be used to other occasions when we want to reach into
a block's code.
