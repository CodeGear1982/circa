
How magical are state values?

From the users perspective they should be somewhat magical. Here's the highest form
of magic:

def my_function()
  some_stuff()
  some_other_stuff()

Each of the functions "some_stuff" and "some_other_stuff" can have implicit state, which
would cause the whole function to have implicit state. But the user doesn't know or care
about this, they just trust that the functions work as advertised.

Then there is a style that is less magical:

def my_function()

  s = {}
  some_stuff(state = s)

In this case, the user knows that "some_stuff" wants to carry implicit state, and the user
wants to control where that state comes from. So the user makes the state implicit. Now the
user can manipulate the state value (although they are probably restricted to simple operations
like copying/resetting/comparison, because the contents of that data are solely the business
of the "some_stuff" function).

The user can even make this state implicit again:

def my_function()
  state s
  some_stuff(state = s)

So the call to "my_function" will carry implicit state, but inside the function, the user
can mess with that state value.

--

So there's an open question of how magical these values should be?

One approach is that the EvalContext has a "state" value for the currently executing branch.
The philosophy of this approach is that state is ubiquitous, so it should be hardwired into
the execution model.

Another approach is that the branch's current state just uses a register value. This approach
makes state less hardwired. It opens up the possibility that the user can customize how
state works, or maybe even have two kinds of state which don't trample each other.

(This second approach sounds preferable, because now we are talking about giving the user
building blocks rather than a strict model).

The downside with state as a register is possibly less ability to introspect. But I don't think
this is too bad, as the inspector can look at the branch to find which register contains
state.

--

Another question is, do state inputs/outputs count as real inputs and outputs?

Currently we have two layers going on: there's the AST layers (Branches and Terms) where
each Term has a list of Terms as inputs. Then there's the generated InstructionList.
So, it's possible for a term to be invisible (not show up in AST) which does show up in the
InstructionList. But is this the best way? (see on_instruction_lists)
