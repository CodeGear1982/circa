
Want to support interface types, because they are rad.

Don't support subclassing/inheritance though, because it is annoying. Prefer ways to
grow code horizontally (as in, more types) rather than vertically (as in, extensions
and patches on existing types).

Would like to go further than interfaces. An interface is just a promise, it says that
I promise these inputs will have these methods.

It's possible to have more complicated promises, like in SAGE. Such as, "this thing will
never be null", or "it'll be more than 5", or "such-and-such a function will always be true".
Promises can't always be statically resolved, so we do runtime checks for the ones that
can't be statically resolved.

# Efficiency of runtime checks #

Overusing runtime checks could lead to lots of churn, constantly rechecking the same things.
Could have optimizations to reduce these checks.

# Function equivalence #

So a type promise could be stored as a function which returns true or false. This:

interface type X {
  int func1()
  string func2(float, float)
}

could translate to:

def fits_type_X(Type t) -> bool
  c1 = t.implements('func1', int)
  c2 = t.implements('func2', string, float, float)
  return and(c1, c2)
end

Then we could take advantage of function-introspection. For example, if we had a general-
purpose "why is this false" function, that could be used to explain why a type did not
fit a declaration.

# Implementation #

Static type checks
 - If it's known that a value will only have one type, then:
     Use checking function on that one type
 - If a value can be one of multiple types
     Use checking on each variant
 - If less is known about the type
     May need to default to runtime type check

Static type information
 - Store as a list of assertions?
     branch {
       t = input()
       is_type(t, X)
       ...
     }
   This list could have a 'normal form', where it just asserts to be one type.

void solve_static_types()
void clear_static_types()
     
Runtime type checks
 - Execute a type checking function
     branch {
       t = input()
       has_function(t, 'get_element')
       has_function(t, 'num_elements')
     }
