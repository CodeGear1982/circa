
Support complex types..

List (generic)
List<Item...>
Tuple<Item, Item>
List<Item, Length=3> (can be represented as tuple)
Union<A,B>
Intersection<A,B>

Questions we need to answer:
 - How do we do autocompletion?
 - How do we check if a program is valid?
   - Check if an output type satisfies an input type
 - If the program is invalid, how do we present the error message?
 - How does the user describe these types?

Styles of type declaration:

- Describe the type of results. For each function that might be called on
  the type, we describe the result type.

    get_index(T, 0) == X
    get_index(T, 1) == Y

    List<X>:

    get_index(T, int) == X

  (when writing this code it becomes necessary to mention which variables
  are unbound)

Example: The append() function has type:

append(List a, any b) -> List

The output type would be:

namespace types
  def get_index(t, i)
    len = length(t)
    if i == len - 1
      return b
    else
      return a.get_index(t, i)
  
Each value could end up with N different function like this. But we should only compute these
lazily, and we should clean them up when done.
