
Error handling

When an error occurs, we want:
  Transparency. It's easy to look at the stack to see why the rror occurred.
  Recoverability. The user makes a change that fixes the problem, and is able to continue
    running the current stack.

Outline
-------

When an error occurs, we leave the stack exactly as it is. The PC still points to the errored
term, and the stack has all the values from when the error occurred.

Questions
---------

How do they 'recover' if the problem is a bad input? They can change the code that caused the
bad input, but our errorred stack will still have the bad input sitting around.

  Option: The runtime can detect which inputs it needs to reevaluate?
    - Probably tricky for unstructured changes
  Option: The user can manually reevaluate certain inputs? Spawn a new Stack just for the
    purpose of manually reevaluating a given term. Mark our current stack as waiting for
    the spawned stack.

Types of errors:
 - Errors during branch choice (such as bad input to if-block)
 - Errors during input passing (type errors)
 - Errors triggered by override functions
   - How much context do we need from them? Currently we only ask for a string
 - Errors during output passing (type errors)


Recoverable errors
------------------

It's useful for a piece of code to be able to handle and recover from a runtime error,
is this something we should support?

Probably don't need this for first release?
