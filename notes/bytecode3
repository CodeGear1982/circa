
Third attempt at bytecode:

Goals
  Handle value consuming (see 'copy_analysis')
  Handle input & output pushing (including input searches)
  Handle multi-inputs
  Handle evaluator's special cases around loops & conditionals


Rough draft

  Every Branch will have a Bytecode object
  The object contains the list of instructions for evaluating the branch
  There is also a 'dirty' flag. Code modifications will trigger the flag,
  requiring that the bytecode is later rebuilt.

Dirty flag
  As a shortcut - enabling the dirty flag could put a dirty() op at the top
  of the instruction stream. This means that we wouldn't have to check the
  flag on every branch call.

  Because of input searching, if we dirty a branch A then we must dirty every
  minor branch inside A, recursively.

  'dirty' could mean the same thing as our in-progress status.

Outline of necessary operations

  fire_native
    - Looks in top branch, and fires the C override

  copy stack_loc_1 stack_loc_2
  swap stack_loc_1 stack_loc_2

  type_cast stack_loc type_ref
  type_check stack_loc type_ref

  finish_frame
  start_list stack_loc
    - Used for :multiple inputs
  append_to_list stack_loc_1 stack_loc_2
    - Used for :multiple inputs

  push_branch
  choose_conditional

  (stuff for loops)

  type_check

  error_not_enough_inputs
  error_too_many_inputs

  pause
    - In first iteration, pause after every call?

Implementation Notes
  Every Frame should have a reference to Bytecode?
  Bytecode is GCable?
  1-to-1 bytecode with Branch
    Yes for first impl
