
Implementation plan:


 0. Introduce new builtin type Closure
    Fields: block, bindings.

 0.5  Introduce new name :uncaptured . This is used in Closure.bindings for values that aren't
    yet captured. (they can still be found on the current stack frame).

 1.  Parser changes
    {} syntax now creates an expression that returns a Closure value.
    Chase down existing uses of this syntax and fix them.
    Possibly introduce new syntax: "block { ... }" to repair old code. This would have
      the same effect as the current {} syntax.

 2. After a free block is parsed, check if it has references to outside values. For each,
    introduce a 'nonlocal' call at the front of the block, which points to the outside value.
     Check source repro for this.
 
 3. Add a method Closure.call
   Pushes the block on the stack, and inserts bindings into the 'nonlocal' slots in the
   new frame.

Now, whenever any value is used as an output, it may be an escaping closure. If so, we
need to capture the stack values and save them into a list in the Closure value.

How to do this sanely?

  For a given term, we can statically know whether any closure block refers to it.
  Ditto for the block
  When the block finishes, it may contain a ClosureCapture operation. This op will
  check if any outputs have type Closure, if so then copy the relevant terms to
  the bindings list.

Old notes...


- At the time of closure creation
    Find the function
    Identify the function's outer inputs
    Count how many stack frames are needed
    Create limited copies of the outer stack frames. These copies will include:
      Branch pointers
      Register list with value copies of only the used values
      Don't need registers for the target function, but we do need a Branch pointer
    Wrap all that up, it's our closure

- At the time of closure evaluation
    Push every stack frame (?)
    Push the target function
    Continue as normal, target function will find inputs
    Pop all our stack frames
      Mark each frame as belonging to a closure, so that we know how many to pop
    Potential problem: too many frames on stack?

