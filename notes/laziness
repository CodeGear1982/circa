
Want to implement lazily-evaluated calls.

This could be built upon BranchFilter objects. Each BranchFilter has a Branch* and some
metadata for how to iterate over the terms.

type BranchFilter
  int start()
  int advance(int current)
  bool end(int current)

Some examples of branch filters:

  Eager - iterate over eagerly-evaluated terms
  Range - iterate over a certain range of terms
  One - iterate over one specific term

Each Frame takes a BranchFilter

Evaulation of a lazy term would proceed:

Branch x
  a = eager()
  b = lazy()
  c = eager(b)

Push a frame with Eager(x)
EagerBranchFilter step 1: evaluate 'a'
EagerBranchFilter step 2: skip over 'b' (maybe leave it with a value of :Unevaluated)
EagerBranchFilter step 3: reach 'c'.
 - Interpreter will notice that it needs 'b'.
 - Push a frame with One(b)
   - In the created frame, 'b' is evaluated
   - The new frame finishes, and the result of 'b' is placed in the proper slot
 - Now that input 'b' is available, evaluate 'c'.

Problem: If 'b' is evaluated in a seperate frame, then it will have trouble finding
any local values. Maybe the locals stack should be seperated? The branch-filter stack
would be a seperate entity.

# Alternative: Evaluation of lazy terms occurs when a term calls INPUT(x)
  Problem: This will not support pause/resume from within the lazy call. This is a fatal
  problem.

# Complexity

To what extend will this complicate things?

EvalContext will be more complicated, with the second stack.
 - Though if we want to support pausing, this amount of complexity is necessary

Can't just iterate through the branch to evaluate
 - Although you can't do this anyway, because of pausing
 - More complexity in one place: run_vm

Will this add a penalty to the common case?
 - Maybe a small one?
 - Wouldn't be too hard to provide an optimized run_vm that doesn't make these checks
 - Lazy evaluation is going to be a pretty big performance win overall


# More thoughts:

The above example is flawed because there is no possibility for 'b' to not be evaluated.
Once again:

Branch x
  a = eager()
  b = lazy()
  c = eager(b)

The 'c' call must say whether or not it wants the result from 'b'.

This could be:
 - A function input annotation on 'c', such as :AcceptsLazy
 - When 'c' evaluates, it can trigger a runtime call such as request_lazy_value. The
   evaluation function would end here, and the interpreter would proceed to evaluate
   the lazy call. When finished, 'c' would be called again with the value available.

This plan only really accomplishes conditional evaluation within the same branch, and
the only advantage is that the term is implicitly in a condition instead of being
in an explicit if-block.
 - Although, this isn't a terrible thing by itself. This would also help solve the
   problem of short-circuited conditionals.

With real lazy evaluation, we would be able to pass the lazy-value around as a regular
value, and only unbox it at the moment it was necessary. So the lazy call would create
a thunk, and when the thunk is used by a non-lazy call, it would be evaluated.

Whether or not we create thunks, we need an evaluation strategy that can just pick one
term out of a branch. This strategy will also need to handle the case where input values
are in an upper frame.

So, the plan:
 - There are now two evaluation strategies:
   - 'eager' will iterate through every term in the branch, and only evaluate the non-lazy terms
   - 'range' will iterate across a specific range. Doesn't care about laziness

 - Each Frame has an evaluation strategy
 - run_interpreter uses frame->strategy to find the finishing term index (currently it
   uses branch->length)
 - run_interpreter also uses strategy_next() to advance the PC
