This file contains various thoughts on Circa's syntax

names have no explicit type or data, they just hang on (possibly multiple) terms
  Similar to some dynamic languages
  We work the same way. It's good.
  Though it might be nice to have a compiler hint pass that warns when a name changes type

Array literals
  Currently []
  Commas are optional so we can write [1 2 3]
  This is working well

Array access
  Currently a[1]
  Got any better ideas? Not really
  Note that there is a possible collision if we have space-seperated lists, and we use []
  for array literals. This: [foo [1] 2] would mean something different than: [foo[1] 2].
  But this is not so bad, we can just say that you can't have whitesapce between the foo and [1].
  It looks weird anyway.

For loop syntax?
  Currently: for i in list
  Seems weird to have a keyword 'in' for this one thing
  Also should there be a way to specify the iterand's type?
  Alternatives:
    for i : list
    for (i in list)
    for (i : list)
    for Type i in list
    for Type i : list

Type annotation
  Currently use : operator
  Examples:
    a = 1:int
    b = [1 2] : Point
  Haskell and some other languages use ::, though : seems to be more popular
  It might be nice to use :: so that we can use : for something else.
  ("Everyone wants the colon" - Larry Wall)
  Alternatives:
    int myInt
    myInt::int
    myInt:int
    myInt : int
    myInt [::int]
    myInt [t:int]
    for i [::int] in list
    for (i [::int] in list)

Method chaining
  Important to make this easy
  blah().foo().baz()
  blah.foo.baz -- omit the ()s as in Ruby. This would be nice

Omitting , or ; or newlines
  Inspired from Lua. In Lua, you can write this: 1+2 3*4 print('a')
  Creates confusion with - operator. This: [1 -2] is different than: [1 - 2]

Lambdas
  Most likely going to use {}s
  Not sure how to indicate inputs
  Also not sure how to specify return value (explicit or implicit return)
  Some variations:
    l = {x,y | x + y}
    l = {x,y | return x + y}
    l = { ->x ->y; return x + y}
    l = {x:int, y:int | x + y}
    l = {x:int, y:int | return x + y}
    
Multi-line lambdas
  I like how easy it is to pass a block to a function call in Ruby
  Ideas:
    map(items) do |x|
      x = x + 1
    end

    items = map(<block>, items)
      x = x + 1
    end

    items = map(..., items)
      x = x + 1
    end
