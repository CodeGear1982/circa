
New rules for how runtime errors are saved to the stack:

An error might occur at different times:
 - While trying to find a block to push a new frame
 - While executing an in-place instruction
 - While casting or transferring inputs to a new frame
 - The NativeCall itself may raise an error
 - While casting or transferring outputs from the finished frame

So, here are the following rules for saving errors:
 - termIndex must be correct on all frames. Often, the error code must save
   a correct termIndex on the top frame.
 - The error message is saved on a register in the top frame, with the
   same index as Frame.termIndex.
 - The errored term may be an input_placeholder or output_placeholder. If so,
   then the topmost stack frame is *not* displayed in the trace.
     - If the error is on an input_placeholder, it's assumed to be an error that
       occurred when moving/casting inputs to the frame.
     - If the error is on output_placeholder #0, it's assumed to be an error that
       occurred within the function.
 - If the errored term is not input_placeholder or output_placeholder, then the topmost
   stack frame *is* displayed in the trace.
     - This is the case for errors with in-place instructions.
