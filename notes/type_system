
Type inferrence
---------------

Currently we use local type inferrence only.

 - Not possible to infer function parameters
   - Code must always declare input types
 - Not possible to infer output types for a recursive function
   - Code must declare return types for recursive functions
   - Currently, return type must always be declared
     - We could be inferring output types for non-recursive functions.

Another restriction, no generic types.
 - Planned for future
 - Every list access will have type 'any'
 - Every for-loop iteration will have type 'any'


Runtime typing
--------------

Everything that works with static types should work when all types are 'any'.

When static types affect code generation:
 - The code generator be able to generate a "fallback" case, used when some or
   all of the types involved are 'any'. The fallback case must produce the same
   runtime result and cause the same effects as the statically-typed case.
   
   Differences that are allowed in the fallback case:
    - Compiled code may be different (it should look similar though)
    - Static type of the result may be different

 - Additionally consider the case where a term's type changes. This may cause any
   code that relies on static typing to change.


Methods
-------

Methods as defined currently are a problem. Some methods will rebind the 1st argument
and some won't, but this is statically-typed knowledge. So the question is: what should
dynamic methods do?

 - Solution 1: All dynamic methods rebind the 1st input. This might cause confusion.
 - Solution 2: Require rebinds to be declared at callsite. This could look like:

     list = []
     for i in [1 2 3]
         @list.append(i)

     or:
         
         list@.append(i)

  Now the rebind is no longer affected by static typing.

  This is more annoying to type, but we like being explicit about rebinding.
