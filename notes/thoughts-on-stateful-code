
Problem: stateful-value has some state that needs to be persisted, for every for-loop iteration.

This is a problem that we need to solve anyway.

For every term in a branch:
  Check if it has state. If so, we need to copy it.
  Add it to the branch's state.
    * Need a way of uniquely associating it with its term. 
    * Names are not good, they aren't unique.
    * Maybe the strategy of duplicating the whole branch was not so bad.

stateful-value is weird, because the output value is the thing we want to save.
But it also has some state that we want to save.

Why do we have this difference? What would happen if we combined output and state?

The following terms have state:
 - apply-feedback (branch). No output
 - comment (string). No output
 - if (branch). No output
 - set_field (int)
 - stateful_value

There is another thing we could split: const-state. Stuff that is specified at compile
time, but is not changed. What's our plan for this? The solution here seems similar.

The value-state boundary is not very well defined. An example is branch(), which
seems like it should keep its terms as state (since that is how everyone else does
it). But it makes them available as output.

One reason to combine value and state. At some point, we'll want to access state
programatically. But we want the same syntax for output access and state access.
The user shouldn't have to know or care about whether the thing they want is
in output or state (branch is a good example of confusion). So at some point we
would need a function-specific dispatch anyway.

Another advantage to combining. The new representation would probably be easier to
stick in LLVM or otherwise.

Proposal:
 - Compile-time stuff stored as properties.
 - Eliminate the seperate ->state field.
 - Function-specific way of specifying disposable value vs state
 - For functions which don't fit in this model (such as stateful-value), we can add
   hidden terms to help resolve it. Example:
     a = stateful-value(x) outputs { value x, bool initialized }
     hidden term: get-stateful-value(a) outputs value x
