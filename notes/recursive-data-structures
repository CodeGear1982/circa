
Thoughts on recursive data structures-

Types are like this, because one can define something on a parent type that
is meant to apply to subtypes (but each subtype object does not need to
duplicate that data).

So can we use this same concept for other structures?

One recent example is the Map function. There is a mapGenerator which takes
input/output types, and returns a usable Map function. Every instance of this
map function has similar pieces of data. But how to avoid reproducing the
common data?

One option: 'phantom' data. We have a function chain that is suppossed to return
a piece of data, but we don't actually hang on to a copy of that data. If something
needs the data, they can trace the function chain and extract what they need.

This could also be a source of optimization. Instead of always storing term output,
we can have a system where some term outputs are computed as-needed (and then thrown
away).
