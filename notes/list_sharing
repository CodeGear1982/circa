
Notes on value sharing

- Motivation

Currently we've been operating in a world of immutable values, which gives us advantages
in terms of introspection and pure evaluation.

However the current strategy of copy-everything is ridiculous from a performance point
of view. Need to be able to pass around shared pointers while preserving guarantees.

- Example

a = [1 2]
b = a
b.append(3)
# what's the value of a ?

- Our strategy

Every list starts out as mutable.

As soon as the list is copied, we mark the list 'immutable' and then the copy is a shared
reference.

Need to do garbage collection on the shared references (currently we use reference counting)

If anyone wants to modify a list marked 'immutable', they first call list_touch which gives them
a duplicate list. The immutable list is unharmed.

The only thing that can happen to an immutable list is that people stop referencing it, and
it gets garbage collected.

The tricky part is enforcing usage. Anyone that retrieves an element of the list is a potential
culprit for violating immutability.

We should have some debugging mode to catch these violations, such as a builtin checksum.
