
Goals of a module system

  Easy sharing of a bundle of code
  Abstraction, don't be restricted to a certain implementation
  Public & private elements (for convenience of the consumer)
  Compiler knows how to locate code files that are located elsewhere

  Stretch goals
    Automatically download code from remote package repository

Implementation
  Have a special file that defines 'exports', where the export value is specified as a
  dictionary or namespace or something. The value would contain references to functions,
  types, and constants.


Document-as-function
  It would be nice to specify that an entire .ca file should be treated as one big function
  Some kind of special syntax for this?
  Is the special syntax inside the .ca file, or does it depend on how the file is used?
  Maybe we can assume that every .ca file has this property?

Convenient intra-module references
  It would be nice if the author could write a bunch of .ca files, put them in the same directory,
    and be able to use cross-file references with minimum work.
  Can we just assume that neighboring files are visible?
    This is probably error prone
    And I already have a ton of test code that would break under this rule.
  Maybe a module has a magical "module.ca" file, which can allow implicit intra-file references?

  Comparison with other systems
    Most require individual files to be imported
    Python allows a folder to be a module with magical __init__.py file
      But, it still doesn't allow implicit intra-module references
