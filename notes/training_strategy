
Notes:

Overall goal to support training:

Generate some network of terms that, when evaluated, causes training signals to be propagated
upwards. Allow for each function to specify how its piece of the network is created.

Should this be a seperate code unit? Probably


Variable X
  |
  V
Function A
  |
  V
Function B
  |
  V
Implant (with target)


Results in:

Literal, equal to 'target'
  |
  V
passTrainingSignal of Function B
  |
  V
passTrainingSignal of Function A
  |
  V
assign to X

Two ways to do it:
1) Each term pushes its training signal result to inputs <--
2) Each term pulls its training signal result from users

---

In the case of feedback to a variable:

When the parser encounters := operator, it calls putFeedbackFunc(subject, desired)

putFeebackFunc:
  finds the feedbackFunc of subject (creating if it exists)
  adds 'desired' to the inputs of feedbackFunc

In the case of multiplication:

putFeedbackFunc:
  uses the inputs of 'subject' to calculate the 'desired' for each input
  calls putFeedbackFunc(each_input, desired)

---

Every function has the following things defined:

- An accumulation function
- A distribution function ("putFeedback")
