
----------------

: operator for application:

  Maybe repurpose the : operator so that this expression:

  <function> : <arg0, arg1..>

  would be the same as this

  <function>(<arg0, arg1..>)

  Advantages:

  Declaring structured data could look a little nicer

  Point: [1 0]
  a = Point: [1 0]

  You could set up an environment to look like a config file

  window_title: "Hello"

  Problems:

  Need to know the function in order to parse properly. Failure to find the function
  would lead to confusing errors.

    Possible solution: only allow this syntax for 1-argment functions.

  Alternatively, maybe this operator could just be used for name binding

  <name>: <expression>
  is the same as
  <name> = <expression>

  This version is closer to the meaning that someone would guess.

----------------

*= operator for function application & renaming

<name> *= <function>

would be the same as

<name> = <function>(<name>)

Alternatives:

a *= guassian
a ~= guassian

----------------

Curry syntax

Would be great to be able to express a function call with only some arguments filled in.

Might look like:

min(1.0, **)
min(1.0, ^)

With the above *= operator, we could have this useful expression:

a ~= min(1.0, ^)
