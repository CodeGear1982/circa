
When parsing an identifier or qualified identifier, should we always produce a copy() term,
or should we return the actual term with that name?

In favor of producing a copy():

  This makes more sense from a parsing point of view; the identifier() function is essentially
  the only one which does not produce new terms.

  If there are alternative syntaxes for referring to a term, then we need some way to store
  the syntax that was used. Examples:
    namespace a { b = 1 }
    func(a:b) -- fully qualified namespace
    using a   -- this statement doesn't exist now but it might
    func(a:b, b)   -- now the 'a:' prefix is optional 

In favor of not producing copy():

  Some functions need to know about the actual term in order to work properly. This includes:
    assign() and ref()
  Also it would be nice to avoid a funny intermediate state if it doesn't really help
  
Alternate plans:

 1) Produce a lot of copy() terms but strip them out in final compiled version
    - Downside, perhaps we want to know about the original term while parsing
 2) Don't parse qualified identifier like a normal parsing step: have it return a string.
    The caller is responsible for finding the term and storing the syntax. Also modify get_field
    so that it accepts a colon-separated name.
    
Going to use plan #2
