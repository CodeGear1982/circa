
Passing globals to the script execution..

When running a script, what we would like to do is call global functions like:

    draw_point([0 0] #fff)

And not worry about the drawing context (the 'painter' object). From the script-writer perspective,
it will all work itself out.

How do we pass in the global painter object in a sane way?

Option 1: Hidden inputs
-----------------------

Construct a hidden input for the entire script. This will contain the global context.
Every time the script is invoked, the caller must provide the context object.

The definition of draw_point will look something like this:

  draw_point(Painter :implicit, Point loc, Color color)

User does not specify the implicit input.

Behind the scenes, when a call to draw_point is created, we'll find the script's global
input and use that as the call's input. So, everything will work out.

Option 2: Use shared mutable state to hold the global context.

Undesireable but much easier!

Option 3: Don't pretend that functions are global. Just have them call a method for this stuff.

As in:

   context = input()
   context.draw_point([0 0] #fff)

   or

   cxt = input()
   cxt.draw_point([0 0] #fff)

   or

   g = input()
   g.draw_point([0 0] #fff)

Simpler and not that bad!
