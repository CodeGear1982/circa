
Idea: patches

A 'patch' is similar to a function, except it is allowed to make structure-changing operations.
Functions can not.

Patches can be thought of as functions which must always be inlined. Patches create copies of their code for every instance that they are called. Functions only ever create one instance of their code.

Since patches will duplicate their code at call-time, they are allowed to use 'meta' operations, such as the -> syntax (for adding to the input of an existing term), or dependent typing.

Patches are somewhat similar to C++ templates.

Functions can be compiled so that they are fully layer A. Patches are layer B or C.

Patches should be used for things that occur at build-time. Patches should not be called often at run-time (perhaps they should be altogether impossible at run time?) 

Examples of operations that may be available to patches and not to functions:
State
Append a term to the inputs of an existing term
'This' pointer

Open questions:

How do we propagate changes made to a patch up to the patch definition? This can be hard if we allow dependent generation of code.

How much should we restrict operations available to patches? More restriction is probably wiser.

For any of the operations that we think of as patch-only, can we come up with layer A implementations? (or facsimilies?)
