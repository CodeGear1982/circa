
The current implicit name binding is error prone. An example is:
   for i in [] { value = 1 }
which dumbly tries to rebind the builtin value() function.

There's a band-aid now where for() doesn't try to rebind globals, but this problem
will still bite people on bigger programs.

I think the industry consensus is that explicit variable declaration (such as with the
'var' keyword) is the best approach.

Advantages of explicit variable declaration:
 - Compiler can catch typos in "<name> = ..." statements
 - Fixes bugs around accidental rebinding (such as the for-loop example)
 - Probably is a closer match to how people think

Advantages of implicit variable declaration:
 - Less thinking involved
 - Syntax is simpler

Can we support both?
 - Problem: If we allow "<name> = ..." then we are inviting some errors which explicit
     declaration was meant to solve.
 - Problem: Need sane rules for scope rebinding, or else people using implicit names will
     be surprised by the "for i in [] { value = 1 }" problem. Don't support the feature
     if using the feature is equivalent to walking a minefield.
