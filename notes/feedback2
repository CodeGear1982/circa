
Feedback system

Requirements
  Have a system where, starting with a result expression and a desire, we can attempt
  to modify the code to meet that desire.

  Other goals:
    The modification should be returned as a value (we should be able to examine it before
      making any changes)
    We should be able to provide additional constraints, such as specifying that only
      certain terms may be modified.
    The system should be able to specify why certain decisions were made.
    The system should gracefully handle situations that are impossible, or that it can't
      solve. It should be able to explain the cause of these failures to the user.


In more detail:
  
  We receive some information about a value of interest that we want to change
    This may just be a Term
    This may be an Interpreter stack (pointing at a term, with temporary variables, and caller)

  With that, we work our way up the dataflow to determine what to do
    This will involve a series of dependent questions
      Where does this value come from?
      When is this condition true or false?
    Build a hashtable of relevant facts, since we'll probably need to reuse some computations

  Multiple sources of feedback will need to cooperate?

Cooperation
  Top-level feedback requests (initiated by the user) will probably not need to cooperate?
    The user knows what they want
  If we spawn separate feedback channels, then those will need to cooperate

An example:

1: diamond = [[-1 0] [0 1] [1 0] [0 -1]]

2: diamond *= 5.0 #3
3: for p in @diamond { 
    3.1: p
    3.2: rotate(@p, spin)
}

4: draw_shape(diamond)
5: for p in diamond
    6: draggable_point(p)


Going through the example, step by step:

  Receive [[:changeRelative [3 3]] [Input 0 Term#6]]
    [Input 0 Term#6] is list_iterator
    Rule: All requests to list_iterator are forwarded to a get_index of the for loop's input
      For-loop is Term#5
      For-loop input is Term#3
      New destination: [index n [input 0 Term#5]]
      New destination: [index Term#3 :any]
    After applying rule, we have a diverted request:
      [[:changeRelative [3 3]] [index Term#3 :any]]

    Handle request to for-loop
      If the target is 'index', then we can unpack the index and forward the request to
      an expression inside the loop.

      Other notes:
        If target is not 'index', then what?

    Now we have a derived request:
      [[:changeRelative [3 3]] Term#3.1]]

      Term#3.2 is the rotate() function
      We need to go inside rotate(), to come up with a derived request targetting Term#3.1

    Request for Term#3.1 uses for-loop rule, to divert to Term#2
    Request is modified and results in a diverted request to Term#1

Building blocks:

  type StackPattern
    -- A pattern describing the current state of a Stack. This can have optional levels
    -- of detail.
    --
    -- Fields:
    --   Term target  - (this pattern only matches when PC is at this taret)
    --   List stack
    --     This is a stack of filters that refers to the top of the interpreter Stack.
    --     The 0th element refers to the Stack's top frame, etc.
    --     Elements in this stack can be [:any], [1], {term: Term#123}, or etc
    --     (needs more detail)

    Example:

    def f()
      for i in [0 1 2]
        1: x()
    
    def g()
      2: f()

    def h()
      3: f()


    The following are valid patterns that apply to Term#1

      [Term#1]        (Universal condition)
      [Term#1 [:any]] (Also universal - iterator 'i' may be any value)
      [Term#1 [1]]    (Only the 1st iteration of for loop)
      [Term#1 [:any] {term: #2}]    (Only when called from inside g())
      [Term#1 [:any] {term: #3}]    (Only when called from inside h())

  type Target
    -- Fields:
    --   Term term
    --   StackPattern stackPattern
    --   List subExpression
    
  type Request
    -- Captures a Desire against a Target, with an optional ConstraintSet.
    -- Fields:
    --   Target target
    --   List desire
    --   List constraintSet

  function advance_request(Request) -> RequestResult
    Takes a Request as input. Each Request includes a target, desire and constraints.
    Result can be:
      Failure           -- a failure, with explanation
      Request           -- a derived request, which can itself be advanced
      RequestDecision   -- a choice among multiple requests (this isn't fully specced)
      NeedsMoreDetail   -- a temporary failure, the operation should be re-run with
                           more constraints.


Another thing to consider:
  The search will need to look at the current state of the Interpreter, when resolving
  any if-block or cond() terms. Not yet sure the best way to handle that.
