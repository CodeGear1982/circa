
Every term has:

Function (a pointer to a term, use its value)
Inputs (pointers to terms)
Value
[Branch]

Every Function has:

Input types (pointer to terms, use their values)
Output types (ditto)
Body

**

The steps to create a constant out of nowhere:

term
term.function = some_function
term.value = initial_value
some_function.inputs = []
some_function.outputs = [type_term]

**

Need to create the following terms for bootstrapping:

Type
Function
constant



**


Function

type(Type) := Type
type(Function) := Type
type(int) := Type
type(float) := Type
type(str) := Type

type(constant) := Function
constant(Type)



Type = constant-Type
(constant-Type Type)

(constant-Type int)
(constant-Type float)
(constant-Type str)
(constant-Type Function)
(constant-Function constant)

 
constant is a Function that takes a Type and outputs a Function
constant[X] is a function that takes no inputs and outputs X


Bootstrapping process:

Hand-create the constant[Type] function
Create a term for Type, mostly empty. Set value to our constant[Type] function.
In the constant[Type] function, set the output type to our Type term

Hand-create the constant[Function] function, use Type for its type
Create a term for Function, use constant[Function] as its function
