
state mouse_x = 0.0
state mouse_y = 0.0
state elapsed = 0.0
state time = 0.0

type Point { float x, float y }
type Box { float x1, float y1, float x2, float y2 }

def mouse_in(Box b) : bool
  return (b.x1 < mouse_x) && (b.x2 > mouse_x) && (b.y1 < mouse_y) && (b.y2 > mouse_y)
end

-- p2c: polar to cartesian
def p2c(float angle, float radius, Point center) : Point
  return [cos(angle) * radius + center.x, sin(angle) * radius + center.y]
end

def highlight_point(Point p)
  _point_highlight_dist = 10.0
  fill_circle(p.x p.y _point_highlight_dist 0xccffcc55)
  circle(p.x p.y _point_highlight_dist 0xffffff55)
end

users_branch = branch()
