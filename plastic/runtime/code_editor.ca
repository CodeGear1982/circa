
def draw_code_editor(BranchRef branch)

    source = format_source(branch)

    letter_width = 8
    letter_height = 17

    def get_fg_color(int highlight_type) -> Color
        if highlight_type == styled_source:literal_string
            return #884c03
        elif highlight_type == styled_source:literal_number
            return #2f2be2
        elif highlight_type == styled_source:paren
            return #003366
        elif highlight_type == styled_source:comment
            return #505050
        elif highlight_type == styled_source:name
            return #003366
        elif highlight_type == styled_source:type_name
            return #003366
        elif highlight_type == styled_source:function_name
            return #aa3366
        elif highlight_type == styled_source:infix_operator
            return #aa3366
        elif highlight_type == styled_source:keyword
            return #000000
        else
            return #003366
        end
    end

    current_line = 0
    current_col = 0
    i = 0
    for phrase in source
        s = phrase[0] -> string
        r = phrase[1] -> Ref
        t = phrase[2] -> int

        loc = [current_col*letter_width current_line*letter_height] -> Point
        loc += [0 100]

        color = get_fg_color(t)

        visable_s = cond(s == '\n', "", s)
        text_sprite = text:render_text(coding_font, visable_s, color)

        rect = to_rect(loc, [text_sprite.width text_sprite.height])

        bg_color = #fff0
        cond(mouse_over(rect) #ffe @bg_color)

        draw_highlight_rect = t != styled_source:whitespace

        if draw_highlight_rect
            fill_rect(rect, bg_color)
        end

        text:draw_rendered_text(text_sprite, loc -> Point)
        if mouse_wheel_up(rect)
            r.tweak(-1)
        elif mouse_wheel_down(rect)
            r.tweak(1)
        end

        i += 1
        current_col += s.length()
        if (s == '\n')
            current_col = 0
            current_line += 1
        end
    end
end

