
namespace text_input
    type TextInputState {
      string text
      int cursor
    }

    def input_character(TextInputState st, Keypress keypress) -> TextInputState
        text = st.text -> string
        if keypress.code == key:left
            st.cursor = round(max(0, st.cursor - 1))
        elif keypress.code == key:right
            st.cursor = round(min(text.length(), st.cursor + 1))
        elif keypress.code == key:delete
            st.text = concat(text.slice(0, st.cursor - 1), text.slice(st.cursor, text.length()))
            st.cursor = round(max(0, st.cursor - 1))
        else
            st.text = concat(text.slice(0, st.cursor), keypress.character,
                text.slice(st.cursor, text.length()))
            st.cursor = st.cursor + 1
        end
        return st
    end

    def get_input() -> string
        state TextInputState tis
        for key in recent_key_presses()
            input_character(@tis, key)
        end
        return tis.text
    end

    def draw_input(TTF_Font font, Color color, Point loc) -> string
        state TextInputState tis
        for key in recent_key_presses()
            input_character(@tis, key)
        end
        text = tis.text -> string
        draw_text(font, text, color, loc)
        fill_rect(to_rect([loc.x + tis.cursor loc.y] [2 15]), color)
        return tis.text
    end
end
