
desired_window_size = [500 400]

background(#042304)

def rect_intersects_circle(Rect rect, Point circle_loc, number circle_radius) :: bool
    -- lazy
    return rect_intersects_rect(rect, expand_rect(circle_loc, circle_radius, circle_radius))
end

def random_initial_direction() :: Point
    if rand() > .5 serve = 1 else serve = -1 end
    angle = rand() * .4 - .2
    return [cos(angle) * serve, sin(angle)]
end

state Point ball_loc = [window.width/2, window.height/2]
state Point ball_direction = random_initial_direction()
state number round_start_time = time
state int players_points = 0
state int ai_points = 0

paddle_width = 60.0
paddle_depth = 10.0
ball_speed = 6.6
ball_radius = 8.5

-- player's paddle on left
players_paddle_loc = [50 mouse.y] :: Point
players_paddle = expand_rect(players_paddle_loc, paddle_depth, paddle_width)

ai_speed = 3.5
ai_paddle_loc = [window.width - 50, approach(ball_loc.y, ai_speed)] :: Point
ai_paddle = expand_rect(ai_paddle_loc, paddle_depth, paddle_width)

ball_is_being_introduced = (time - round_start_time) < 2.0

if ball_loc.x + ball_radius < 0
    ai_points += 1
    ball_loc = [window.width/2, window.height/2] :: Point
    ball_direction = random_initial_direction()
    round_start_time = time
elif (ball_loc.x - ball_radius) > window.width
    players_points += 1
    ball_loc = [window.width/2, window.height/2] :: Point
    ball_direction = random_initial_direction()
    round_start_time = time
end

-- bounce balls off of top and bottom
if (ball_loc.y + ball_radius) > window.height
    ball_direction = [ball_direction.x -ball_direction.y] :: Point
elif (ball_loc.y - ball_radius) < 0
    ball_direction = [ball_direction.x -ball_direction.y] :: Point
end

def get_collision_vector(Rect paddle, Point point) :: Point
    paddle_center_x = (paddle.x2 - paddle.x1) / 2 + paddle.x1
    paddle_center_y = (paddle.y2 - paddle.y1) / 2 + paddle.y1
    paddle_size = (paddle.y2 - paddle.y1)
    collision_loc_on_paddle = (point.y - paddle_center_y) / paddle_size
    angle = collision_loc_on_paddle * .3
    v = [cos(angle) sin(angle)] :: Point
    return v
end

-- bounce ball off of paddles
if rect_intersects_circle(players_paddle, ball_loc, ball_radius)
    ball_direction = get_collision_vector(players_paddle, ball_loc)
end
if rect_intersects_circle(ai_paddle, ball_loc, ball_radius)
    ball_direction = get_collision_vector(ai_paddle, ball_loc)
    ball_direction = [-ball_direction.x ball_direction.y] :: Point
end

-- move ball
if not(ball_is_being_introduced)
    ball_loc = ball_loc + ball_direction * ball_speed
end

-- draw paddles
draw_box(players_paddle, #fff)
draw_box(ai_paddle, #fff)

-- draw ball
show_ball = not(ball_is_being_introduced) or alternate_over_time(0.2)

if show_ball
    gl.circle(ball_loc, ball_radius, #fff)
end

def draw_text_centered_y(TTF_Font font, string str, Color color, Point location)
    render = text.render_text(font, str, color)
    text.draw_rendered_text(render, location.x - render.width/2, location.y)
end

-- draw status
draw_text_centered_y(ui_font_medium, concat('Score'), #fff, [window.width/2, 20])
draw_text_centered_y(ui_font_medium, concat(players_points ' : ' ai_points), #fff, [window.width/2, 40])
