
background(#eef)

def interp(number progress, number e) -> number
  return(min(progress / e, 1.0))
end

desired_window_size = [480 600]

def tree_segment(Point base, number direction, number width, number depth)
  state jitter = (rand() - .5) *.3
  state max_length = 20 + 30 * rand()
  state age = 1.0
  age += time_delta
  seg_length = 20.0 * log(age)
  min(@seg_length, max_length)
  --direction = direction + jitter
  bottom_width = width * interp(age, 8)

  has_branches = (seg_length > .4*max_length) and depth < 4.0

  top_width = width * interp(age, 11)
  if_expr(has_branches, @top_width, 0.0)

  l = polar(direction - .5, bottom_width, base)
  r = polar(direction + .5, bottom_width, base)
  next_center = polar(direction, seg_length, base)
  l2 = polar(direction - .5, top_width, next_center)
  r2 = polar(direction + .5, top_width, next_center)
  gl:triangles([r l l2 l2 r2 r] #440101)

  if has_branches
    state l_jitter = rand() * .2
    state r_jitter = rand() * .2
    l_branch = tree_segment(next_center, direction - l_jitter - .3, width - .4, depth+1)
    r_branch = tree_segment(next_center, direction + r_jitter + .3, width - .4, depth+1)
  end
end

starting_width = 3.0

root = tree_segment([200 300], -.5, starting_width, 0)
