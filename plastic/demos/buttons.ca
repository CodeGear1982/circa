
background(#eef)

button_labels = ["Button1", "Button2", "Button3"]

loc = [30 30] -> Point

button_size = [100 20] -> Point

normal_color = #0f0
highlight_color = #555
click_color = #f0f

current_y = loc.y

state clicked_button = 0

for label in button_labels
  state id = unique_id()

  button_loc = [loc.x, current_y] -> Point
  b = [button_loc.x, button_loc.y, button_loc.x+button_size.x,
       button_loc.y+button_size.y] -> Rect

  color = 0
  if mouse_in(b)
    color = highlight_color
  else
    color = normal_color
  end

  if mouse_clicked(b)
    clicked_button = id
  end

  if clicked_button == id
    color = click_color
  end

  fill_rect([b.x1 b.y1 b.x2 b.y2] color)

  text_sprite = text:render_text(ui_font_medium, label, #000)
  text:draw_rendered_text(text_sprite, [button_loc.x + 3,
      button_loc.y + (button_size.y - text_sprite.height) / 2])

  current_y += button_size.y + 9
end

def draggable_rect(Point initial_location, Point size) -> Point
    state Point location = initial_location
    rect = [location.x, location.y, location.x+size.x, location.y+size.y]
    state currently_dragging = false
    state Point mouse_offset = [0 0]
    if currently_dragging
        location = mouse + mouse_offset
        if not(mouse_pressed())
            currently_dragging = false
        end
    elif mouse_clicked(rect)
        currently_dragging = true
        mouse_offset = location - mouse
    end
    return location
end

def draggable_box(Point initial_location)
    size = [100 50] -> Point
    location = draggable_rect(initial_location, size)
    fill_rect([location.x location.y location.x+size.x location.y+size.y] normal_color)
    
    text_sprite = text:render_text(ui_font_medium, "Draggable", #000)
    text:draw_rendered_text(text_sprite, [location.x + (size.x - text_sprite.width)/2,
        location.y + (size.y - text_sprite.height) / 2])
end

draggable_box([300 40])
draggable_box([300 90])
