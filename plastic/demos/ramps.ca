
desired_window_size = [630 450]

tile_size = 30

-- rotations
NW = 0
NE = 1
SE = 2
SW = 3

def rotations_opposite(int x, int y) -> bool
  if x == NW
    return y == SE
  elif x == NE
    return y == SW
  elif x == SE
    return y == NW
  else
    return y == NE
  end
end

num_tiles_x = window.width // tile_size
num_tiles_y = window.height // tile_size
num_tiles = num_tiles_x * num_tiles_y

state rescued_creatures = 0

-- Draw the checkerboard in the background
for x in 0..num_tiles_x
  for y in 0..num_tiles_y
    box_tl = [x::int * tile_size, y::int * tile_size] -> Point
    box_br = box_tl + [tile_size, tile_size]
    box_tr = [box_br.x box_tl.y]
    box_bl = [box_tl.x box_br.y]
    color = if_expr((x::int+y::int) % 2 == 1, #eee, #fff)
    gl:triangles([box_tl box_tr box_bl box_tr box_br box_bl] color)
  end
end

-- Draw the goal label
small_font = text.load_font("../assets/sv_basic_manual/SVBasicManual.ttf", 18)
def draw_goal_label(Point loc)
    draw_text_centered(small_font, "GOAL", #000, loc)
    loc += [-15 20]
    arrow_head = loc+[20 0]
    gl:line_strip([loc arrow_head], #000)
    gl:line_strip([arrow_head+[-5 -5] arrow_head arrow_head+[-5 5]] #000)
end

draw_goal_label([window.width - 50 window.height / 2])

-- Draw # of points
big_font = text.load_font("../assets/sv_basic_manual/SVBasicManual.ttf", 40)
draw_text_centered(big_font, concat('Rescued: ' rescued_creatures) #000
    [window.width/2 20])

-- Helper function
def rotate_points_around(List points, Point center, number rot) -> List
    for point in @points
        point = point::Point
        point = point - center
        point = [point.x*cos(rot) - point.y*sin(rot), point.x*sin(rot)+point.y*cos(rot)]
        point = point + center
    end
    return points
end

def rotate_around_i(Point_i point, Point_i center, int rotation) -> Point_i
  rotation = rotation % 4
  
  result = [0 0]
  point = point - center

  if rotation == 0
    result = [point.x point.y]
  end
  if rotation == 1
    result = [-point.y point.x]
  end
  if rotation == 2
    result = [-point.x, -point.y]
  end
  if rotation == 3
    result = [point.y, -point.x]
  end
  
  return result + center
end

type Piece { int x, int y, int rot }
type BoardPiece { int rot, bool filled, bool square_filled }

def draw_free_piece(Point location, number rot)
    shape = [[0 0] [1 0] [0 1]]
    rotate_points_around(@shape, [.5 .5] rot)
    mult(@shape, tile_size)
    for p in @shape
        p += location
    end
    gl:triangles(shape, #404)
end

def draw_piece(Piece piece)
  draw_free_piece([piece.x * tile_size, piece.y * tile_size] piece.rot/4.0)
end

def board_index_to_loc(int index) -> Point_i
  return [index // num_tiles_y, index % num_tiles_y]
end

def board_loc_to_index(Point_i point) -> int
  return point.x * num_tiles_y + point.y
end

def initialize_board_piece(int index) -> BoardPiece
  loc = board_index_to_loc(index)
  if loc.y < 12
    return [0 false false]
  else
    return [rand_i()%4 true rand_i()%10 > 8]
  end
end


piece_types = [
    [[0 1 SE]]
    [[0 1 SE] [1 1 NW]]
    [[0 1 SE] [1 1 NW] [0 1 NW]]
]

def get_random_piece_type() -> List
  i = rand_i() % length(piece_types)
  return piece_types[i]
end

type FallingGroupPosition {
  int rot
  int x
  int y
}

state falling_group = get_random_piece_type()
state falling_group_pos = [0 4 0] -> FallingGroupPosition
fall_speed = 80.0
state number tile_fall_distance = tile_size

state board = map(initialize_board_piece, 0..num_tiles)

def rotate_falling_group(List group, int rot) -> List
    for piece in @group
        piece = piece::Piece
        pos = rotate_around_i([piece.x piece.y] [1 1] rot)
        piece = [pos.x pos.y (piece.rot + rot)%4]
    end
    return group
end


def position_falling_pieces(List group, FallingGroupPosition pos) -> List
  group = rotate_falling_group(group, pos.rot)
  def position_piece(Piece piece) -> Piece
      pos = [piece.x + pos.x, piece.y + pos.y] -> Point_i
      return [pos.x pos.y piece.rot]
  end
  out = map(position_piece, group)
  return out
end


def falling_pieces_collide(List group) -> bool
  def piece_collides(Piece piece) -> bool
    board_piece = board[board_loc_to_index([piece.x piece.y])] -> BoardPiece
    if board_piece.square_filled
      return true
    else
      if board_piece.filled
        ro = rotations_opposite(piece.rot board_piece.rot)
        return not(ro)
      else
        return false
      end
    end
  end

  return any_true(map(piece_collides, group))
end

def falling_group_collides(List group, FallingGroupPosition pos) -> bool
    return falling_pieces_collide(position_falling_pieces(group, pos))
end

-- User's movement of falling group
users_movement = [0 0 0] -> FallingGroupPosition
if key_pressed(DOWN)
  users_movement.rot = -1
end
if key_pressed(UP)
  users_movement.rot = users_movement.rot + 1
end

if key_pressed(LEFT); users_movement.x = -1 end
if key_pressed(RIGHT); users_movement.x = users_movement.x + 1 end

users_requested_position = falling_group_pos + users_movement

if not(falling_group_collides(falling_group, users_requested_position))
    falling_group_pos = users_requested_position
end

-- Update fall animation
tile_fall_distance -= fall_speed * time_delta

landed_falling_group = []

-- Check to move falling group down a step
if tile_fall_distance < 0
  tile_fall_distance = tile_size

  -- Check if the falling group has landed
  next_falling_group_position = position_falling_pieces(falling_group, falling_group_pos + [0 0 1])

  if falling_pieces_collide(next_falling_group_position)
    landed_falling_group.append(next_falling_group_position)
    -- Make this piece permanent
    falling_group_position = position_falling_pieces(falling_group, falling_group_pos)
    for piece in falling_group_position
      piece = piece::Piece
      existing_board_piece = board[board_loc_to_index([piece.x piece.y])] -> BoardPiece
[piece.rot true existing_board_piece.filled]
      board = set_index(board, board_loc_to_index([piece.x piece.y]), [piece.rot true existing_board_piece.filled])
    end

    -- Reset falling group
    falling_group = get_random_piece_type()
    falling_group_pos = [0 4 0]
  else
    falling_group_pos = falling_group_pos + [0 0 1]
  end
end

-- Draw the current position of the falling group
falling_group_pos = falling_group_pos -> FallingGroupPosition
positioned_falling_group = position_falling_pieces(falling_group, falling_group_pos)

for piece in positioned_falling_group
    piece = piece::Piece
    draw_free_piece([piece.x * tile_size, piece.y * tile_size - tile_fall_distance] piece.rot/4.0)
end

-- Draw board
for index in 0..num_tiles
  piece = board[index] -> BoardPiece
  loc = board_index_to_loc(index)
  if piece.filled
    draw_piece([loc.x loc.y piece.rot])
  end
  if piece.square_filled
    draw_piece([loc.x loc.y piece.rot + 2])
  end
end

-- Handle creatures
type Creature {
  int tile_x,
  int tile_y,
  number tile_x_progress
  int walking_dir
}

def repeating_signal(number period) -> bool
    state number time_till_next = period
    time_till_next -= time_delta
    if time_till_next < 0
        time_till_next = period
        return true
    else
        return false
    end
end

def find_highest_tile_for_x(int tile_x) -> int
    -- this code is blah
    found = 0
    for i in 0..num_tiles_y
        board_piece = board[board_loc_to_index([tile_x, i])] -> BoardPiece
        if board_piece.filled and found == 0
            found = i
        end
    end
    return found
end

state List creatures = []

-- Check to spawn a dude
time_between_creatures = 10
time_till_next_creature = time_between_creatures-mod(time, time_between_creatures)
state prev_time_till_next = time_till_next_creature

spawn = false
if prev_time_till_next < time_till_next_creature
    spawn = true
end
prev_time_till_next = time_till_next_creature

if spawn
    new_creature = [0 find_highest_tile_for_x(0) 0 1] -> Creature
    creatures.append(new_creature)
end

draw_text(small_font, concat("Next dude in: " floor(time_till_next_creature)),
    #000, [10 window.height/2])


-- Figure out the path that creatures can walk on
type PathSegment { Point l, Point r }

def get_path_segment(int tile_x) -> PathSegment
    tile_y = (find_highest_tile_for_x(tile_x))
    board_piece = board[board_loc_to_index([tile_x,tile_y])] -> BoardPiece

    x1 = tile_size*tile_x
    x2 = tile_size*(tile_x+1)
    if board_piece.square_filled or (board_piece.rot == NW) or (board_piece.rot == NE)
        result = [[x1, tile_y*tile_size], [x2, tile_y*tile_size]]
    elif (board_piece.rot == SW)
        result = [[x1, tile_y*tile_size], [x2, (tile_y+1)*tile_size]]
    else
        result = [[x1, (tile_y+1)*tile_size], [x2, tile_y*tile_size]]
    end

    return result
end

path = map(get_path_segment, 0..num_tiles_x)

for segment in path
    segment = segment -> PathSegment
    draw_thick_line(segment.l segment.r 2.0 #f00)
end

-- Move creatures
for creature in @creatures
    creature = creature::Creature
    speed = .5
    creature.tile_x_progress = creature.tile_x_progress + time_delta * speed * creature.walking_dir

    finished_tile = (creature.tile_x_progress >= 1.0 and creature.walking_dir == 1) or (creature.tile_x_progress <= 0 and creature.walking_dir == -1)

    if finished_tile
        -- check if there is a wall here
        this_path = path[creature.tile_x] -> PathSegment
        next_index = creature.tile_x + creature.walking_dir

        -- Check if the creature has made it to the right side of the screen
        if next_index >= num_tiles_x
            rescued_creatures += 1
            discard
        else
            if next_index < 0
                -- Creature wants to walk off the edge of the map
                next_path = [[100 100] [100 100]] -> PathSegment
            else
                next_path = path[next_index] -> PathSegment
            end

            if creature.walking_dir == 1
                -- Walking right
                close_point = this_path.r
                next_point = next_path.l
            else
                -- Walking left
                close_point = this_path.l
                next_point = next_path.r
            end

            if close_point.y > next_point.y
                -- Change direction if there isn't a smooth slope
                creature.walking_dir = creature.walking_dir * -1
            else
                creature.tile_x = creature.tile_x + creature.walking_dir
                creature.tile_x_progress = creature.tile_x_progress - creature.walking_dir
            end
        end
    end
end

def position_creature(Creature creature) -> Point
    path_segment = path[creature.tile_x] -> PathSegment

    track_pos = path_segment.l + (path_segment.r - path_segment.l) * creature.tile_x_progress
    return track_pos + [0 -tile_size/2]
end

creature_radius = 15.0
creature_color = #844

-- Draw creatures
for pos in map(position_creature, creatures)
    gl.circle(pos::Point creature_radius creature_color)
end

-- Kill creatures if the falling block touches them
type KilledCreature { Point loc, number age }

state dying_creatures = []

for creature in @creatures
    creature = creature::Creature
    position = position_creature(creature)

    collided = false
    for landed_group in landed_falling_group
        landed_group = landed_group::List
        for piece in landed_group
            piece = piece::Piece
            if piece.x == creature.tile_x
                collided = true
            end
        end
    end

    if collided
        dying_creatures.append([position 0])
        discard
    end
end

-- Draw killed creatures
for creature in @dying_creatures
    creature = creature::KilledCreature
    --color = creature_color + #000f * interpolate(1 0 3.0 creature.age)
    color = #555
    gl.circle(creature.loc creature_radius color)

    if creature.age > 3.0
        discard
    end

    creature = [creature.loc creature.age+td]
end

