
desired_window_size = [500 300]

background(#000)
include('drifting_stars.ca')

type Ship {
    Point loc,
    Point momentum,
    number facing
}

type Bullet {
    number lifespan,
    Point loc,
    Point direction
}

-- Return a point that is wrapped around the playable area
def wrap_around(Point p) -> Point:
    return [mod(p.x, window.width) mod(p.y, window.height)]

state Ship ship = [[window.width/2 window.height/2] [0 0] 0]
state List bullets = []

accelration_per_s = 5.0
rotation_speed = 0.9
ship_drag = 0.991
speed_limit = 1.8
bullet_speed = 200.0
bullet_width = 2.0

ship_size = 1.2
ship_front = 10.0
ship_back = 6.4
ship_wing_size = 11.4
ship_wing_rot = .40

namespace draw_ship
    def ship_point(number rot, number dist) -> Point:
        return polar(rot + ship.facing) * dist*ship_size + ship.loc

    gl:line_loop([ship_point(0 ship_front)
                  ship_point(ship_wing_rot ship_wing_size)
                  ship_point(.5 ship_back)
                  ship_point(-ship_wing_rot ship_wing_size)] #fff)
end

if key_down(key:left)
    rotation = -1
elif key_down(key:right)
    rotation = 1
else
    rotation = 0
end
ship.facing = ship.facing + rotation * rotation_speed * time_delta

-- Keyboard controls for acceleration
if key_down(key:up)
    thrust = 1
elif key_down(key:down)
    thrust = -1
else
    thrust = 0
end

ship.momentum = ship.momentum + [cos(ship.facing) sin(ship.facing)] * thrust * accelration_per_s * time_delta

-- Add drag
ship.momentum = ship.momentum * ship_drag

-- Enforce a speed limit on ship.momentum
speed = magnitude(ship.momentum)
if speed > speed_limit
    ship.momentum = ship.momentum * (speed_limit / speed)
end

-- Move ship
ship.loc = ship.loc + ship.momentum
ship.loc = wrap_around(ship.loc)

-- Press space to shoot a bullet
if key_pressed(key:space)
    bullets.append([0, ship.loc [cos(ship.facing) sin(ship.facing)]] -> Bullet)
end

-- Move bullets
def move_bullet(Bullet bullet) -> Bullet
    loc = bullet.loc + bullet.direction * bullet_speed * time_delta
    loc = wrap_around(loc)
    return [bullet.lifespan+time_delta, loc, bullet.direction]
end

bullets = map(move_bullet, bullets)

-- Remove old bullets
bullet_max_lifespan = 1.8
for bullet in @bullets
    bullet = bullet -> Bullet
    if bullet.lifespan >= bullet_max_lifespan
        discard
    end
end

-- Draw bullets
for bullet in bullets
    bullet = bullet -> Bullet
    points = [bullet.loc + [-1 -1] * bullet_width,
                  bullet.loc + [1 -1] * bullet_width,
                  bullet.loc + [1 1] * bullet_width,
                  bullet.loc + [-1 1] * bullet_width]
    gl:line_loop(points #fff)
end

type Asteroid {
  List edges
  Point location
  Point vel
  number rotation
  number rotation_vel
  number size
  number age
}

type Particle {
  number age
  Point loc
  Point vel
}

state List particles

asteroid_collision_radius = 20.0
asteroid_starting_size = 30.0
asteroid_num_edges = 10

def generate_asteroid(number size) -> Asteroid
    def get_edge(int index) -> Point
        angle = index / asteroid_num_edges
        return polar(angle) * (rand() * size + size/3)
    end

    rotation = rand() * .2 - .1
    return [map(get_edge, 0..10), random_location(), random_norm_vector()*10, 0, rotation size 0]
end

def generate_child_asteroid(Asteroid parent) -> Asteroid
    size = parent.size / 2
    def get_edge(int index) -> Point
        angle = index / asteroid_num_edges
        return polar(angle) * rand() * size + size/3
    end
    rotation = rand() * .2 - .1
    speed = rand()*20 + 20.0
    return [map(get_edge, 0..10), parent.location, random_norm_vector()*speed, 0, rotation size 0]
end

def generate_particle_burst(List particles, Point loc, Point vel) -> List
    for i in 0..6
        particles.append([0.0 loc vel*[rand() rand()] + [(rand()-.5)*100 (rand()-.5)*100]] -> Particle)
    end
    return particles
end

state List asteroids = []

state bool initialized = false
if not(initialized)
    for i in 0..3
        asteroids.append(generate_asteroid(asteroid_starting_size))
    end
    initialized = true
end

-- move asteroids
for asteroid in @asteroids
    asteroid = asteroid -> Asteroid
    asteroid.location = asteroid.location + asteroid.vel * time_delta
    asteroid.rotation = asteroid.rotation + asteroid.rotation_vel * time_delta
    asteroid.location = wrap_around(asteroid.location)
    asteroid.age = asteroid.age + time_delta
end

-- draw asteroids
for asteroid in asteroids
    asteroid = asteroid -> Asteroid

    def pos_edge(Point p) -> Point
        p = rotate_point(p, asteroid.rotation)
        p = p + asteroid.location
        return p
    end
    edges = map(pos_edge, asteroid.edges)

    gl:line_loop(edges, #fff)
    
    --gl:circle(asteroid.location, asteroid.size, #f00)
end

-- Check for collisions of asteroids and bullets
spawned = []

for asteroid in @asteroids
    asteroid = asteroid -> Asteroid
    collides = false

    for bullet in @bullets
        bullet = bullet -> Bullet
        if point_distance(asteroid.location, bullet.loc) < asteroid.size
            collides = true

            bullet_vel = bullet.direction * bullet_speed
            generate_particle_burst(@particles, asteroid.location, bullet_vel)

            discard
        end
    end

    if collides
        discard
    end

    if collides and asteroid.size > 10
        spawned.append(generate_child_asteroid(asteroid))
        spawned.append(generate_child_asteroid(asteroid))
        if rand() > .5
            spawned.append(generate_child_asteroid(asteroid))
        end
    end
end

for spawn in spawned
    spawn = spawn -> Asteroid
    asteroids.append(spawn)
end

max_particle_age = 3.0

-- Draw/update particles
for particle in @particles
    particle = particle -> Particle

    lifespan = particle.age / max_particle_age
    max(@lifespan, 1.0)
    color = #555 + #111 * (lifespan * 9)

    gl:points([particle.loc], color)

    particle.loc = particle.loc + particle.vel * td
    particle.age = particle.age + td + 4

    if particle.age > max_particle_age
        discard
    end
end

