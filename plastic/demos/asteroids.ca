
WINDOW_WIDTH = 300
WINDOW_HEIGHT = 300
WINDOW_TITLE = 'asteroids.ca'

background(#000)

type Ship {
    Point loc,
    Point momentum,
    float facing
}

type Bullet {
    float lifespan,
    Point loc,
    Point momentum
}

def wrap_around_x(float x) : float
    if x < 0
        return x + WINDOW_WIDTH
    elif x > WINDOW_WIDTH
        return x - WINDOW_WIDTH
    else
        return x
    end
end

def wrap_around_y(float y) : float
    if y < 0
        return y + WINDOW_HEIGHT
    elif y > WINDOW_HEIGHT
        return y - WINDOW_HEIGHT
    else
        return y
    end
end

def wrap_around(Point p) : Point
    return [wrap_around_x(p.x) wrap_around_y(p.y)]
end

state Ship ship = [[WINDOW_WIDTH/2 WINDOW_HEIGHT/2] [0 0] 0]
state List bullets = []
accelration_per_s = 5.0
rotation_speed = 0.9
ship_drag = 0.991
speed_limit = 1.8
bullet_speed = 3.0
bullet_width = 2.0

--tweak.button(&accelration_per_s, [5 50], 0.1)

def random_location() : Point
    return [rand() * WINDOW_WIDTH, rand() * WINDOW_HEIGHT]
end

-- Draw a background full of stars

for i in range(1000)
    state Point loc = random_location()
    state float intensity = rand()
    gl.line_loop([loc, loc+[.5 .5]] round(#111 * intensity))
end

-- Draw the ship
begin
    def ship_point(float rot, float dist) : Point
        return polar(rot + ship.facing, dist, ship.loc)
    end
    front_dist = 10.0
    back_dist = 2.0
    wing_dist = 9.0
    wing_rot = .4
    gl.line_loop([ship_point(0 front_dist) ship_point(wing_rot wing_dist)
        ship_point(.5 back_dist) ship_point(-wing_rot wing_dist)] #fff)
end

-- Keyboard controls for rotation
rotation = 0.0
if key_down(LEFT)
    rotation = -1
elif key_down(RIGHT)
    rotation = 1
end
ship.facing = ship.facing + rotation * rotation_speed * time_delta

-- Keyboard controls for acceleration
thrust = 0
if key_down(UP)
    thrust = 1
elif key_down(DOWN)
    thrust = -1
end

ship.momentum = ship.momentum + [cos(ship.facing) sin(ship.facing)] * thrust * accelration_per_s * time_delta

-- Add drag
ship.momentum = ship.momentum * ship_drag

-- Enforce a speed limit on ship.momentum
speed = magnitude(ship.momentum)

if speed > speed_limit
    ship.momentum = ship.momentum * (speed_limit / speed)
end

-- Move ship
ship.loc = ship.loc + ship.momentum
ship.loc = wrap_around(ship.loc)

-- Press space to shoot a bullet
if key_pressed(SPACE)
    bullets.append([0, ship.loc [cos(ship.facing) sin(ship.facing)] * bullet_speed] : Bullet)
end

-- Move bullets
def move_bullet(Bullet bullet) : Bullet
    loc = bullet.loc + bullet.momentum
    loc = wrap_around(loc)
    return [bullet.lifespan+time_delta, loc, bullet.momentum]
end

bullets = map(move_bullet, bullets)

-- Remove old bullets
def filter_bullet(Bullet bullet) : bool
    return bullet.lifespan < 1.8
end

bullets = filter(bullets, map(filter_bullet, bullets))

-- Draw bullets
for bullet in bullets
    bullet = bullet : Bullet
    points = [bullet.loc + [-bullet_width, -bullet_width],
                  bullet.loc + [bullet_width, -bullet_width],
                  bullet.loc + [bullet_width, bullet_width],
                  bullet.loc + [-bullet_width, bullet_width]]
    gl.line_loop(points #fff)
end
