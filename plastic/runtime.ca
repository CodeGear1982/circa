
-- Wrap up mouse position into a point (values are passed in from input.cpp)
mouse = [_mouse_x _mouse_y] : Point

def mouse_in(Box b) : bool
  return (b.x1 < mouse.x) && (b.x2 > mouse.x) && (b.y1 < mouse.y) && (b.y2 > mouse.y)
end

-- Text rendering functions
namespace text
    --type +native TTF_Font
    type RenderedText { int texid, float width, float height, string text }
    def load_font +native (state TTF_Font, string, int) : TTF_Font
    def render_text +native (state RenderedText, TTF_Font, string, int color) : RenderedText
    def draw_rendered_text +native (RenderedText, float x, float y)
    def draw_text +native (TTF_Font, string, float x, float y, int color) : RenderedText
end

-- polar: polar to cartesian
def polar(float angle, float radius, Point center) : Point
  return [cos(angle) * radius + center.x, sin(angle) * radius + center.y]
end

-- magnitude of a 2d vector
def magnitude(Point point) : float
    return sqrt(sqr(point.x) + sqr(point.y))
end

def draw_box(Box box, int color)
    nw = [box.x1 box.y1]
    ne = [box.x2 box.y1]
    sw = [box.x1 box.y2]
    se = [box.x2 box.y2]
    gl.triangles([nw ne se se sw nw] color)
end

ui_font_medium = text.load_font("assets/sv_basic_manual/SVBasicManual.ttf", 16)

def draw_text(TTF_Font font, string str, int color, Point location)
    sprite = text.render_text(font, str, color)
    text.draw_rendered_text(sprite, location.x location.y)
end

namespace fps_counter
    state int framesElapsed = 0
    state float timeStarted = time
    state float lastRecoredFps = 0

    framesPerSample = 30
    earlySampleTime = .5

    framesElapsed += 1
    timeElapsed = time - timeStarted

    if (framesElapsed > framesPerSample) || (timeElapsed > earlySampleTime)
        lastRecoredFps = framesElapsed / timeElapsed
        framesElapsed = 0
        timeStarted = time
    end
end

fps = fps_counter.lastRecoredFps


namespace tweak
    def button(ref r, Point loc, float step)
        str = concat(r.name ' = ' r.to_string)

        text_sprite = text.render_text(ui_font_medium, str, #000)
        padding = 5.0
        rect = [loc.x - padding, loc.y - padding,
            loc.x + text_sprite.width + padding, loc.y + text_sprite.height + padding]
        color = #ee3399
        if mouse_in(rect) color = #ff44aa end
        draw_box(rect, color)
        text.draw_rendered_text(text_sprite, loc.x, loc.y)

        if mouse_wheel_up(rect)
            r.assign(r.asfloat - step)
        elif mouse_wheel_down(rect)
            r.assign(r.asfloat + step)
        end
    end
end

-- Load the user's script
state string user_script_filename
users_branch = include(user_script_filename)

-- Draw HUD

-- Draw fpses
text_sprite = text.render_text(ui_font_medium, concat('fps: ' fps), #fff)
text.draw_rendered_text(text_sprite, 10 280)
