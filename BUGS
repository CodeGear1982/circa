
Top 5 worst issues
  - Static error reporting is missing (such as misspelled/nonexistant variable names)
  - If a native function outputs wrong error type, the error message is confusing
  - Improv sometimes fails to reload

Recent
  Type inferrence fail in extra_output from if-block
  Runtime will die if it expects to find extra_output that isn't there (such as from dynamic_method)
  
Performance
  From perf checking, the #1 optimization would be to fix the interpreter stack:
    Each frame should not be a separate list, have one big list
    Values should be moved/reused when possible
  
Source repro
  Each branch should store the base indent level (instead of having this data in Term)

Code reload
  Bug fix, don't reload if the file has just been written and its size is 0. Maybe have a delay

Code cleanup
  Remove importing_macros.h
  Deprecate API using Term* or Function* to reference functions (prefer Branch*)
  Eliminate C++ Function type, in favor of Branch.

Parser
  In function decl, type should be optional (rather than name being optional)

Modules
  When compiling a module, the last value is automatically turned into an output (just
    like a function). This should probably be explicit for modules.

Code modification
  Code modification should go through a more controlled path.
    Add a CodeModification class that stores a modification in progress
    Add a global apply_modification() function that invokes it.
    Alternately, require that modifications must be passed through message-send
      One goal is that modifications should be able to be sent remotely

Big Features
  Proper module system
  Possibly get rid of separate 'int' type, and just use numbers. Replace with some other
    system that can detect when an expression will always be an integer.
