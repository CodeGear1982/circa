
bg_color = #fff
background(bg_color)

load_font("SVBasicManual.ttf", 12)

state Point last_touch_position

-- Draw a console where old messages fade out
namespace console
    type Item {
        number createdAt
        string str
    }

    number max_lifetime = 5.0
    state List items = []

    incoming_items = inbox()

    for incoming_item in incoming_items
        items.append(incoming_item)

    -- draw
    index = 0
    for item in @items
        @item -> Item

        lifetime = time - item.createdAt
        lifespan = lifetime / max_lifetime

        fade = 1.0
        if lifespan > .8
            fade = (1.0 - lifespan) / .2

        y = 40 + index * 20

        color = #fff + (bg_color - #fff) * (1.0 - fade)
        color[3] = 1.0
        draw_string(item.str, [10 y] color)

        if lifetime > max_lifetime
            discard
        index += 1

for event in incoming_touch_events
    send(console:incoming_items, [time to_string(event)])

    last_touch_position = event.loc

type Star {
    Point loc
    number rot
    number size
}

star_color = #f39
state global_scale = 1.0

def draw_star(Star star)
  radius = star.size * global_scale -> number
  num_points = 5

  rot = star.rot + time/5

  def draw_tip(int index)
    angle = index / num_points + rot
    l_angle = (index+.5) / num_points + rot
    r_angle = (index-.5) / num_points + rot
    outer_point = polar(angle)*radius + star.loc
    l_point = polar(l_angle)*(radius / 2) + star.loc
    r_point = polar(r_angle)*(radius / 2) + star.loc

    gl:triangles([outer_point l_point star.loc, star.loc r_point outer_point] star_color)

  for t in 0..num_points
    draw_tip(t)

state stars = []

-- Draw a black background

-- Draw an X where the mouse is
--   (unnecessary cast to Point, probably means bug in type inferrence)
mouse = last_touch_position -> Point

namespace draw_arms
  def draw_quad(List points, Color color)
      gl:triangles([points[0] points[1] points[2] points[2] points[3] points[0]] color)

  cross_color = #f396
  cross_thickness = 4.0
  cross_length = 12.0

  def draw_arm(number rot) -> List
      near_center = polar(rot) * cross_thickness + mouse
      near_l = polar(rot - .25) * (cross_thickness/2) + near_center
      near_r = polar(rot + .25) * (cross_thickness/2) + near_center
      far_center = polar(rot) * cross_length + mouse
      far_l = polar(rot - .25) * (cross_thickness/2) + far_center
      far_r = polar(rot + .25) * (cross_thickness/2) + far_center
      draw_quad([near_l far_l far_r near_r] cross_color)

  for rot in [.25 .5 .75 1]
      draw_arm(rot + -time)

-- Clicking will create a new spinning star
if mouse_clicked()
  -- Check if we clicked on an existing star
  stars.append([mouse rand() 40])

-- Adjust the size of stars with the mouse wheel
if mouse_wheel_up()
    global_scale *= 1.1
elif mouse_wheel_down()
    global_scale *= 0.9

-- Draw each star
for star in stars
  draw_star(star)

-- Draw code browser
namespace editor

    def get_highlight_color(int highlight_type) -> Color
        if highlight_type == styled_source:literal_string
            return(#884c03)
        elif highlight_type == styled_source:literal_number
            return(#2f2be2)
        elif highlight_type == styled_source:paren
            return(#003366)
        elif highlight_type == styled_source:comment
            return(#505050)
        elif highlight_type == styled_source:name
            return(#003366)
        elif highlight_type == styled_source:type_name
            return(#003366)
        elif highlight_type == styled_source:function_name
            return(#aa3366)
        elif highlight_type == styled_source:infix_operator
            return(#aa3366)
        elif highlight_type == styled_source:keyword
            return(#000000)
        else
            return(#003366)

def draw_code_editor(Point topleft, BranchRef branch)
    source = format_source(branch)

    letter_width = 8
    letter_height = 17

    current_line = 0
    current_col = 0
    i = 0
    for phrase in source
        s = phrase[0] -> string
        r = phrase[1] -> Ref
        t = phrase[2] -> int

        loc = [current_col*letter_width current_line*letter_height] -> Point
        loc += topleft

        color = editor:get_highlight_color(t)

        -- don't draw newline characters
        visable_s = cond(s == '\n', "", s)
        text_sprite_size = get_string_dimensions(visable_s)
        rect = to_rect(loc, [text_sprite_size.x text_sprite_size.y])

        bg_color = #fff0
        cond(mouse_over(rect) #ffe @bg_color)

        draw_highlight_rect = t != styled_source:whitespace

        if draw_highlight_rect
            fill_rect(rect, bg_color)

        draw_string(visable_s loc color)

        if mouse_wheel_up(rect)
            r.tweak(-1)
        elif mouse_wheel_down(rect)
            r.tweak(1)

        i += 1
        current_col += s.length()
        if (s == '\n')
            current_col = 0
            current_line += 1

sample_code = {
    a = 1
    b = 2
    c = a + b
    d = c * 5
}

draw_code_editor([10 10] draw_code_editor -> branch_ref)
