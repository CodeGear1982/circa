
import os,sys, glob

def create_windows_env(releaseBuild):
    env = Environment(platform = 'nt')
    env.Append(CPPFLAGS=['/EHsc'])

    if not releaseBuild:
        env.Append(LINKFLAGS = ['/DEBUG'])  # enable debugging information
        env.Append(LINKFLAGS = ['/NODEFAULTLIB:"LIBCMT.LIB"'])
        env.Append(LINKFLAGS = ['/NODEFAULTLIB:"LIBCPMT.LIB"'])
        env.Append(LINKFLAGS = ['/MACHINE:X86'])
        env.Append(CCFLAGS = ['/MD'])        # MSVCRT.LIB & MSVCPRT.LIB
        env.Append(CCFLAGS = ['/Od'])        # Disable optimizations
        env.Append(CCFLAGS = ['/Z7'])

    return env
        
def create_mac_env(releaseBuild):
    env = Environment(platform = 'posix')
    # Python support
    #env.Append(CPPPATH = ["/System/Library/Frameworks/Python.framework/Versions/2.5/Headers"])

    if not releaseBuild:
        env.Append(CPPFLAGS=['-ggdb'])
        env.Append(CPPFLAGS=['-bundle'])
        env.Append(CPPFLAGS=['-flat_namespace'])

    return env

RELEASE_BUILD = False
SOURCE_DIRECTORY = "src"

env = create_mac_env(RELEASE_BUILD)

env.Append(CPPDEFINES = ["_DEBUG"])
env.Append(CPPDEFINES = ["DEBUG"])
#env.Replace(CXX = 'llvm-g++')

env.BuildDir('build', 'src')

# Find source files
buildFiles = []
for file in os.listdir('src'):
    if file.endswith('.cpp'):
        buildFiles.append('build/' + file)
    
env.SharedLibrary('circa', buildFiles)

