Circa is a programming language designed to enable rapid development.

* Feature list *

Live editing of code.

  A program can be modified while it is running, and we try hard to make sure that the current state of the program is preserved.

Easy code inspection and modification

  Whether or not the code is running, there is a rich library of methods to inspect or modify Circa code. This enables many different forms of automated refactoring. It also enables us to create tools that allow humans to create Circa code without actually typing anything, such as through a visual interface.

Source reproduction

  Compiled code can be converted back into exactly the same source text that originally created it. If the code is modified at runtime, the source representation will look as much as possible as the original, but with the runtime modifications included. Source code files can be a convenient form of file-based persistence.

Declarative programming

  Circa supports some types of declarative statements, where you can state what you *want* something to be, without needing to specify how it should happen. One example is the 'feedback' statement, where you can specify what you want the result of some expression to be, and the runtime can propogate this request backwards through your code, until it finds a modifiable value that it can change to fulfill the request.

C++ integration

  One expected usage of Circa is as a helper library inside a C++ application. To this end, there are various helper functions to facilitate using C++ data, classes, or functions inside Circa, and vice-versa.
