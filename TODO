
Bugs:

 - Assignment operator should only be allowed to work on values
   Priority: Low (Assignment is discouraged)

 - Assignment to a field does not work
   Like this: point.x := 1
   Priority: Low (Assignment is discouraged)

 - If a subroutine is declared with a return type that isn't a valid type, there's
   a runtime abort trap.

 - Can't comment out something inside of a literal list

 - In an evaluation function, using to_float on something that is not a float, will cause
   an exception which is silently caught and ignored

 - Complex lvalues don't work.
  
   Doesn't work: something.field += x
   Doesn't work: something.field[i] = x

 - Dot operator doesn't work after an expression.
   This should try to get field 'a' from the result of 'f' but it doesn't work:
     f().y
   Also this doesn't work:
     (a).y

 - When reloading a branch, we need to search the whole world for references to the 
   old state, and update those references.

 - 'do once' needs to export name bindings. Maybe just make this syntactic sugar for if() ?

 - Name conflicts with field access. This seems to have a bug:
     a = Point()
     x = a.x


Tasks:
 - Need an efficient + safe way to share output values across terms
 - Range syntax, like this: [1..100]
 - Block syntax, like how it's easy to pass a block in ruby
 - Better reporting of runtime errors (include source line)

Big tasks:
 - Cool graphical demo
 - Parametrized types, lists and stuff
 - LLVM integration. (need to investigate this enough to learn what it would look like)
 - Access and edit properties from circa
 - C reproduction.
